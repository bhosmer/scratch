// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/CPUType.h>

// @generated by aten/src/ATen/gen.py from TypeDerived.cpp

#include <c10/core/TensorImpl.h>
#include <ATen/CPUGeneratorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/TensorImpl.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/core/op_registration/op_registration.h>

#include <ATen/LegacyTHFunctionsCPU.h>

namespace {
static const char* named_tensors_unsupported_error =
  " is not yet supported with named tensors. Please drop names via "
  "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
  "and set names on the result of the operation.";
}

namespace at {

/* example
Tensor * CPUType::add(Tensor & a, Tensor & b) {
  std::cout << "add Tensor with backend CPU\n";
  return &a;
}
*/

namespace CPUType {

Tensor add_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & add__Tensor(Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor & add_out_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out(out, self, other, alpha);
}
Tensor addmv(const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmv(self, mat, vec, beta, alpha);
}
Tensor & addmv_(Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmv_(self, mat, vec, beta, alpha);
}
Tensor & addmv_out_out(Tensor & out, const Tensor & self, const Tensor & mat, const Tensor & vec, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmv_out(out, self, mat, vec, beta, alpha);
}
Tensor & arange_out_start_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
    if (out.has_names()) {
        AT_ERROR("arange_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_cpu_out(out, start, end, step);
}
Tensor argmax(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("argmax", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argmax(self, dim, keepdim);
}
Tensor argmin(const Tensor & self, c10::optional<int64_t> dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("argmin", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argmin(self, dim, keepdim);
}
Tensor as_strided(const Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {

    // DeviceGuard omitted
    return at::native::as_strided_tensorimpl(self, size, stride, storage_offset);
}
Tensor & atan_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan__cpu(self);
}
Tensor & atan_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_atan_out_cpu(out, self);
}
Tensor baddbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_cpu(self, batch1, batch2, beta, alpha);
}
Tensor & baddbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm__cpu(self, batch1, batch2, beta, alpha);
}
Tensor & baddbmm_out_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("baddbmm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::baddbmm_out_cpu(out, self, batch1, batch2, beta, alpha);
}
Tensor & bernoulli__Tensor(Tensor & self, const Tensor & p, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_tensor_cpu_(self, p, generator);
}
Tensor & bernoulli__float(Tensor & self, double p, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_scalar_cpu_(self, p, generator);
}
Tensor binary_cross_entropy(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_cpu(self, target, weight, reduction);
}
Tensor & binary_cross_entropy_out_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_out_cpu(out, self, target, weight, reduction);
}
Tensor binary_cross_entropy_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_backward_cpu(grad_output, self, target, weight, reduction);
}
Tensor & binary_cross_entropy_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("binary_cross_entropy_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_backward_out_cpu(grad_input, grad_output, self, target, weight, reduction);
}
Tensor bincount(const Tensor & self, const Tensor & weights, int64_t minlength) {
    if (self.has_names() || weights.has_names()) {
        AT_ERROR("bincount", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_bincount_cpu(self, weights, minlength);
}
Tensor & bitwise_not_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_out(out, self);
}
Tensor & logical_not_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_out(out, self);
}
Tensor & logical_xor_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor_out(out, self, other);
}
Tensor & logical_and_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and_out(out, self, other);
}
Tensor & logical_or_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or_out(out, self, other);
}
Tensor bmm(const Tensor & self, const Tensor & mat2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_cpu(self, mat2);
}
Tensor & bmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bmm_out_cpu(out, self, mat2);
}
Tensor & ceil_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil_out(out, self);
}
Tensor clamp(const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp(self, min, max);
}
Tensor & clamp_(Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp__cpu(self, min, max);
}
Tensor & clamp_out_out(Tensor & out, const Tensor & self, c10::optional<Scalar> min, c10::optional<Scalar> max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_out_cpu(out, self, min, max);
}
Tensor & clamp_max_(Tensor & self, Scalar max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max__cpu(self, max);
}
Tensor & clamp_max_out_out(Tensor & out, const Tensor & self, Scalar max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_max_out_cpu(out, self, max);
}
Tensor & clamp_min_(Tensor & self, Scalar min) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min__cpu(self, min);
}
Tensor & clamp_min_out_out(Tensor & out, const Tensor & self, Scalar min) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_clamp_min_out_cpu(out, self, min);
}
Tensor & cos_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos__cpu(self);
}
Tensor & cos_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cos_out_cpu(out, self);
}
Tensor & cosh_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh__cpu(self);
}
Tensor & cosh_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cosh_out_cpu(out, self);
}
void _cummax_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim) {
    if (self.has_names() || values.has_names() || indices.has_names()) {
        AT_ERROR("_cummax_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::cummax_helper_cpu(self, values, indices, dim);
}
void _cummin_helper(const Tensor & self, Tensor & values, Tensor & indices, int64_t dim) {
    if (self.has_names() || values.has_names() || indices.has_names()) {
        AT_ERROR("_cummin_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::cummin_helper_cpu(self, values, indices, dim);
}
std::tuple<Tensor,Tensor> _ctc_loss(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, bool zero_infinity) {
    if (log_probs.has_names() || targets.has_names()) {
        AT_ERROR("_ctc_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss_cpu(log_probs, targets, input_lengths, target_lengths, blank, zero_infinity);
}
Tensor _ctc_loss_backward(const Tensor & grad, const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, const Tensor & neg_log_likelihood, const Tensor & log_alpha, int64_t blank, bool zero_infinity) {
    if (grad.has_names() || log_probs.has_names() || targets.has_names() || neg_log_likelihood.has_names() || log_alpha.has_names()) {
        AT_ERROR("_ctc_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::ctc_loss_backward_cpu(grad, log_probs, targets, input_lengths, target_lengths, neg_log_likelihood, log_alpha, blank, zero_infinity);
}
Tensor div_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(self, other);
}
Tensor & div__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(self, other);
}
Tensor & div_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_out(out, self, other);
}
Tensor dot(const Tensor & self, const Tensor & tensor) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_dot(self, tensor);
}
Tensor embedding_dense_backward(const Tensor & grad_output, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
    if (grad_output.has_names() || indices.has_names()) {
        AT_ERROR("embedding_dense_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::embedding_dense_backward_cpu(grad_output, indices, num_weights, padding_idx, scale_grad_by_freq);
}
Tensor & embedding_renorm_(Tensor & self, const Tensor & indices, double max_norm, double norm_type) {
    if (self.has_names() || indices.has_names()) {
        AT_ERROR("embedding_renorm_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::embedding_renorm_cpu_(self, indices, max_norm, norm_type);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> _embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::_embedding_bag_cpu(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
}
Tensor _embedding_bag_dense_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || maximum_indices.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag_dense_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_dense_backward_cpu(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor _embedding_bag_per_sample_weights_backward(const Tensor & grad, const Tensor & weight, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, int64_t mode) {
    if (grad.has_names() || weight.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names()) {
        AT_ERROR("_embedding_bag_per_sample_weights_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_per_sample_weights_backward_cpu(grad, weight, indices, offsets, offset2bag, mode);
}
Tensor empty_memory_format(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::empty_cpu(size, options, memory_format);
}
Tensor _empty_affine_quantized(IntArrayRef size, const TensorOptions & options, double scale, int64_t zero_point, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::empty_affine_quantized_other_backends_stub(size, options, scale, zero_point, memory_format);
}
Tensor _empty_per_channel_affine_quantized(IntArrayRef size, const Tensor & scales, const Tensor & zero_points, int64_t axis, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    if (scales.has_names() || zero_points.has_names()) {
        AT_ERROR("_empty_per_channel_affine_quantized", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::empty_per_channel_affine_quantized_other_backends_stub(size, scales, zero_points, axis, options, memory_format);
}
Tensor empty_strided(IntArrayRef size, IntArrayRef stride, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::empty_strided_cpu(size, stride, options);
}
Tensor & erf_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf__cpu(self);
}
Tensor & erf_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erf_out_cpu(out, self);
}
Tensor & erfc_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc__cpu(self);
}
Tensor & erfc_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfc_out_cpu(out, self);
}
Tensor & exp_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp__cpu(self);
}
Tensor & exp_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_exp_out_cpu(out, self);
}
Tensor & expm1_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1_out(out, self);
}
Tensor & eye_out_out(Tensor & out, int64_t n) {
    if (out.has_names()) {
        AT_ERROR("eye_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cpu(out, n);
}
Tensor & eye_out_m_out(Tensor & out, int64_t n, int64_t m) {
    if (out.has_names()) {
        AT_ERROR("eye_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::eye_out_cpu(out, n, m);
}
Tensor & floor_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_out(out, self);
}
Tensor floor_divide(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide(self, other);
}
Tensor & floor_divide__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_(self, other);
}
Tensor & floor_divide_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_out(out, self, other);
}
Tensor from_file(std::string filename, c10::optional<bool> shared, c10::optional<int64_t> size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::from_file(filename, shared, size, options);
}
Tensor grid_sampler_2d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    if (input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_2d_cpu(input, grid, interpolation_mode, padding_mode, align_corners);
}
std::tuple<Tensor,Tensor> grid_sampler_2d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    if (grad_output.has_names() || input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_2d_backward_cpu(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}
Tensor grid_sampler_3d(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    if (input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler_3d_cpu(input, grid, interpolation_mode, padding_mode, align_corners);
}
std::tuple<Tensor,Tensor> grid_sampler_3d_backward(const Tensor & grad_output, const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    if (grad_output.has_names() || input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler_3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::grid_sampler_3d_backward_cpu(grad_output, input, grid, interpolation_mode, padding_mode, align_corners);
}
Tensor _fft_with_size(const Tensor & self, int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntArrayRef checked_signal_sizes, bool normalized, bool onesided, IntArrayRef output_sizes) {
    if (self.has_names()) {
        AT_ERROR("_fft_with_size", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_fft_mkl(self, signal_ndim, complex_input, complex_output, inverse, checked_signal_sizes, normalized, onesided, output_sizes);
}
Tensor _inverse_helper(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_inverse_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_inverse_helper_cpu(self);
}
Tensor isnan(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::isnan(self);
}
Tensor kl_div_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, bool log_target) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("kl_div_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div_backward_cpu(grad_output, self, target, reduction, log_target);
}
std::tuple<Tensor &,Tensor &> kthvalue_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue_out_cpu(values, indices, self, k, dim, keepdim);
}
std::tuple<Tensor,Tensor,Tensor> native_layer_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t M, int64_t N, double eps) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("native_layer_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm_cpu(input, weight, bias, M, N, eps);
}
std::tuple<Tensor,Tensor,Tensor> native_layer_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & mean, const Tensor & rstd, const Tensor & weight, int64_t M, int64_t N, std::array<bool,3> output_mask) {
    if (grad_out.has_names() || input.has_names() || mean.has_names() || rstd.has_names() || weight.has_names()) {
        AT_ERROR("native_layer_norm_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::layer_norm_backward_cpu(grad_out, input, mean, rstd, weight, M, N, output_mask);
}
Tensor & linspace_out_out(Tensor & out, Scalar start, Scalar end, int64_t steps) {
    if (out.has_names()) {
        AT_ERROR("linspace_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::linspace_cpu_out(out, start, end, steps);
}
Tensor & log_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_out(out, self);
}
Tensor & log10_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10_out(out, self);
}
Tensor & log1p_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p_(self);
}
Tensor & log1p_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p_out(out, self);
}
Tensor & log2_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2_out(out, self);
}
Tensor & logspace_out_out(Tensor & out, Scalar start, Scalar end, int64_t steps, double base) {
    if (out.has_names()) {
        AT_ERROR("logspace_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::logspace_cpu_out(out, start, end, steps, base);
}
Tensor _log_softmax(const Tensor & self, int64_t dim, bool half_to_float) {
    if (self.has_names()) {
        AT_ERROR("_log_softmax", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_cpu(self, dim, half_to_float);
}
Tensor _log_softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
    if (grad_output.has_names() || output.has_names() || self.has_names()) {
        AT_ERROR("_log_softmax_backward_data", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax_backward_cpu(grad_output, output, dim, self);
}
Tensor mean(const Tensor & self, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_cpu_gpu(self, dtype);
}
Tensor mean_dim(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_cpu_gpu(self, dim, keepdim, dtype);
}
Tensor & mean_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out_cpu_gpu(out, self, dim, keepdim, dtype);
}
Tensor mm(const Tensor & self, const Tensor & mat2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mm_cpu(self, mat2);
}
Tensor & mm_out_out(Tensor & out, const Tensor & self, const Tensor & mat2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mm_cpu_out(out, self, mat2);
}
Tensor mul_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & mul__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor & mul_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out(out, self, other);
}
Tensor mv(const Tensor & self, const Tensor & vec) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mv_cpu(self, vec);
}
Tensor & mv_out_out(Tensor & out, const Tensor & self, const Tensor & vec) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mv_cpu_out(out, self, vec);
}
Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
    if (self.has_names()) {
        AT_ERROR("narrow_copy", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_dense(self, dim, start, length);
}
std::tuple<Tensor,Tensor,Tensor> native_batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("native_batch_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_cpu(input, weight, bias, running_mean, running_var, training, momentum, eps);
}
std::tuple<Tensor,Tensor,Tensor> native_batch_norm_backward(const Tensor & grad_out, const Tensor & input, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_invstd, bool train, double eps, std::array<bool,3> output_mask) {
    if (grad_out.has_names() || input.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_invstd.has_names()) {
        AT_ERROR("native_batch_norm_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_out));
    return at::native::batch_norm_backward_cpu(grad_out, input, weight, running_mean, running_var, save_mean, save_invstd, train, eps, output_mask);
}
std::tuple<Tensor,Tensor> batch_norm_update_stats(const Tensor & input, const Tensor & running_mean, const Tensor & running_var, double momentum) {
    if (input.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("batch_norm_update_stats", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm_update_stats_cpu(input, running_mean, running_var, momentum);
}
Tensor & randperm_out_generator_out(Tensor & out, int64_t n, Generator generator) {
    if (out.has_names()) {
        AT_ERROR("randperm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out_cpu(out, n, generator);
}
Tensor & range_out_out(Tensor & out, Scalar start, Scalar end, Scalar step) {
    if (out.has_names()) {
        AT_ERROR("range_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::range_cpu_out(out, start, end, step);
}
Tensor & neg_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_out(out, self);
}
Tensor repeat_interleave_Tensor(const Tensor & repeats) {
    if (repeats.has_names()) {
        AT_ERROR("repeat_interleave", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(repeats));
    return at::native::repeat_interleave_cpu(repeats);
}
Tensor & round_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round_out(out, self);
}
Tensor relu(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu(self);
}
Tensor & relu_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::relu_(self);
}
Tensor prelu(const Tensor & self, const Tensor & weight) {
    if (self.has_names() || weight.has_names()) {
        AT_ERROR("prelu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_cpu(self, weight);
}
std::tuple<Tensor,Tensor> prelu_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight) {
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("prelu_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prelu_backward_cpu(grad_output, self, weight);
}
Tensor gelu(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("gelu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gelu_cpu(self);
}
Tensor gelu_backward(const Tensor & grad, const Tensor & self) {
    if (grad.has_names() || self.has_names()) {
        AT_ERROR("gelu_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gelu_backward_cpu(grad, self);
}
Tensor & rsqrt_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt_out(out, self);
}
Tensor sigmoid(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid(self);
}
Tensor & sigmoid_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid_(self);
}
Tensor & sin_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin_out(out, self);
}
Tensor _softmax(const Tensor & self, int64_t dim, bool half_to_float) {
    if (self.has_names()) {
        AT_ERROR("_softmax", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_cpu(self, dim, half_to_float);
}
Tensor _softmax_backward_data(const Tensor & grad_output, const Tensor & output, int64_t dim, const Tensor & self) {
    if (grad_output.has_names() || output.has_names() || self.has_names()) {
        AT_ERROR("_softmax_backward_data", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax_backward_cpu(grad_output, output, dim, self);
}
Tensor & sspaddmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("sspaddmm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sspaddmm_out_only_sparse(out, self, mat1, mat2, beta, alpha);
}
Tensor & tan_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan__cpu(self);
}
Tensor & tan_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tan_out_cpu(out, self);
}
Tensor tanh(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tanh(self);
}
Tensor & tanh_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh__cpu(self);
}
Tensor & tanh_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_tanh_out_cpu(out, self);
}
Tensor threshold(const Tensor & self, Scalar threshold, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold(self, threshold, value);
}
Tensor & threshold_(Tensor & self, Scalar threshold, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_(self, threshold, value);
}
Tensor & threshold_out_out(Tensor & out, const Tensor & self, Scalar threshold, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_out(out, self, threshold, value);
}
Tensor threshold_backward(const Tensor & grad_output, const Tensor & self, Scalar threshold) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("threshold_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::threshold_backward(grad_output, self, threshold);
}
Tensor flip(const Tensor & self, IntArrayRef dims) {
    if (self.has_names()) {
        AT_ERROR("flip", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flip_cpu(self, dims);
}
Tensor roll(const Tensor & self, IntArrayRef shifts, IntArrayRef dims) {
    if (self.has_names()) {
        AT_ERROR("roll", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::roll_cpu(self, shifts, dims);
}
Tensor true_divide_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide(self, other);
}
Tensor & true_divide__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_(self, other);
}
Tensor & true_divide_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_out(out, self, other);
}
Tensor & trunc_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc_out(out, self);
}
std::tuple<Tensor,Tensor> _unique(const Tensor & self, bool sorted, bool return_inverse) {
    if (self.has_names()) {
        AT_ERROR("_unique", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique_cpu(self, sorted, return_inverse);
}
std::tuple<Tensor,Tensor,Tensor> unique_dim(const Tensor & self, int64_t dim, bool sorted, bool return_inverse, bool return_counts) {
    if (self.has_names()) {
        AT_ERROR("unique_dim", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_dim_cpu(self, dim, sorted, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> unique_consecutive(const Tensor & self, bool return_inverse, bool return_counts, c10::optional<int64_t> dim) {
    if (self.has_names()) {
        AT_ERROR("unique_consecutive", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_consecutive_cpu(self, return_inverse, return_counts, dim);
}
std::tuple<Tensor,Tensor,Tensor> unique_dim_consecutive(const Tensor & self, int64_t dim, bool return_inverse, bool return_counts) {
    if (self.has_names()) {
        AT_ERROR("unique_dim_consecutive", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unique_dim_consecutive_cpu(self, dim, return_inverse, return_counts);
}
std::tuple<Tensor,Tensor,Tensor> _unique2(const Tensor & self, bool sorted, bool return_inverse, bool return_counts) {
    if (self.has_names()) {
        AT_ERROR("_unique2", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unique2_cpu(self, sorted, return_inverse, return_counts);
}
Tensor _standard_gamma_grad(const Tensor & self, const Tensor & output) {
    if (self.has_names() || output.has_names()) {
        AT_ERROR("_standard_gamma_grad", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_standard_gamma_grad_cpu(self, output);
}
Tensor _standard_gamma(const Tensor & self, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("_standard_gamma", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_gamma_cpu(self, generator);
}
Tensor _dirichlet_grad(const Tensor & x, const Tensor & alpha, const Tensor & total) {
    if (x.has_names() || alpha.has_names() || total.has_names()) {
        AT_ERROR("_dirichlet_grad", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(x));
    return at::native::_dirichlet_grad_cpu(x, alpha, total);
}
Tensor _sample_dirichlet(const Tensor & self, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("_sample_dirichlet", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_dirichlet_cpu(self, generator);
}
Tensor poisson(const Tensor & self, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("poisson", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_poisson_cpu(self, generator);
}
Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clone(self, memory_format);
}
Tensor & pow_out_Tensor_Scalar_out(Tensor & out, const Tensor & self, Scalar exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_out(out, self, exponent);
}
Tensor pow_Tensor_Scalar(const Tensor & self, Scalar exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow(self, exponent);
}
Tensor & zero_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::zero_(self);
}
Tensor & sub_out_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_out(out, self, other, alpha);
}
Tensor sub_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(self, other, alpha);
}
Tensor & sub__Tensor(Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(self, other, alpha);
}
Tensor & addmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmm_out(out, self, mat1, mat2, beta, alpha);
}
Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmm(self, mat1, mat2, beta, alpha);
}
Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addmm_(self, mat1, mat2, beta, alpha);
}
Tensor to_sparse_sparse_dim(const Tensor & self, int64_t sparse_dim) {
    if (self.has_names()) {
        AT_ERROR("to_sparse", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(self, sparse_dim);
}
Tensor to_sparse(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("to_sparse", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_sparse(self);
}
Tensor to_mkldnn(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("to_mkldnn", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dense_to_mkldnn(self);
}
Tensor quantize_per_tensor(const Tensor & self, double scale, int64_t zero_point, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR("quantize_per_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::quantize_per_tensor_cpu(self, scale, zero_point, dtype);
}
std::vector<Tensor> quantize_per_tensor_tensors(TensorList tensors, const Tensor & scales, const Tensor & zero_points, ScalarType dtype) {
    if (scales.has_names() || zero_points.has_names() || at::has_names(tensors)) {
        AT_ERROR("quantize_per_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::quantize_per_tensor_list_cpu(tensors, scales, zero_points, dtype);
}
Tensor quantize_per_channel(const Tensor & self, const Tensor & scales, const Tensor & zero_points, int64_t axis, ScalarType dtype) {
    if (self.has_names() || scales.has_names() || zero_points.has_names()) {
        AT_ERROR("quantize_per_channel", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::quantize_per_channel_cpu(self, scales, zero_points, axis, dtype);
}
Tensor _make_per_tensor_quantized_tensor(const Tensor & self, double scale, int64_t zero_point) {
    if (self.has_names()) {
        AT_ERROR("_make_per_tensor_quantized_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::make_per_tensor_quantized_tensor_cpu(self, scale, zero_point);
}
Tensor _make_per_channel_quantized_tensor(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis) {
    if (self.has_names() || scale.has_names() || zero_point.has_names()) {
        AT_ERROR("_make_per_channel_quantized_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::make_per_channel_quantized_tensor_cpu(self, scale, zero_point, axis);
}
Scalar _local_scalar_dense(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_local_scalar_dense_cpu(self);
}
Tensor & set__source_Storage(Tensor & self, Storage source) {
    if (self.has_names()) {
        AT_ERROR("set_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::set_(self, source);
}
Tensor & set__source_Storage_storage_offset(Tensor & self, Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride) {
    if (self.has_names()) {
        AT_ERROR("set_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::set_storage_cpu_(self, source, storage_offset, size, stride);
}
Tensor & set__source_Tensor(Tensor & self, const Tensor & source) {
    if (self.has_names() || source.has_names()) {
        AT_ERROR("set_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::set_tensor_(self, source);
}
Tensor & set_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("set_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::set_cpu_(self);
}
bool is_set_to(const Tensor & self, const Tensor & tensor) {
    if (self.has_names() || tensor.has_names()) {
        AT_ERROR("is_set_to", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::is_set_to(self, tensor);
}
Tensor & masked_fill__Scalar(Tensor & self, const Tensor & mask, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__cpu(self, mask, value);
}
Tensor & masked_fill__Tensor(Tensor & self, const Tensor & mask, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill__cpu(self, mask, value);
}
Tensor & masked_scatter_(Tensor & self, const Tensor & mask, const Tensor & source) {
    if (self.has_names() || mask.has_names() || source.has_names()) {
        AT_ERROR("masked_scatter_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter__cpu(self, mask, source);
}
Tensor view(const Tensor & self, IntArrayRef size) {
    if (self.has_names()) {
        AT_ERROR("view", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::view(self, size);
}
Tensor & put_(Tensor & self, const Tensor & index, const Tensor & source, bool accumulate) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("put_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_put_(self, index, source, accumulate);
}
Tensor & index_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_add_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add_cpu_(self, dim, index, source);
}
Tensor & index_fill__int_Scalar(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_fill_(self, dim, index, value);
}
Tensor & index_fill__int_Tensor(Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor & scatter__src(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_cpu_(self, dim, index, src);
}
Tensor & scatter__value(Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("scatter_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_fill_cpu_(self, dim, index, value);
}
Tensor & scatter_add_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_add_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add_cpu_(self, dim, index, src);
}
Tensor & bitwise_and_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_and_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_out(out, self, other);
}
Tensor & bitwise_and_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("bitwise_and_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_out(out, self, other);
}
Tensor & bitwise_or_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_or_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_out(out, self, other);
}
Tensor & bitwise_or_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("bitwise_or_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_out(out, self, other);
}
Tensor & bitwise_xor_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_xor_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_out(out, self, other);
}
Tensor & bitwise_xor_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("bitwise_xor_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_out(out, self, other);
}
Tensor __lshift___Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__lshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__lshift__(self, other);
}
Tensor __lshift___Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__lshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__lshift__(self, other);
}
Tensor & __ilshift___Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__ilshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ilshift__(self, other);
}
Tensor & __ilshift___Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ilshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ilshift__(self, other);
}
Tensor __rshift___Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__rshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__rshift__(self, other);
}
Tensor __rshift___Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__rshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__rshift__(self, other);
}
Tensor & __irshift___Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__irshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__irshift__(self, other);
}
Tensor & __irshift___Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__irshift__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__irshift__(self, other);
}
Tensor & lgamma_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lgamma__cpu(self);
}
Tensor & tril_(Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR("tril_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cpu_(self, diagonal);
}
Tensor & triu_(Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR("triu_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cpu_(self, diagonal);
}
Tensor & renorm_(Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
    if (self.has_names()) {
        AT_ERROR("renorm_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_renorm_(self, p, dim, maxnorm);
}
Tensor & pow__Scalar(Tensor & self, Scalar exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_(self, exponent);
}
Tensor & pow__Tensor(Tensor & self, const Tensor & exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_(self, exponent);
}
Tensor & lerp__Scalar(Tensor & self, const Tensor & end, Scalar weight) {
    if (self.has_names() || end.has_names()) {
        AT_ERROR("lerp_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_scalar_(self, end, weight);
}
Tensor & lerp__Tensor(Tensor & self, const Tensor & end, const Tensor & weight) {
    if (self.has_names() || end.has_names() || weight.has_names()) {
        AT_ERROR("lerp_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_tensor_(self, end, weight);
}
Tensor & fmod__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("fmod_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fmod_(self, other);
}
Tensor & fmod__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("fmod_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fmod_(self, other);
}
Tensor & remainder__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("remainder_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::remainder_(self, other);
}
Tensor & remainder__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("remainder_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::remainder_(self, other);
}
Tensor & addbmm_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addbmm_(self, batch1, batch2, beta, alpha);
}
Tensor & addbmm_out_out(Tensor & out, const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addbmm_out(out, self, batch1, batch2, beta, alpha);
}
Tensor addbmm(const Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("addbmm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addbmm(self, batch1, batch2, beta, alpha);
}
Tensor & diag_out_out(Tensor & out, const Tensor & self, int64_t diagonal) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("diag_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag_out(out, self, diagonal);
}
Tensor diag(const Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR("diag", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag(self, diagonal);
}
Tensor & triu_out_out(Tensor & out, const Tensor & self, int64_t diagonal) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("triu_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu_cpu_out(out, self, diagonal);
}
Tensor & tril_out_out(Tensor & out, const Tensor & self, int64_t diagonal) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("tril_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril_cpu_out(out, self, diagonal);
}
Tensor tril_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::tril_indices_cpu(row, col, offset, options);
}
Tensor triu_indices(int64_t row, int64_t col, int64_t offset, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::triu_indices_cpu(row, col, offset, options);
}
Tensor trace(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("trace", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_trace(self);
}
Tensor & ne_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_out(out, self, other);
}
Tensor ne_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne(self, other);
}
Tensor & ne_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_out(out, self, other);
}
Tensor ne_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne(self, other);
}
Tensor & eq_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_out(out, self, other);
}
Tensor eq_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq(self, other);
}
Tensor & eq_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_out(out, self, other);
}
Tensor eq_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq(self, other);
}
Tensor & ge_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_out(out, self, other);
}
Tensor ge_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge(self, other);
}
Tensor & ge_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_out(out, self, other);
}
Tensor ge_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge(self, other);
}
Tensor & le_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_out(out, self, other);
}
Tensor le_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le(self, other);
}
Tensor & le_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_out(out, self, other);
}
Tensor le_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le(self, other);
}
Tensor & gt_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_out(out, self, other);
}
Tensor gt_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt(self, other);
}
Tensor & gt_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_out(out, self, other);
}
Tensor gt_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt(self, other);
}
Tensor & lt_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_out(out, self, other);
}
Tensor lt_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt(self, other);
}
Tensor & lt_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_out(out, self, other);
}
Tensor lt_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt(self, other);
}
Tensor & take_out_out(Tensor & out, const Tensor & self, const Tensor & index) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("take_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_take_out(out, self, index);
}
Tensor take(const Tensor & self, const Tensor & index) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("take", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_take(self, index);
}
Tensor & index_select_out_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("index_select_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select_out_cpu_(out, self, dim, index);
}
Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_select", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select_cpu_(self, dim, index);
}
Tensor & masked_select_out_out(Tensor & out, const Tensor & self, const Tensor & mask) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_out_cpu(out, self, mask);
}
Tensor masked_select(const Tensor & self, const Tensor & mask) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_select_cpu(self, mask);
}
Tensor & nonzero_out_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nonzero_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_nonzero_out(out, self);
}
Tensor nonzero(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("nonzero", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_nonzero(self);
}
Tensor & gather_out_out(Tensor & out, const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("gather_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out_cpu(out, self, dim, index, sparse_grad);
}
Tensor gather(const Tensor & self, int64_t dim, const Tensor & index, bool sparse_grad) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("gather", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_cpu(self, dim, index, sparse_grad);
}
std::tuple<Tensor &,Tensor &> lstsq_out_X(Tensor & X, Tensor & qr, const Tensor & self, const Tensor & A) {
    if (X.has_names() || qr.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR("lstsq_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gels_out(X, qr, self, A);
}
std::tuple<Tensor,Tensor> lstsq(const Tensor & self, const Tensor & A) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR("lstsq", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_gels(self, A);
}
std::tuple<Tensor,Tensor> _triangular_solve_helper(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR("_triangular_solve_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_triangular_solve_helper_cpu(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> _symeig_helper(const Tensor & self, bool eigenvectors, bool upper) {
    if (self.has_names()) {
        AT_ERROR("_symeig_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_symeig_helper_cpu(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &> eig_out_e(Tensor & e, Tensor & v, const Tensor & self, bool eigenvectors) {
    if (e.has_names() || v.has_names() || self.has_names()) {
        AT_ERROR("eig_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eig_out(e, v, self, eigenvectors);
}
std::tuple<Tensor,Tensor> eig(const Tensor & self, bool eigenvectors) {
    if (self.has_names()) {
        AT_ERROR("eig", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_eig(self, eigenvectors);
}
std::tuple<Tensor,Tensor,Tensor> _svd_helper(const Tensor & self, bool some, bool compute_uv) {
    if (self.has_names()) {
        AT_ERROR("_svd_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_svd_helper_cpu(self, some, compute_uv);
}
Tensor _cholesky_helper(const Tensor & self, bool upper) {
    if (self.has_names()) {
        AT_ERROR("_cholesky_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_helper_cpu(self, upper);
}
Tensor _cholesky_solve_helper(const Tensor & self, const Tensor & A, bool upper) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR("_cholesky_solve_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cholesky_solve_helper_cpu(self, A, upper);
}
std::tuple<Tensor,Tensor> _solve_helper(const Tensor & self, const Tensor & A) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR("_solve_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_solve_helper_cpu(self, A);
}
Tensor & cholesky_inverse_out_out(Tensor & out, const Tensor & self, bool upper) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("cholesky_inverse_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_potri_out(out, self, upper);
}
Tensor cholesky_inverse(const Tensor & self, bool upper) {
    if (self.has_names()) {
        AT_ERROR("cholesky_inverse", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_potri(self, upper);
}
std::tuple<Tensor,Tensor> _qr_helper(const Tensor & self, bool some) {
    if (self.has_names()) {
        AT_ERROR("_qr_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_qr_helper_cpu(self, some);
}
std::tuple<Tensor &,Tensor &> geqrf_out_a(Tensor & a, Tensor & tau, const Tensor & self) {
    if (a.has_names() || tau.has_names() || self.has_names()) {
        AT_ERROR("geqrf_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_geqrf_out(a, tau, self);
}
std::tuple<Tensor,Tensor> geqrf(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("geqrf", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_geqrf(self);
}
Tensor & orgqr_out_out(Tensor & out, const Tensor & self, const Tensor & input2) {
    if (out.has_names() || self.has_names() || input2.has_names()) {
        AT_ERROR("orgqr_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_orgqr_out(out, self, input2);
}
Tensor orgqr(const Tensor & self, const Tensor & input2) {
    if (self.has_names() || input2.has_names()) {
        AT_ERROR("orgqr", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_orgqr(self, input2);
}
Tensor & ormqr_out_out(Tensor & out, const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {
    if (out.has_names() || self.has_names() || input2.has_names() || input3.has_names()) {
        AT_ERROR("ormqr_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ormqr_out(out, self, input2, input3, left, transpose);
}
Tensor ormqr(const Tensor & self, const Tensor & input2, const Tensor & input3, bool left, bool transpose) {
    if (self.has_names() || input2.has_names() || input3.has_names()) {
        AT_ERROR("ormqr", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_ormqr(self, input2, input3, left, transpose);
}
std::tuple<Tensor,Tensor,Tensor> _lu_with_info(const Tensor & self, bool pivot, bool check_errors) {
    if (self.has_names()) {
        AT_ERROR("_lu_with_info", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lu_with_info_cpu(self, pivot, check_errors);
}
Tensor _lu_solve_helper(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    if (self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR("_lu_solve_helper", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lu_solve_helper_cpu(self, LU_data, LU_pivots);
}
Tensor & multinomial_out_out(Tensor & out, const Tensor & self, int64_t num_samples, bool replacement, Generator generator) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("multinomial_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multinomial_out(out, self, num_samples, replacement, generator);
}
Tensor multinomial(const Tensor & self, int64_t num_samples, bool replacement, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("multinomial", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multinomial(self, num_samples, replacement, generator);
}
std::tuple<Tensor,Tensor> _multinomial_alias_setup(const Tensor & probs) {
    if (probs.has_names()) {
        AT_ERROR("_multinomial_alias_setup", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(probs));
    return at::native::legacy::cpu::_th_multinomial_alias_setup(probs);
}
Tensor _multinomial_alias_draw(const Tensor & J, const Tensor & q, int64_t num_samples, Generator generator) {
    if (J.has_names() || q.has_names()) {
        AT_ERROR("_multinomial_alias_draw", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(J));
    return at::native::legacy::cpu::_th_multinomial_alias_draw(J, q, num_samples, generator);
}
Tensor & lgamma_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_lgamma_out_cpu(out, self);
}
Tensor lgamma(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lgamma(self);
}
Tensor erfinv(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfinv(self);
}
Tensor & erfinv_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfinv__cpu(self);
}
Tensor & erfinv_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_erfinv_out_cpu(out, self);
}
Tensor & sign_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign_out(out, self);
}
Tensor & lerp_out_Scalar_out(Tensor & out, const Tensor & self, const Tensor & end, Scalar weight) {
    if (out.has_names() || self.has_names() || end.has_names()) {
        AT_ERROR("lerp_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_scalar_out(out, self, end, weight);
}
Tensor & lerp_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & end, const Tensor & weight) {
    if (out.has_names() || self.has_names() || end.has_names() || weight.has_names()) {
        AT_ERROR("lerp_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_tensor_out(out, self, end, weight);
}
Tensor lerp_Scalar(const Tensor & self, const Tensor & end, Scalar weight) {
    if (self.has_names() || end.has_names()) {
        AT_ERROR("lerp", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_scalar(self, end, weight);
}
Tensor lerp_Tensor(const Tensor & self, const Tensor & end, const Tensor & weight) {
    if (self.has_names() || end.has_names() || weight.has_names()) {
        AT_ERROR("lerp", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lerp_cpu_tensor(self, end, weight);
}
Tensor & histc_out_out(Tensor & out, const Tensor & self, int64_t bins, Scalar min, Scalar max) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("histc_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_histc_out(out, self, bins, min, max);
}
Tensor histc(const Tensor & self, int64_t bins, Scalar min, Scalar max) {
    if (self.has_names()) {
        AT_ERROR("histc", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_histc(self, bins, min, max);
}
Tensor & fmod_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("fmod_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fmod_out(out, self, other);
}
Tensor fmod_Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("fmod", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fmod(self, other);
}
Tensor & fmod_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("fmod_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fmod_out(out, self, other);
}
Tensor fmod_Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("fmod", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fmod(self, other);
}
Tensor & remainder_out_Scalar_out(Tensor & out, const Tensor & self, Scalar other) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("remainder_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::remainder_out(out, self, other);
}
Tensor remainder_Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("remainder", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::remainder(self, other);
}
Tensor & remainder_out_Tensor_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("remainder_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::remainder_out(out, self, other);
}
Tensor remainder_Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("remainder", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::remainder(self, other);
}
Tensor min(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self);
}
Tensor max(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self);
}
Tensor median(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_cpu(self);
}
std::tuple<Tensor &,Tensor &> sort_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool descending) {
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("sort_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> sort(const Tensor & self, int64_t dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR("sort", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_sort(self, dim, descending);
}
std::tuple<Tensor &,Tensor &> topk_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("topk_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::topk_out_cpu(values, indices, self, k, dim, largest, sorted);
}
std::tuple<Tensor,Tensor> topk(const Tensor & self, int64_t k, int64_t dim, bool largest, bool sorted) {
    if (self.has_names()) {
        AT_ERROR("topk", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::topk(self, k, dim, largest, sorted);
}
Tensor any(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self);
}
Tensor & renorm_out_out(Tensor & out, const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("renorm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_renorm_out(out, self, p, dim, maxnorm);
}
Tensor renorm(const Tensor & self, Scalar p, int64_t dim, Scalar maxnorm) {
    if (self.has_names()) {
        AT_ERROR("renorm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_renorm(self, p, dim, maxnorm);
}
Tensor unfold(const Tensor & self, int64_t dimension, int64_t size, int64_t step) {
    if (self.has_names()) {
        AT_ERROR("unfold", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::unfold(self, dimension, size, step);
}
bool equal(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_equal(self, other);
}
Tensor & pow_out_Tensor_Tensor_out(Tensor & out, const Tensor & self, const Tensor & exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_out(out, self, exponent);
}
Tensor pow_Tensor_Tensor(const Tensor & self, const Tensor & exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow(self, exponent);
}
Tensor & pow_out_Scalar_out(Tensor & out, Scalar self, const Tensor & exponent) {

    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::pow_out(out, self, exponent);
}
Tensor pow_Scalar(Scalar self, const Tensor & exponent) {

    const OptionalDeviceGuard device_guard(device_of(exponent));
    return at::native::pow(self, exponent);
}
Tensor _addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addr(self, vec1, vec2, beta, alpha);
}
Tensor & _addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addr_(self, vec1, vec2, beta, alpha);
}
Tensor & _addr_out_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("_addr_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor & _index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("_index_copy_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_index_copy_(self, dim, index, source);
}
Tensor _cumsum(const Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR("_cumsum", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cumsum_cpu(self, dim);
}
Tensor & _cumsum_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_cumsum_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cumsum_out_cpu(out, self, dim);
}
Tensor _cumprod(const Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR("_cumprod", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cumprod_cpu(self, dim);
}
Tensor & _cumprod_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("_cumprod_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cumprod_out_cpu(out, self, dim);
}
Tensor _var(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_var(self, unbiased);
}
Tensor _std(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_std(self, unbiased);
}
Tensor _cat(TensorList tensors, int64_t dim) {
    if (at::has_names(tensors)) {
        AT_ERROR("_cat", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::_cat_cpu(tensors, dim);
}
Tensor & _cat_out_out(Tensor & out, TensorList tensors, int64_t dim) {
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR("_cat_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::_cat_out_cpu(out, tensors, dim);
}
std::tuple<Tensor,Tensor> _mode(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("_mode", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> _mode_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("_mode_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::legacy::cpu::_th_mode_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> _max(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("_max", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_max_cpu(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> _max_out_max(Tensor & max, Tensor & max_indices, const Tensor & self, int64_t dim, bool keepdim) {
    if (max.has_names() || max_indices.has_names() || self.has_names()) {
        AT_ERROR("_max_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_max_out_cpu(max, max_indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> _min(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("_min", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_min_cpu(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> _min_out_min(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {
    if (min.has_names() || min_indices.has_names() || self.has_names()) {
        AT_ERROR("_min_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_min_out_cpu(min, min_indices, self, dim, keepdim);
}
Tensor & mse_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor mse_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss_backward(grad_output, self, target, reduction);
}
Tensor & l1_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor & multi_margin_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multi_margin_loss_cpu_out(out, self, target, p, margin, weight, reduction);
}
Tensor multi_margin_loss(const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multi_margin_loss_cpu(self, target, p, margin, weight, reduction);
}
Tensor & multi_margin_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multi_margin_loss_cpu_backward_out(grad_input, grad_output, self, target, p, margin, weight, reduction);
}
Tensor multi_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, Scalar p, Scalar margin, const Tensor & weight, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("multi_margin_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multi_margin_loss_cpu_backward(grad_output, self, target, p, margin, weight, reduction);
}
std::tuple<Tensor &,Tensor &> multilabel_margin_loss_forward_out_output(Tensor & output, Tensor & is_target, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (output.has_names() || is_target.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss_forward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_forward_out_cpu(output, is_target, self, target, reduction);
}
std::tuple<Tensor,Tensor> multilabel_margin_loss_forward(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_forward_cpu(self, target, reduction);
}
Tensor & multilabel_margin_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || is_target.has_names()) {
        AT_ERROR("multilabel_margin_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_backward_cpu_out(grad_input, grad_output, self, target, reduction, is_target);
}
Tensor multilabel_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction, const Tensor & is_target) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || is_target.has_names()) {
        AT_ERROR("multilabel_margin_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_backward_cpu(grad_output, self, target, reduction, is_target);
}
std::tuple<Tensor &,Tensor &> nll_loss_forward_out_output(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (output.has_names() || total_weight.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_forward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_forward_out_cpu(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> nll_loss_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_forward_cpu(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_backward_out_cpu(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor nll_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_backward_cpu(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
std::tuple<Tensor &,Tensor &> nll_loss2d_forward_out_output(Tensor & output, Tensor & total_weight, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (output.has_names() || total_weight.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d_forward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_forward_out_cpu(output, total_weight, self, target, weight, reduction, ignore_index);
}
std::tuple<Tensor,Tensor> nll_loss2d_forward(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_forward_cpu(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_backward_out_cpu(grad_input, grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor nll_loss2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index, const Tensor & total_weight) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || total_weight.has_names()) {
        AT_ERROR("nll_loss2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_backward_cpu(grad_output, self, target, weight, reduction, ignore_index, total_weight);
}
Tensor & smooth_l1_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss_out(out, self, target, reduction);
}
Tensor & smooth_l1_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor & elu_out_out(Tensor & out, const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("elu_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu_out(out, self, alpha, scale, input_scale);
}
Tensor elu(const Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    if (self.has_names()) {
        AT_ERROR("elu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu(self, alpha, scale, input_scale);
}
Tensor & elu_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("elu_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::elu_backward_out(grad_input, grad_output, alpha, scale, input_scale, output);
}
Tensor & elu_(Tensor & self, Scalar alpha, Scalar scale, Scalar input_scale) {
    if (self.has_names()) {
        AT_ERROR("elu_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::elu_(self, alpha, scale, input_scale);
}
Tensor & glu_out_out(Tensor & out, const Tensor & self, int64_t dim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("glu_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::glu_out(out, self, dim);
}
Tensor glu(const Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR("glu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::glu(self, dim);
}
Tensor & glu_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, int64_t dim) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("glu_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::glu_backward_out(grad_input, grad_output, self, dim);
}
Tensor glu_backward(const Tensor & grad_output, const Tensor & self, int64_t dim) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("glu_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::glu_backward(grad_output, self, dim);
}
Tensor hardsigmoid(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("hardsigmoid", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardsigmoid(self);
}
Tensor & hardtanh_out_out(Tensor & out, const Tensor & self, Scalar min_val, Scalar max_val) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("hardtanh_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_out(out, self, min_val, max_val);
}
Tensor hardtanh(const Tensor & self, Scalar min_val, Scalar max_val) {
    if (self.has_names()) {
        AT_ERROR("hardtanh", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh(self, min_val, max_val);
}
Tensor & hardtanh_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("hardtanh_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_backward_out(grad_input, grad_output, self, min_val, max_val);
}
Tensor & hardtanh_(Tensor & self, Scalar min_val, Scalar max_val) {
    if (self.has_names()) {
        AT_ERROR("hardtanh_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_(self, min_val, max_val);
}
Tensor hardswish(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("hardswish", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish(self);
}
Tensor & hardswish_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("hardswish_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish_(self);
}
Tensor & leaky_relu_out_out(Tensor & out, const Tensor & self, Scalar negative_slope) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("leaky_relu_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::leaky_relu_out(out, self, negative_slope);
}
Tensor leaky_relu(const Tensor & self, Scalar negative_slope) {
    if (self.has_names()) {
        AT_ERROR("leaky_relu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::leaky_relu(self, negative_slope);
}
Tensor & leaky_relu_(Tensor & self, Scalar negative_slope) {
    if (self.has_names()) {
        AT_ERROR("leaky_relu_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::leaky_relu_(self, negative_slope);
}
std::tuple<Tensor &,Tensor &> log_sigmoid_forward_out_output(Tensor & output, Tensor & buffer, const Tensor & self) {
    if (output.has_names() || buffer.has_names() || self.has_names()) {
        AT_ERROR("log_sigmoid_forward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_forward_out_cpu(output, buffer, self);
}
std::tuple<Tensor,Tensor> log_sigmoid_forward(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("log_sigmoid_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_forward_cpu(self);
}
Tensor & log_sigmoid_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || buffer.has_names()) {
        AT_ERROR("log_sigmoid_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_backward_out_cpu(grad_input, grad_output, self, buffer);
}
Tensor log_sigmoid_backward(const Tensor & grad_output, const Tensor & self, const Tensor & buffer) {
    if (grad_output.has_names() || self.has_names() || buffer.has_names()) {
        AT_ERROR("log_sigmoid_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_backward_cpu(grad_output, self, buffer);
}
Tensor & rrelu_with_noise_out_out(Tensor & out, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator generator) {
    if (out.has_names() || self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_with_noise_out_cpu(out, self, noise, lower, upper, training, generator);
}
Tensor rrelu_with_noise(const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator generator) {
    if (self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_with_noise_cpu(self, noise, lower, upper, training, generator);
}
Tensor & rrelu_with_noise_(Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, Generator generator) {
    if (self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_with_noise_cpu_(self, noise, lower, upper, training, generator);
}
Tensor & softplus_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || output.has_names()) {
        AT_ERROR("softplus_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_backward_out(grad_input, grad_output, self, beta, threshold, output);
}
Tensor & softshrink_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, Scalar lambd) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("softshrink_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_backward_out(grad_input, grad_output, self, lambd);
}
Tensor & adaptive_avg_pool2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_out_cpu(out, self, output_size);
}
Tensor _adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("_adaptive_avg_pool2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_cpu(self, output_size);
}
Tensor _adaptive_avg_pool2d_backward(const Tensor & grad_output, const Tensor & self) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("_adaptive_avg_pool2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d_backward_cpu(grad_output, self);
}
Tensor & adaptive_avg_pool3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_out_cpu(out, self, output_size);
}
Tensor adaptive_avg_pool3d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_cpu(self, output_size);
}
Tensor & adaptive_avg_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_backward_out_cpu(grad_input, grad_output, self);
}
Tensor adaptive_avg_pool3d_backward(const Tensor & grad_output, const Tensor & self) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("adaptive_avg_pool3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool3d_backward_cpu(grad_output, self);
}
std::tuple<Tensor &,Tensor &> adaptive_max_pool2d_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("adaptive_max_pool2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_out_cpu(out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool2d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("adaptive_max_pool2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_cpu(self, output_size);
}
Tensor & adaptive_max_pool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_backward_out_cpu(grad_input, grad_output, self, indices);
}
Tensor adaptive_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool2d_backward_cpu(grad_output, self, indices);
}
std::tuple<Tensor &,Tensor &> adaptive_max_pool3d_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef output_size) {
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("adaptive_max_pool3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_out_cpu(out, indices, self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool3d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("adaptive_max_pool3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_cpu(self, output_size);
}
Tensor & adaptive_max_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_backward_out_cpu(grad_input, grad_output, self, indices);
}
Tensor adaptive_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("adaptive_max_pool3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool3d_backward_cpu(grad_output, self, indices);
}
Tensor & avg_pool2d_out_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_out_cpu(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (self.has_names()) {
        AT_ERROR("avg_pool2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_cpu(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & avg_pool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool2d_backward_cpu(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & avg_pool3d_out_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("avg_pool3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_out_cpu(out, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (self.has_names()) {
        AT_ERROR("avg_pool3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_cpu(self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor & avg_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
Tensor avg_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad, c10::optional<int64_t> divisor_override) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("avg_pool3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool3d_backward_cpu(grad_output, self, kernel_size, stride, padding, ceil_mode, count_include_pad, divisor_override);
}
std::tuple<Tensor &,Tensor &> fractional_max_pool2d_out_output(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    if (output.has_names() || indices.has_names() || self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_out_cpu(output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> fractional_max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    if (self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_cpu(self, kernel_size, output_size, random_samples);
}
Tensor & fractional_max_pool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_out_cpu(grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor fractional_max_pool2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool2d_backward_cpu(grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> fractional_max_pool3d_out_output(Tensor & output, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    if (output.has_names() || indices.has_names() || self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_out_cpu(output, indices, self, kernel_size, output_size, random_samples);
}
std::tuple<Tensor,Tensor> fractional_max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & random_samples) {
    if (self.has_names() || random_samples.has_names()) {
        AT_ERROR("fractional_max_pool3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_cpu(self, kernel_size, output_size, random_samples);
}
Tensor & fractional_max_pool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_out_cpu(grad_input, grad_output, self, kernel_size, output_size, indices);
}
Tensor fractional_max_pool3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef output_size, const Tensor & indices) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("fractional_max_pool3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fractional_max_pool3d_backward_cpu(grad_output, self, kernel_size, output_size, indices);
}
std::tuple<Tensor &,Tensor &> max_pool2d_with_indices_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("max_pool2d_with_indices_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_out_cpu(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> max_pool2d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_cpu(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & max_pool2d_with_indices_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool2d_with_indices_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor max_pool2d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool2d_with_indices_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d_with_indices_backward_cpu(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
std::tuple<Tensor &,Tensor &> max_pool3d_with_indices_out_out(Tensor & out, Tensor & indices, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {
    if (out.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("max_pool3d_with_indices_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_out_cpu(out, indices, self, kernel_size, stride, padding, dilation, ceil_mode);
}
std::tuple<Tensor,Tensor> max_pool3d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_cpu(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor & max_pool3d_with_indices_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool3d_with_indices_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_backward_out_cpu(grad_input, grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor max_pool3d_with_indices_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode, const Tensor & indices) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_pool3d_with_indices_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d_with_indices_backward_cpu(grad_output, self, kernel_size, stride, padding, dilation, ceil_mode, indices);
}
Tensor & max_unpool2d_out_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    if (out.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_forward_out_cpu(out, self, indices, output_size);
}
Tensor max_unpool2d(const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    if (self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_forward_cpu(self, indices, output_size);
}
Tensor & max_unpool2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_backward_out_cpu(grad_input, grad_output, self, indices, output_size);
}
Tensor max_unpool2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling2d_backward_cpu(grad_output, self, indices, output_size);
}
Tensor & max_unpool3d_out_out(Tensor & out, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    if (out.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_forward_out_cpu(out, self, indices, output_size, stride, padding);
}
Tensor max_unpool3d(const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_forward_cpu(self, indices, output_size, stride, padding);
}
Tensor & max_unpool3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_backward_out_cpu(grad_input, grad_output, self, indices, output_size, stride, padding);
}
Tensor max_unpool3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & indices, IntArrayRef output_size, IntArrayRef stride, IntArrayRef padding) {
    if (grad_output.has_names() || self.has_names() || indices.has_names()) {
        AT_ERROR("max_unpool3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_unpooling3d_backward_cpu(grad_output, self, indices, output_size, stride, padding);
}
Tensor & reflection_pad1d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad1d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_out_cpu(out, self, padding);
}
Tensor reflection_pad1d(const Tensor & self, IntArrayRef padding) {
    if (self.has_names()) {
        AT_ERROR("reflection_pad1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_cpu(self, padding);
}
Tensor & reflection_pad1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad1d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor reflection_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad1d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad1d_backward_cpu(grad_output, self, padding);
}
Tensor & reflection_pad2d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_out_cpu(out, self, padding);
}
Tensor reflection_pad2d(const Tensor & self, IntArrayRef padding) {
    if (self.has_names()) {
        AT_ERROR("reflection_pad2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_cpu(self, padding);
}
Tensor & reflection_pad2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor reflection_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("reflection_pad2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reflection_pad2d_backward_cpu(grad_output, self, padding);
}
Tensor & replication_pad1d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("replication_pad1d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_out_cpu(out, self, padding);
}
Tensor replication_pad1d(const Tensor & self, IntArrayRef padding) {
    if (self.has_names()) {
        AT_ERROR("replication_pad1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_cpu(self, padding);
}
Tensor & replication_pad1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad1d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor replication_pad1d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad1d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad1d_backward_cpu(grad_output, self, padding);
}
Tensor & replication_pad2d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("replication_pad2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_out_cpu(out, self, padding);
}
Tensor replication_pad2d(const Tensor & self, IntArrayRef padding) {
    if (self.has_names()) {
        AT_ERROR("replication_pad2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_cpu(self, padding);
}
Tensor & replication_pad2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor replication_pad2d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad2d_backward_cpu(grad_output, self, padding);
}
Tensor & replication_pad3d_out_out(Tensor & out, const Tensor & self, IntArrayRef padding) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("replication_pad3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_out_cpu(out, self, padding);
}
Tensor replication_pad3d(const Tensor & self, IntArrayRef padding) {
    if (self.has_names()) {
        AT_ERROR("replication_pad3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_cpu(self, padding);
}
Tensor & replication_pad3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_out_cpu(grad_input, grad_output, self, padding);
}
Tensor replication_pad3d_backward(const Tensor & grad_output, const Tensor & self, IntArrayRef padding) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("replication_pad3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::replication_pad3d_backward_cpu(grad_output, self, padding);
}
Tensor & upsample_linear1d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_linear1d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_linear1d_out_cpu(out, self, output_size, align_corners, scales);
}
Tensor upsample_linear1d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales) {
    if (self.has_names()) {
        AT_ERROR("upsample_linear1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_linear1d_cpu(self, output_size, align_corners, scales);
}
Tensor & upsample_linear1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_linear1d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_linear1d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales);
}
Tensor upsample_linear1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_linear1d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_linear1d_backward_cpu(grad_output, output_size, input_size, align_corners, scales);
}
Tensor & upsample_bilinear2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_bilinear2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bilinear2d_out_cpu(out, self, output_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bilinear2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (self.has_names()) {
        AT_ERROR("upsample_bilinear2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bilinear2d_cpu(self, output_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_bilinear2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_bilinear2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_bilinear2d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bilinear2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_bilinear2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_bilinear2d_backward_cpu(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_bicubic2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_bicubic2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bicubic2d_out_cpu(out, self, output_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bicubic2d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (self.has_names()) {
        AT_ERROR("upsample_bicubic2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_bicubic2d_cpu(self, output_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_bicubic2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_bicubic2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_bicubic2d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor upsample_bicubic2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_bicubic2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_bicubic2d_backward_cpu(grad_output, output_size, input_size, align_corners, scales_h, scales_w);
}
Tensor & upsample_trilinear3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_trilinear3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_trilinear3d_out_cpu(out, self, output_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor upsample_trilinear3d(const Tensor & self, IntArrayRef output_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (self.has_names()) {
        AT_ERROR("upsample_trilinear3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_trilinear3d_cpu(self, output_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor & upsample_trilinear3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_trilinear3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_trilinear3d_backward_out_cpu(grad_input, grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor upsample_trilinear3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, bool align_corners, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_trilinear3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_trilinear3d_backward_cpu(grad_output, output_size, input_size, align_corners, scales_d, scales_h, scales_w);
}
Tensor & upsample_nearest1d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest1d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest1d_out_cpu(out, self, output_size, scales);
}
Tensor upsample_nearest1d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales) {
    if (self.has_names()) {
        AT_ERROR("upsample_nearest1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest1d_cpu(self, output_size, scales);
}
Tensor & upsample_nearest1d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest1d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest1d_backward_out_cpu(grad_input, grad_output, output_size, input_size, scales);
}
Tensor upsample_nearest1d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest1d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest1d_backward_cpu(grad_output, output_size, input_size, scales);
}
Tensor & upsample_nearest2d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_out_cpu(out, self, output_size, scales_h, scales_w);
}
Tensor upsample_nearest2d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (self.has_names()) {
        AT_ERROR("upsample_nearest2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest2d_cpu(self, output_size, scales_h, scales_w);
}
Tensor & upsample_nearest2d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest2d_backward_out_cpu(grad_input, grad_output, output_size, input_size, scales_h, scales_w);
}
Tensor upsample_nearest2d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest2d_backward_cpu(grad_output, output_size, input_size, scales_h, scales_w);
}
Tensor & upsample_nearest3d_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("upsample_nearest3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest3d_out_cpu(out, self, output_size, scales_d, scales_h, scales_w);
}
Tensor upsample_nearest3d(const Tensor & self, IntArrayRef output_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (self.has_names()) {
        AT_ERROR("upsample_nearest3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::upsample_nearest3d_cpu(self, output_size, scales_d, scales_h, scales_w);
}
Tensor & upsample_nearest3d_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("upsample_nearest3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::upsample_nearest3d_backward_out_cpu(grad_input, grad_output, output_size, input_size, scales_d, scales_h, scales_w);
}
Tensor upsample_nearest3d_backward(const Tensor & grad_output, IntArrayRef output_size, IntArrayRef input_size, c10::optional<double> scales_d, c10::optional<double> scales_h, c10::optional<double> scales_w) {
    if (grad_output.has_names()) {
        AT_ERROR("upsample_nearest3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::upsample_nearest3d_backward_cpu(grad_output, output_size, input_size, scales_d, scales_h, scales_w);
}
Tensor & sigmoid_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("sigmoid_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::sigmoid_backward_out(grad_input, grad_output, output);
}
Tensor & tanh_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & output) {
    if (grad_input.has_names() || grad_output.has_names() || output.has_names()) {
        AT_ERROR("tanh_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::tanh_backward_out(grad_input, grad_output, output);
}
Tensor & slow_conv_transpose2d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_out_cpu(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor slow_conv_transpose2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_cpu(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose2d_backward_out_grad_output(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones) {
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || columns.has_names() || ones.has_names()) {
        AT_ERROR("slow_conv_transpose2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose2d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & columns, const Tensor & ones, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || self.has_names() || weight.has_names() || columns.has_names() || ones.has_names()) {
        AT_ERROR("slow_conv_transpose2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, columns, ones, output_mask);
}
Tensor & slow_conv_transpose3d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_out_cpu(out, self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
Tensor slow_conv_transpose3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_transpose3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_cpu(self, weight, kernel_size, bias, stride, padding, output_padding, dilation);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv_transpose3d_backward_out_grad_output(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input) {
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("slow_conv_transpose3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_transpose3d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, IntArrayRef dilation, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("slow_conv_transpose3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_transpose3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, output_padding, dilation, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_forward_out_output(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (output.has_names() || finput.has_names() || fgrad_input.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d_forward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv2d_forward_out_cpu(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv2d_forward_cpu(self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> thnn_conv2d_backward_out_grad_input(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("thnn_conv2d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv2d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> thnn_conv2d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("thnn_conv2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_forward_out_output(Tensor & output, Tensor & finput, Tensor & fgrad_input, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (output.has_names() || finput.has_names() || fgrad_input.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv3d_forward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_forward_out_cpu(output, finput, fgrad_input, self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv3d_forward(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv3d_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_forward_cpu(self, weight, kernel_size, bias, stride, padding);
}
std::tuple<Tensor &,Tensor &,Tensor &> slow_conv3d_backward_out_grad_input(Tensor & grad_input, Tensor & grad_weight, Tensor & grad_bias, const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input) {
    if (grad_input.has_names() || grad_weight.has_names() || grad_bias.has_names() || grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("slow_conv3d_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_backward_out_cpu(grad_input, grad_weight, grad_bias, grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv3d_backward_output_mask(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, const Tensor & finput, const Tensor & fgrad_input, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || self.has_names() || weight.has_names() || finput.has_names() || fgrad_input.has_names()) {
        AT_ERROR("slow_conv3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, finput, fgrad_input, output_mask);
}
Tensor slow_conv_dilated2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_dilated2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated2d_cpu(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated2d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("slow_conv_dilated2d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated2d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor slow_conv_dilated3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv_dilated3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated3d_cpu(self, weight, kernel_size, bias, stride, padding, dilation);
}
std::tuple<Tensor,Tensor,Tensor> slow_conv_dilated3d_backward(const Tensor & grad_output, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || self.has_names() || weight.has_names()) {
        AT_ERROR("slow_conv_dilated3d_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv_dilated3d_backward_cpu(grad_output, self, weight, kernel_size, stride, padding, dilation, output_mask);
}
Tensor & col2im_out_out(Tensor & out, const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("col2im_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::col2im_out_cpu(out, self, output_size, kernel_size, dilation, padding, stride);
}
Tensor col2im(const Tensor & self, IntArrayRef output_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (self.has_names()) {
        AT_ERROR("col2im", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::col2im_cpu(self, output_size, kernel_size, dilation, padding, stride);
}
Tensor & col2im_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("col2im_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::col2im_backward_out_cpu(grad_input, grad_output, kernel_size, dilation, padding, stride);
}
Tensor col2im_backward(const Tensor & grad_output, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (grad_output.has_names()) {
        AT_ERROR("col2im_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::col2im_backward_cpu(grad_output, kernel_size, dilation, padding, stride);
}
Tensor & im2col_out_out(Tensor & out, const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("im2col_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::im2col_out_cpu(out, self, kernel_size, dilation, padding, stride);
}
Tensor im2col(const Tensor & self, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (self.has_names()) {
        AT_ERROR("im2col", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::im2col_cpu(self, kernel_size, dilation, padding, stride);
}
Tensor & im2col_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (grad_input.has_names() || grad_output.has_names()) {
        AT_ERROR("im2col_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_input));
    return at::native::im2col_backward_out_cpu(grad_input, grad_output, input_size, kernel_size, dilation, padding, stride);
}
Tensor im2col_backward(const Tensor & grad_output, IntArrayRef input_size, IntArrayRef kernel_size, IntArrayRef dilation, IntArrayRef padding, IntArrayRef stride) {
    if (grad_output.has_names()) {
        AT_ERROR("im2col_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::im2col_backward_cpu(grad_output, input_size, kernel_size, dilation, padding, stride);
}

}  // namespace CPUType

namespace {
auto registerer = torch::import()
  .impl("aten::add.Tensor",
        DispatchKey::CPUTensorId, &CPUType::add_Tensor)
  .impl_UNBOXED("aten::add_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::add__Tensor)
  .impl_UNBOXED("aten::add.out",
                DispatchKey::CPUTensorId,
                CPUType::add_out_out)
  .impl("aten::addmv",
        DispatchKey::CPUTensorId, &CPUType::addmv)
  .impl_UNBOXED("aten::addmv_",
                DispatchKey::CPUTensorId,
                CPUType::addmv_)
  .impl_UNBOXED("aten::addmv.out",
                DispatchKey::CPUTensorId,
                CPUType::addmv_out_out)
  .impl_UNBOXED("aten::arange.start_out",
                DispatchKey::CPUTensorId,
                CPUType::arange_out_start_out)
  .impl_UNBOXED("aten::argmax",
                DispatchKey::CPUTensorId,
                CPUType::argmax)
  .impl_UNBOXED("aten::argmin",
                DispatchKey::CPUTensorId,
                CPUType::argmin)
  .impl_UNBOXED("aten::as_strided",
                DispatchKey::CPUTensorId,
                CPUType::as_strided)
  .impl_UNBOXED("aten::atan_",
                DispatchKey::CPUTensorId,
                CPUType::atan_)
  .impl_UNBOXED("aten::atan.out",
                DispatchKey::CPUTensorId,
                CPUType::atan_out_out)
  .impl("aten::baddbmm",
        DispatchKey::CPUTensorId, &CPUType::baddbmm)
  .impl_UNBOXED("aten::baddbmm_",
                DispatchKey::CPUTensorId,
                CPUType::baddbmm_)
  .impl_UNBOXED("aten::baddbmm.out",
                DispatchKey::CPUTensorId,
                CPUType::baddbmm_out_out)
  .impl_UNBOXED("aten::bernoulli_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::bernoulli__Tensor)
  .impl_UNBOXED("aten::bernoulli_.float",
                DispatchKey::CPUTensorId,
                CPUType::bernoulli__float)
  .impl_UNBOXED("aten::binary_cross_entropy",
                DispatchKey::CPUTensorId,
                CPUType::binary_cross_entropy)
  .impl_UNBOXED("aten::binary_cross_entropy.out",
                DispatchKey::CPUTensorId,
                CPUType::binary_cross_entropy_out_out)
  .impl_UNBOXED("aten::binary_cross_entropy_backward",
                DispatchKey::CPUTensorId,
                CPUType::binary_cross_entropy_backward)
  .impl_UNBOXED("aten::binary_cross_entropy_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::binary_cross_entropy_backward_out_grad_input)
  .impl_UNBOXED("aten::bincount",
                DispatchKey::CPUTensorId,
                CPUType::bincount)
  .impl_UNBOXED("aten::bitwise_not.out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_not_out_out)
  .impl_UNBOXED("aten::logical_not.out",
                DispatchKey::CPUTensorId,
                CPUType::logical_not_out_out)
  .impl_UNBOXED("aten::logical_xor.out",
                DispatchKey::CPUTensorId,
                CPUType::logical_xor_out_out)
  .impl_UNBOXED("aten::logical_and.out",
                DispatchKey::CPUTensorId,
                CPUType::logical_and_out_out)
  .impl_UNBOXED("aten::logical_or.out",
                DispatchKey::CPUTensorId,
                CPUType::logical_or_out_out)
  .impl("aten::bmm",
        DispatchKey::CPUTensorId, &CPUType::bmm)
  .impl_UNBOXED("aten::bmm.out",
                DispatchKey::CPUTensorId,
                CPUType::bmm_out_out)
  .impl_UNBOXED("aten::ceil.out",
                DispatchKey::CPUTensorId,
                CPUType::ceil_out_out)
  .impl("aten::clamp",
        DispatchKey::CPUTensorId, &CPUType::clamp)
  .impl_UNBOXED("aten::clamp_",
                DispatchKey::CPUTensorId,
                CPUType::clamp_)
  .impl_UNBOXED("aten::clamp.out",
                DispatchKey::CPUTensorId,
                CPUType::clamp_out_out)
  .impl_UNBOXED("aten::clamp_max_",
                DispatchKey::CPUTensorId,
                CPUType::clamp_max_)
  .impl_UNBOXED("aten::clamp_max.out",
                DispatchKey::CPUTensorId,
                CPUType::clamp_max_out_out)
  .impl_UNBOXED("aten::clamp_min_",
                DispatchKey::CPUTensorId,
                CPUType::clamp_min_)
  .impl_UNBOXED("aten::clamp_min.out",
                DispatchKey::CPUTensorId,
                CPUType::clamp_min_out_out)
  .impl_UNBOXED("aten::cos_",
                DispatchKey::CPUTensorId,
                CPUType::cos_)
  .impl_UNBOXED("aten::cos.out",
                DispatchKey::CPUTensorId,
                CPUType::cos_out_out)
  .impl_UNBOXED("aten::cosh_",
                DispatchKey::CPUTensorId,
                CPUType::cosh_)
  .impl_UNBOXED("aten::cosh.out",
                DispatchKey::CPUTensorId,
                CPUType::cosh_out_out)
  .impl_UNBOXED("aten::_cummax_helper",
                DispatchKey::CPUTensorId,
                CPUType::_cummax_helper)
  .impl_UNBOXED("aten::_cummin_helper",
                DispatchKey::CPUTensorId,
                CPUType::_cummin_helper)
  .impl_UNBOXED("aten::_ctc_loss",
                DispatchKey::CPUTensorId,
                CPUType::_ctc_loss)
  .impl_UNBOXED("aten::_ctc_loss_backward",
                DispatchKey::CPUTensorId,
                CPUType::_ctc_loss_backward)
  .impl("aten::div.Tensor",
        DispatchKey::CPUTensorId, &CPUType::div_Tensor)
  .impl_UNBOXED("aten::div_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::div__Tensor)
  .impl_UNBOXED("aten::div.out",
                DispatchKey::CPUTensorId,
                CPUType::div_out_out)
  .impl("aten::dot",
        DispatchKey::CPUTensorId, &CPUType::dot)
  .impl("aten::embedding_dense_backward",
        DispatchKey::CPUTensorId, &CPUType::embedding_dense_backward)
  .impl_UNBOXED("aten::embedding_renorm_",
                DispatchKey::CPUTensorId,
                CPUType::embedding_renorm_)
  .impl_UNBOXED("aten::_embedding_bag",
                DispatchKey::CPUTensorId,
                CPUType::_embedding_bag)
  .impl_UNBOXED("aten::_embedding_bag_dense_backward",
                DispatchKey::CPUTensorId,
                CPUType::_embedding_bag_dense_backward)
  .impl("aten::_embedding_bag_per_sample_weights_backward",
        DispatchKey::CPUTensorId, &CPUType::_embedding_bag_per_sample_weights_backward)
  .impl_UNBOXED("aten::empty.memory_format",
                DispatchKey::CPUTensorId,
                CPUType::empty_memory_format)
  .impl_UNBOXED("aten::_empty_affine_quantized",
                DispatchKey::CPUTensorId,
                CPUType::_empty_affine_quantized)
  .impl_UNBOXED("aten::_empty_per_channel_affine_quantized",
                DispatchKey::CPUTensorId,
                CPUType::_empty_per_channel_affine_quantized)
  .impl_UNBOXED("aten::empty_strided",
                DispatchKey::CPUTensorId,
                CPUType::empty_strided)
  .impl_UNBOXED("aten::erf_",
                DispatchKey::CPUTensorId,
                CPUType::erf_)
  .impl_UNBOXED("aten::erf.out",
                DispatchKey::CPUTensorId,
                CPUType::erf_out_out)
  .impl_UNBOXED("aten::erfc_",
                DispatchKey::CPUTensorId,
                CPUType::erfc_)
  .impl_UNBOXED("aten::erfc.out",
                DispatchKey::CPUTensorId,
                CPUType::erfc_out_out)
  .impl_UNBOXED("aten::exp_",
                DispatchKey::CPUTensorId,
                CPUType::exp_)
  .impl_UNBOXED("aten::exp.out",
                DispatchKey::CPUTensorId,
                CPUType::exp_out_out)
  .impl_UNBOXED("aten::expm1.out",
                DispatchKey::CPUTensorId,
                CPUType::expm1_out_out)
  .impl_UNBOXED("aten::eye.out",
                DispatchKey::CPUTensorId,
                CPUType::eye_out_out)
  .impl_UNBOXED("aten::eye.m_out",
                DispatchKey::CPUTensorId,
                CPUType::eye_out_m_out)
  .impl_UNBOXED("aten::floor.out",
                DispatchKey::CPUTensorId,
                CPUType::floor_out_out)
  .impl_UNBOXED("aten::floor_divide",
                DispatchKey::CPUTensorId,
                CPUType::floor_divide)
  .impl_UNBOXED("aten::floor_divide_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::floor_divide__Tensor)
  .impl_UNBOXED("aten::floor_divide.out",
                DispatchKey::CPUTensorId,
                CPUType::floor_divide_out_out)
  .impl_UNBOXED("aten::from_file",
                DispatchKey::CPUTensorId,
                CPUType::from_file)
  .impl("aten::grid_sampler_2d",
        DispatchKey::CPUTensorId, &CPUType::grid_sampler_2d)
  .impl_UNBOXED("aten::grid_sampler_2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::grid_sampler_2d_backward)
  .impl("aten::grid_sampler_3d",
        DispatchKey::CPUTensorId, &CPUType::grid_sampler_3d)
  .impl_UNBOXED("aten::grid_sampler_3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::grid_sampler_3d_backward)
  .impl_UNBOXED("aten::_fft_with_size",
                DispatchKey::CPUTensorId,
                CPUType::_fft_with_size)
  .impl("aten::_inverse_helper",
        DispatchKey::CPUTensorId, &CPUType::_inverse_helper)
  .impl("aten::isnan",
        DispatchKey::CPUTensorId, &CPUType::isnan)
  .impl("aten::kl_div_backward",
        DispatchKey::CPUTensorId, &CPUType::kl_div_backward)
  .impl_UNBOXED("aten::kthvalue.values",
                DispatchKey::CPUTensorId,
                CPUType::kthvalue_out_values)
  .impl_UNBOXED("aten::native_layer_norm",
                DispatchKey::CPUTensorId,
                CPUType::native_layer_norm)
  .impl_UNBOXED("aten::native_layer_norm_backward",
                DispatchKey::CPUTensorId,
                CPUType::native_layer_norm_backward)
  .impl_UNBOXED("aten::linspace.out",
                DispatchKey::CPUTensorId,
                CPUType::linspace_out_out)
  .impl_UNBOXED("aten::log.out",
                DispatchKey::CPUTensorId,
                CPUType::log_out_out)
  .impl_UNBOXED("aten::log10.out",
                DispatchKey::CPUTensorId,
                CPUType::log10_out_out)
  .impl_UNBOXED("aten::log1p_",
                DispatchKey::CPUTensorId,
                CPUType::log1p_)
  .impl_UNBOXED("aten::log1p.out",
                DispatchKey::CPUTensorId,
                CPUType::log1p_out_out)
  .impl_UNBOXED("aten::log2.out",
                DispatchKey::CPUTensorId,
                CPUType::log2_out_out)
  .impl_UNBOXED("aten::logspace.out",
                DispatchKey::CPUTensorId,
                CPUType::logspace_out_out)
  .impl("aten::_log_softmax",
        DispatchKey::CPUTensorId, &CPUType::_log_softmax)
  .impl("aten::_log_softmax_backward_data",
        DispatchKey::CPUTensorId, &CPUType::_log_softmax_backward_data)
  .impl_UNBOXED("aten::mean",
                DispatchKey::CPUTensorId,
                CPUType::mean)
  .impl_UNBOXED("aten::mean.dim",
                DispatchKey::CPUTensorId,
                CPUType::mean_dim)
  .impl_UNBOXED("aten::mean.out",
                DispatchKey::CPUTensorId,
                CPUType::mean_out_out)
  .impl("aten::mm",
        DispatchKey::CPUTensorId, &CPUType::mm)
  .impl_UNBOXED("aten::mm.out",
                DispatchKey::CPUTensorId,
                CPUType::mm_out_out)
  .impl("aten::mul.Tensor",
        DispatchKey::CPUTensorId, &CPUType::mul_Tensor)
  .impl_UNBOXED("aten::mul_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::mul__Tensor)
  .impl_UNBOXED("aten::mul.out",
                DispatchKey::CPUTensorId,
                CPUType::mul_out_out)
  .impl("aten::mv",
        DispatchKey::CPUTensorId, &CPUType::mv)
  .impl_UNBOXED("aten::mv.out",
                DispatchKey::CPUTensorId,
                CPUType::mv_out_out)
  .impl("aten::narrow_copy",
        DispatchKey::CPUTensorId, &CPUType::narrow_copy)
  .impl_UNBOXED("aten::native_batch_norm",
                DispatchKey::CPUTensorId,
                CPUType::native_batch_norm)
  .impl_UNBOXED("aten::native_batch_norm_backward",
                DispatchKey::CPUTensorId,
                CPUType::native_batch_norm_backward)
  .impl_UNBOXED("aten::batch_norm_update_stats",
                DispatchKey::CPUTensorId,
                CPUType::batch_norm_update_stats)
  .impl_UNBOXED("aten::randperm.generator_out",
                DispatchKey::CPUTensorId,
                CPUType::randperm_out_generator_out)
  .impl_UNBOXED("aten::range.out",
                DispatchKey::CPUTensorId,
                CPUType::range_out_out)
  .impl_UNBOXED("aten::neg.out",
                DispatchKey::CPUTensorId,
                CPUType::neg_out_out)
  .impl("aten::repeat_interleave.Tensor",
        DispatchKey::CPUTensorId, &CPUType::repeat_interleave_Tensor)
  .impl_UNBOXED("aten::round.out",
                DispatchKey::CPUTensorId,
                CPUType::round_out_out)
  .impl("aten::relu",
        DispatchKey::CPUTensorId, &CPUType::relu)
  .impl_UNBOXED("aten::relu_",
                DispatchKey::CPUTensorId,
                CPUType::relu_)
  .impl("aten::prelu",
        DispatchKey::CPUTensorId, &CPUType::prelu)
  .impl_UNBOXED("aten::prelu_backward",
                DispatchKey::CPUTensorId,
                CPUType::prelu_backward)
  .impl("aten::gelu",
        DispatchKey::CPUTensorId, &CPUType::gelu)
  .impl("aten::gelu_backward",
        DispatchKey::CPUTensorId, &CPUType::gelu_backward)
  .impl_UNBOXED("aten::rsqrt.out",
                DispatchKey::CPUTensorId,
                CPUType::rsqrt_out_out)
  .impl("aten::sigmoid",
        DispatchKey::CPUTensorId, &CPUType::sigmoid)
  .impl_UNBOXED("aten::sigmoid_",
                DispatchKey::CPUTensorId,
                CPUType::sigmoid_)
  .impl_UNBOXED("aten::sin.out",
                DispatchKey::CPUTensorId,
                CPUType::sin_out_out)
  .impl("aten::_softmax",
        DispatchKey::CPUTensorId, &CPUType::_softmax)
  .impl("aten::_softmax_backward_data",
        DispatchKey::CPUTensorId, &CPUType::_softmax_backward_data)
  .impl_UNBOXED("aten::sspaddmm.out",
                DispatchKey::CPUTensorId,
                CPUType::sspaddmm_out_out)
  .impl_UNBOXED("aten::tan_",
                DispatchKey::CPUTensorId,
                CPUType::tan_)
  .impl_UNBOXED("aten::tan.out",
                DispatchKey::CPUTensorId,
                CPUType::tan_out_out)
  .impl("aten::tanh",
        DispatchKey::CPUTensorId, &CPUType::tanh)
  .impl_UNBOXED("aten::tanh_",
                DispatchKey::CPUTensorId,
                CPUType::tanh_)
  .impl_UNBOXED("aten::tanh.out",
                DispatchKey::CPUTensorId,
                CPUType::tanh_out_out)
  .impl("aten::threshold",
        DispatchKey::CPUTensorId, &CPUType::threshold)
  .impl_UNBOXED("aten::threshold_",
                DispatchKey::CPUTensorId,
                CPUType::threshold_)
  .impl_UNBOXED("aten::threshold.out",
                DispatchKey::CPUTensorId,
                CPUType::threshold_out_out)
  .impl("aten::threshold_backward",
        DispatchKey::CPUTensorId, &CPUType::threshold_backward)
  .impl_UNBOXED("aten::flip",
                DispatchKey::CPUTensorId,
                CPUType::flip)
  .impl_UNBOXED("aten::roll",
                DispatchKey::CPUTensorId,
                CPUType::roll)
  .impl("aten::true_divide.Tensor",
        DispatchKey::CPUTensorId, &CPUType::true_divide_Tensor)
  .impl_UNBOXED("aten::true_divide_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::true_divide__Tensor)
  .impl_UNBOXED("aten::true_divide.out",
                DispatchKey::CPUTensorId,
                CPUType::true_divide_out_out)
  .impl_UNBOXED("aten::trunc.out",
                DispatchKey::CPUTensorId,
                CPUType::trunc_out_out)
  .impl_UNBOXED("aten::_unique",
                DispatchKey::CPUTensorId,
                CPUType::_unique)
  .impl_UNBOXED("aten::unique_dim",
                DispatchKey::CPUTensorId,
                CPUType::unique_dim)
  .impl_UNBOXED("aten::unique_consecutive",
                DispatchKey::CPUTensorId,
                CPUType::unique_consecutive)
  .impl_UNBOXED("aten::unique_dim_consecutive",
                DispatchKey::CPUTensorId,
                CPUType::unique_dim_consecutive)
  .impl_UNBOXED("aten::_unique2",
                DispatchKey::CPUTensorId,
                CPUType::_unique2)
  .impl("aten::_standard_gamma_grad",
        DispatchKey::CPUTensorId, &CPUType::_standard_gamma_grad)
  .impl_UNBOXED("aten::_standard_gamma",
                DispatchKey::CPUTensorId,
                CPUType::_standard_gamma)
  .impl("aten::_dirichlet_grad",
        DispatchKey::CPUTensorId, &CPUType::_dirichlet_grad)
  .impl_UNBOXED("aten::_sample_dirichlet",
                DispatchKey::CPUTensorId,
                CPUType::_sample_dirichlet)
  .impl_UNBOXED("aten::poisson",
                DispatchKey::CPUTensorId,
                CPUType::poisson)
  .impl_UNBOXED("aten::clone",
                DispatchKey::CPUTensorId,
                CPUType::clone)
  .impl_UNBOXED("aten::pow.Tensor_Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::pow_out_Tensor_Scalar_out)
  .impl("aten::pow.Tensor_Scalar",
        DispatchKey::CPUTensorId, &CPUType::pow_Tensor_Scalar)
  .impl_UNBOXED("aten::zero_",
                DispatchKey::CPUTensorId,
                CPUType::zero_)
  .impl_UNBOXED("aten::sub.out",
                DispatchKey::CPUTensorId,
                CPUType::sub_out_out)
  .impl("aten::sub.Tensor",
        DispatchKey::CPUTensorId, &CPUType::sub_Tensor)
  .impl_UNBOXED("aten::sub_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::sub__Tensor)
  .impl_UNBOXED("aten::addmm.out",
                DispatchKey::CPUTensorId,
                CPUType::addmm_out_out)
  .impl("aten::addmm",
        DispatchKey::CPUTensorId, &CPUType::addmm)
  .impl_UNBOXED("aten::addmm_",
                DispatchKey::CPUTensorId,
                CPUType::addmm_)
  .impl("aten::to_sparse.sparse_dim",
        DispatchKey::CPUTensorId, &CPUType::to_sparse_sparse_dim)
  .impl("aten::to_sparse",
        DispatchKey::CPUTensorId, &CPUType::to_sparse)
  .impl("aten::to_mkldnn",
        DispatchKey::CPUTensorId, &CPUType::to_mkldnn)
  .impl_UNBOXED("aten::quantize_per_tensor",
                DispatchKey::CPUTensorId,
                CPUType::quantize_per_tensor)
  .impl_UNBOXED("aten::quantize_per_tensor.tensors",
                DispatchKey::CPUTensorId,
                CPUType::quantize_per_tensor_tensors)
  .impl_UNBOXED("aten::quantize_per_channel",
                DispatchKey::CPUTensorId,
                CPUType::quantize_per_channel)
  .impl("aten::_make_per_tensor_quantized_tensor",
        DispatchKey::CPUTensorId, &CPUType::_make_per_tensor_quantized_tensor)
  .impl_UNBOXED("aten::_make_per_channel_quantized_tensor",
                DispatchKey::CPUTensorId,
                CPUType::_make_per_channel_quantized_tensor)
  .impl("aten::_local_scalar_dense",
        DispatchKey::CPUTensorId, &CPUType::_local_scalar_dense)
  .impl_UNBOXED("aten::set_.source_Storage",
                DispatchKey::CPUTensorId,
                CPUType::set__source_Storage)
  .impl_UNBOXED("aten::set_.source_Storage_storage_offset",
                DispatchKey::CPUTensorId,
                CPUType::set__source_Storage_storage_offset)
  .impl_UNBOXED("aten::set_.source_Tensor",
                DispatchKey::CPUTensorId,
                CPUType::set__source_Tensor)
  .impl_UNBOXED("aten::set_",
                DispatchKey::CPUTensorId,
                CPUType::set_)
  .impl("aten::is_set_to",
        DispatchKey::CPUTensorId, &CPUType::is_set_to)
  .impl_UNBOXED("aten::masked_fill_.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::masked_fill__Scalar)
  .impl_UNBOXED("aten::masked_fill_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::masked_fill__Tensor)
  .impl_UNBOXED("aten::masked_scatter_",
                DispatchKey::CPUTensorId,
                CPUType::masked_scatter_)
  .impl_UNBOXED("aten::view",
                DispatchKey::CPUTensorId,
                CPUType::view)
  .impl_UNBOXED("aten::put_",
                DispatchKey::CPUTensorId,
                CPUType::put_)
  .impl_UNBOXED("aten::index_add_",
                DispatchKey::CPUTensorId,
                CPUType::index_add_)
  .impl_UNBOXED("aten::index_fill_.int_Scalar",
                DispatchKey::CPUTensorId,
                CPUType::index_fill__int_Scalar)
  .impl_UNBOXED("aten::index_fill_.int_Tensor",
                DispatchKey::CPUTensorId,
                CPUType::index_fill__int_Tensor)
  .impl_UNBOXED("aten::scatter_.src",
                DispatchKey::CPUTensorId,
                CPUType::scatter__src)
  .impl_UNBOXED("aten::scatter_.value",
                DispatchKey::CPUTensorId,
                CPUType::scatter__value)
  .impl_UNBOXED("aten::scatter_add_",
                DispatchKey::CPUTensorId,
                CPUType::scatter_add_)
  .impl_UNBOXED("aten::bitwise_and.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_and_out_Tensor_out)
  .impl_UNBOXED("aten::bitwise_and.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_and_out_Scalar_out)
  .impl_UNBOXED("aten::bitwise_or.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_or_out_Tensor_out)
  .impl_UNBOXED("aten::bitwise_or.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_or_out_Scalar_out)
  .impl_UNBOXED("aten::bitwise_xor.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_xor_out_Tensor_out)
  .impl_UNBOXED("aten::bitwise_xor.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::bitwise_xor_out_Scalar_out)
  .impl("aten::__lshift__.Scalar",
        DispatchKey::CPUTensorId, &CPUType::__lshift___Scalar)
  .impl("aten::__lshift__.Tensor",
        DispatchKey::CPUTensorId, &CPUType::__lshift___Tensor)
  .impl_UNBOXED("aten::__ilshift__.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::__ilshift___Scalar)
  .impl_UNBOXED("aten::__ilshift__.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::__ilshift___Tensor)
  .impl("aten::__rshift__.Scalar",
        DispatchKey::CPUTensorId, &CPUType::__rshift___Scalar)
  .impl("aten::__rshift__.Tensor",
        DispatchKey::CPUTensorId, &CPUType::__rshift___Tensor)
  .impl_UNBOXED("aten::__irshift__.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::__irshift___Scalar)
  .impl_UNBOXED("aten::__irshift__.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::__irshift___Tensor)
  .impl_UNBOXED("aten::lgamma_",
                DispatchKey::CPUTensorId,
                CPUType::lgamma_)
  .impl_UNBOXED("aten::tril_",
                DispatchKey::CPUTensorId,
                CPUType::tril_)
  .impl_UNBOXED("aten::triu_",
                DispatchKey::CPUTensorId,
                CPUType::triu_)
  .impl_UNBOXED("aten::renorm_",
                DispatchKey::CPUTensorId,
                CPUType::renorm_)
  .impl_UNBOXED("aten::pow_.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::pow__Scalar)
  .impl_UNBOXED("aten::pow_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::pow__Tensor)
  .impl_UNBOXED("aten::lerp_.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::lerp__Scalar)
  .impl_UNBOXED("aten::lerp_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::lerp__Tensor)
  .impl_UNBOXED("aten::fmod_.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::fmod__Scalar)
  .impl_UNBOXED("aten::fmod_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::fmod__Tensor)
  .impl_UNBOXED("aten::remainder_.Scalar",
                DispatchKey::CPUTensorId,
                CPUType::remainder__Scalar)
  .impl_UNBOXED("aten::remainder_.Tensor",
                DispatchKey::CPUTensorId,
                CPUType::remainder__Tensor)
  .impl_UNBOXED("aten::addbmm_",
                DispatchKey::CPUTensorId,
                CPUType::addbmm_)
  .impl_UNBOXED("aten::addbmm.out",
                DispatchKey::CPUTensorId,
                CPUType::addbmm_out_out)
  .impl("aten::addbmm",
        DispatchKey::CPUTensorId, &CPUType::addbmm)
  .impl_UNBOXED("aten::diag.out",
                DispatchKey::CPUTensorId,
                CPUType::diag_out_out)
  .impl("aten::diag",
        DispatchKey::CPUTensorId, &CPUType::diag)
  .impl_UNBOXED("aten::triu.out",
                DispatchKey::CPUTensorId,
                CPUType::triu_out_out)
  .impl_UNBOXED("aten::tril.out",
                DispatchKey::CPUTensorId,
                CPUType::tril_out_out)
  .impl_UNBOXED("aten::tril_indices",
                DispatchKey::CPUTensorId,
                CPUType::tril_indices)
  .impl_UNBOXED("aten::triu_indices",
                DispatchKey::CPUTensorId,
                CPUType::triu_indices)
  .impl("aten::trace",
        DispatchKey::CPUTensorId, &CPUType::trace)
  .impl_UNBOXED("aten::ne.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::ne_out_Scalar_out)
  .impl("aten::ne.Scalar",
        DispatchKey::CPUTensorId, &CPUType::ne_Scalar)
  .impl_UNBOXED("aten::ne.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::ne_out_Tensor_out)
  .impl("aten::ne.Tensor",
        DispatchKey::CPUTensorId, &CPUType::ne_Tensor)
  .impl_UNBOXED("aten::eq.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::eq_out_Scalar_out)
  .impl("aten::eq.Scalar",
        DispatchKey::CPUTensorId, &CPUType::eq_Scalar)
  .impl_UNBOXED("aten::eq.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::eq_out_Tensor_out)
  .impl("aten::eq.Tensor",
        DispatchKey::CPUTensorId, &CPUType::eq_Tensor)
  .impl_UNBOXED("aten::ge.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::ge_out_Scalar_out)
  .impl("aten::ge.Scalar",
        DispatchKey::CPUTensorId, &CPUType::ge_Scalar)
  .impl_UNBOXED("aten::ge.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::ge_out_Tensor_out)
  .impl("aten::ge.Tensor",
        DispatchKey::CPUTensorId, &CPUType::ge_Tensor)
  .impl_UNBOXED("aten::le.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::le_out_Scalar_out)
  .impl("aten::le.Scalar",
        DispatchKey::CPUTensorId, &CPUType::le_Scalar)
  .impl_UNBOXED("aten::le.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::le_out_Tensor_out)
  .impl("aten::le.Tensor",
        DispatchKey::CPUTensorId, &CPUType::le_Tensor)
  .impl_UNBOXED("aten::gt.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::gt_out_Scalar_out)
  .impl("aten::gt.Scalar",
        DispatchKey::CPUTensorId, &CPUType::gt_Scalar)
  .impl_UNBOXED("aten::gt.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::gt_out_Tensor_out)
  .impl("aten::gt.Tensor",
        DispatchKey::CPUTensorId, &CPUType::gt_Tensor)
  .impl_UNBOXED("aten::lt.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::lt_out_Scalar_out)
  .impl("aten::lt.Scalar",
        DispatchKey::CPUTensorId, &CPUType::lt_Scalar)
  .impl_UNBOXED("aten::lt.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::lt_out_Tensor_out)
  .impl("aten::lt.Tensor",
        DispatchKey::CPUTensorId, &CPUType::lt_Tensor)
  .impl_UNBOXED("aten::take.out",
                DispatchKey::CPUTensorId,
                CPUType::take_out_out)
  .impl("aten::take",
        DispatchKey::CPUTensorId, &CPUType::take)
  .impl_UNBOXED("aten::index_select.out",
                DispatchKey::CPUTensorId,
                CPUType::index_select_out_out)
  .impl("aten::index_select",
        DispatchKey::CPUTensorId, &CPUType::index_select)
  .impl_UNBOXED("aten::masked_select.out",
                DispatchKey::CPUTensorId,
                CPUType::masked_select_out_out)
  .impl("aten::masked_select",
        DispatchKey::CPUTensorId, &CPUType::masked_select)
  .impl_UNBOXED("aten::nonzero.out",
                DispatchKey::CPUTensorId,
                CPUType::nonzero_out_out)
  .impl("aten::nonzero",
        DispatchKey::CPUTensorId, &CPUType::nonzero)
  .impl_UNBOXED("aten::gather.out",
                DispatchKey::CPUTensorId,
                CPUType::gather_out_out)
  .impl("aten::gather",
        DispatchKey::CPUTensorId, &CPUType::gather)
  .impl_UNBOXED("aten::lstsq.X",
                DispatchKey::CPUTensorId,
                CPUType::lstsq_out_X)
  .impl_UNBOXED("aten::lstsq",
                DispatchKey::CPUTensorId,
                CPUType::lstsq)
  .impl_UNBOXED("aten::_triangular_solve_helper",
                DispatchKey::CPUTensorId,
                CPUType::_triangular_solve_helper)
  .impl_UNBOXED("aten::_symeig_helper",
                DispatchKey::CPUTensorId,
                CPUType::_symeig_helper)
  .impl_UNBOXED("aten::eig.e",
                DispatchKey::CPUTensorId,
                CPUType::eig_out_e)
  .impl_UNBOXED("aten::eig",
                DispatchKey::CPUTensorId,
                CPUType::eig)
  .impl_UNBOXED("aten::_svd_helper",
                DispatchKey::CPUTensorId,
                CPUType::_svd_helper)
  .impl("aten::_cholesky_helper",
        DispatchKey::CPUTensorId, &CPUType::_cholesky_helper)
  .impl("aten::_cholesky_solve_helper",
        DispatchKey::CPUTensorId, &CPUType::_cholesky_solve_helper)
  .impl_UNBOXED("aten::_solve_helper",
                DispatchKey::CPUTensorId,
                CPUType::_solve_helper)
  .impl_UNBOXED("aten::cholesky_inverse.out",
                DispatchKey::CPUTensorId,
                CPUType::cholesky_inverse_out_out)
  .impl("aten::cholesky_inverse",
        DispatchKey::CPUTensorId, &CPUType::cholesky_inverse)
  .impl_UNBOXED("aten::_qr_helper",
                DispatchKey::CPUTensorId,
                CPUType::_qr_helper)
  .impl_UNBOXED("aten::geqrf.a",
                DispatchKey::CPUTensorId,
                CPUType::geqrf_out_a)
  .impl_UNBOXED("aten::geqrf",
                DispatchKey::CPUTensorId,
                CPUType::geqrf)
  .impl_UNBOXED("aten::orgqr.out",
                DispatchKey::CPUTensorId,
                CPUType::orgqr_out_out)
  .impl("aten::orgqr",
        DispatchKey::CPUTensorId, &CPUType::orgqr)
  .impl_UNBOXED("aten::ormqr.out",
                DispatchKey::CPUTensorId,
                CPUType::ormqr_out_out)
  .impl("aten::ormqr",
        DispatchKey::CPUTensorId, &CPUType::ormqr)
  .impl_UNBOXED("aten::_lu_with_info",
                DispatchKey::CPUTensorId,
                CPUType::_lu_with_info)
  .impl("aten::_lu_solve_helper",
        DispatchKey::CPUTensorId, &CPUType::_lu_solve_helper)
  .impl_UNBOXED("aten::multinomial.out",
                DispatchKey::CPUTensorId,
                CPUType::multinomial_out_out)
  .impl_UNBOXED("aten::multinomial",
                DispatchKey::CPUTensorId,
                CPUType::multinomial)
  .impl_UNBOXED("aten::_multinomial_alias_setup",
                DispatchKey::CPUTensorId,
                CPUType::_multinomial_alias_setup)
  .impl_UNBOXED("aten::_multinomial_alias_draw",
                DispatchKey::CPUTensorId,
                CPUType::_multinomial_alias_draw)
  .impl_UNBOXED("aten::lgamma.out",
                DispatchKey::CPUTensorId,
                CPUType::lgamma_out_out)
  .impl("aten::lgamma",
        DispatchKey::CPUTensorId, &CPUType::lgamma)
  .impl("aten::erfinv",
        DispatchKey::CPUTensorId, &CPUType::erfinv)
  .impl_UNBOXED("aten::erfinv_",
                DispatchKey::CPUTensorId,
                CPUType::erfinv_)
  .impl_UNBOXED("aten::erfinv.out",
                DispatchKey::CPUTensorId,
                CPUType::erfinv_out_out)
  .impl_UNBOXED("aten::sign.out",
                DispatchKey::CPUTensorId,
                CPUType::sign_out_out)
  .impl_UNBOXED("aten::lerp.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::lerp_out_Scalar_out)
  .impl_UNBOXED("aten::lerp.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::lerp_out_Tensor_out)
  .impl("aten::lerp.Scalar",
        DispatchKey::CPUTensorId, &CPUType::lerp_Scalar)
  .impl("aten::lerp.Tensor",
        DispatchKey::CPUTensorId, &CPUType::lerp_Tensor)
  .impl_UNBOXED("aten::histc.out",
                DispatchKey::CPUTensorId,
                CPUType::histc_out_out)
  .impl("aten::histc",
        DispatchKey::CPUTensorId, &CPUType::histc)
  .impl_UNBOXED("aten::fmod.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::fmod_out_Scalar_out)
  .impl("aten::fmod.Scalar",
        DispatchKey::CPUTensorId, &CPUType::fmod_Scalar)
  .impl_UNBOXED("aten::fmod.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::fmod_out_Tensor_out)
  .impl("aten::fmod.Tensor",
        DispatchKey::CPUTensorId, &CPUType::fmod_Tensor)
  .impl_UNBOXED("aten::remainder.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::remainder_out_Scalar_out)
  .impl("aten::remainder.Scalar",
        DispatchKey::CPUTensorId, &CPUType::remainder_Scalar)
  .impl_UNBOXED("aten::remainder.Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::remainder_out_Tensor_out)
  .impl("aten::remainder.Tensor",
        DispatchKey::CPUTensorId, &CPUType::remainder_Tensor)
  .impl("aten::min",
        DispatchKey::CPUTensorId, &CPUType::min)
  .impl("aten::max",
        DispatchKey::CPUTensorId, &CPUType::max)
  .impl("aten::median",
        DispatchKey::CPUTensorId, &CPUType::median)
  .impl_UNBOXED("aten::sort.values",
                DispatchKey::CPUTensorId,
                CPUType::sort_out_values)
  .impl_UNBOXED("aten::sort",
                DispatchKey::CPUTensorId,
                CPUType::sort)
  .impl_UNBOXED("aten::topk.values",
                DispatchKey::CPUTensorId,
                CPUType::topk_out_values)
  .impl_UNBOXED("aten::topk",
                DispatchKey::CPUTensorId,
                CPUType::topk)
  .impl("aten::any",
        DispatchKey::CPUTensorId, &CPUType::any)
  .impl_UNBOXED("aten::renorm.out",
                DispatchKey::CPUTensorId,
                CPUType::renorm_out_out)
  .impl("aten::renorm",
        DispatchKey::CPUTensorId, &CPUType::renorm)
  .impl_UNBOXED("aten::unfold",
                DispatchKey::CPUTensorId,
                CPUType::unfold)
  .impl("aten::equal",
        DispatchKey::CPUTensorId, &CPUType::equal)
  .impl_UNBOXED("aten::pow.Tensor_Tensor_out",
                DispatchKey::CPUTensorId,
                CPUType::pow_out_Tensor_Tensor_out)
  .impl("aten::pow.Tensor_Tensor",
        DispatchKey::CPUTensorId, &CPUType::pow_Tensor_Tensor)
  .impl_UNBOXED("aten::pow.Scalar_out",
                DispatchKey::CPUTensorId,
                CPUType::pow_out_Scalar_out)
  .impl("aten::pow.Scalar",
        DispatchKey::CPUTensorId, &CPUType::pow_Scalar)
  .impl("aten::_addr",
        DispatchKey::CPUTensorId, &CPUType::_addr)
  .impl_UNBOXED("aten::_addr_",
                DispatchKey::CPUTensorId,
                CPUType::_addr_)
  .impl_UNBOXED("aten::_addr.out",
                DispatchKey::CPUTensorId,
                CPUType::_addr_out_out)
  .impl_UNBOXED("aten::_index_copy_",
                DispatchKey::CPUTensorId,
                CPUType::_index_copy_)
  .impl("aten::_cumsum",
        DispatchKey::CPUTensorId, &CPUType::_cumsum)
  .impl_UNBOXED("aten::_cumsum.out",
                DispatchKey::CPUTensorId,
                CPUType::_cumsum_out_out)
  .impl("aten::_cumprod",
        DispatchKey::CPUTensorId, &CPUType::_cumprod)
  .impl_UNBOXED("aten::_cumprod.out",
                DispatchKey::CPUTensorId,
                CPUType::_cumprod_out_out)
  .impl("aten::_var",
        DispatchKey::CPUTensorId, &CPUType::_var)
  .impl("aten::_std",
        DispatchKey::CPUTensorId, &CPUType::_std)
  .impl_UNBOXED("aten::_cat",
                DispatchKey::CPUTensorId,
                CPUType::_cat)
  .impl_UNBOXED("aten::_cat.out",
                DispatchKey::CPUTensorId,
                CPUType::_cat_out_out)
  .impl_UNBOXED("aten::_mode",
                DispatchKey::CPUTensorId,
                CPUType::_mode)
  .impl_UNBOXED("aten::_mode.values",
                DispatchKey::CPUTensorId,
                CPUType::_mode_out_values)
  .impl_UNBOXED("aten::_max",
                DispatchKey::CPUTensorId,
                CPUType::_max)
  .impl_UNBOXED("aten::_max.max",
                DispatchKey::CPUTensorId,
                CPUType::_max_out_max)
  .impl_UNBOXED("aten::_min",
                DispatchKey::CPUTensorId,
                CPUType::_min)
  .impl_UNBOXED("aten::_min.min",
                DispatchKey::CPUTensorId,
                CPUType::_min_out_min)
  .impl_UNBOXED("aten::mse_loss_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::mse_loss_backward_out_grad_input)
  .impl("aten::mse_loss_backward",
        DispatchKey::CPUTensorId, &CPUType::mse_loss_backward)
  .impl_UNBOXED("aten::l1_loss_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::l1_loss_backward_out_grad_input)
  .impl_UNBOXED("aten::multi_margin_loss.out",
                DispatchKey::CPUTensorId,
                CPUType::multi_margin_loss_out_out)
  .impl_UNBOXED("aten::multi_margin_loss",
                DispatchKey::CPUTensorId,
                CPUType::multi_margin_loss)
  .impl_UNBOXED("aten::multi_margin_loss_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::multi_margin_loss_backward_out_grad_input)
  .impl_UNBOXED("aten::multi_margin_loss_backward",
                DispatchKey::CPUTensorId,
                CPUType::multi_margin_loss_backward)
  .impl_UNBOXED("aten::multilabel_margin_loss_forward.output",
                DispatchKey::CPUTensorId,
                CPUType::multilabel_margin_loss_forward_out_output)
  .impl_UNBOXED("aten::multilabel_margin_loss_forward",
                DispatchKey::CPUTensorId,
                CPUType::multilabel_margin_loss_forward)
  .impl_UNBOXED("aten::multilabel_margin_loss_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::multilabel_margin_loss_backward_out_grad_input)
  .impl("aten::multilabel_margin_loss_backward",
        DispatchKey::CPUTensorId, &CPUType::multilabel_margin_loss_backward)
  .impl_UNBOXED("aten::nll_loss_forward.output",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss_forward_out_output)
  .impl_UNBOXED("aten::nll_loss_forward",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss_forward)
  .impl_UNBOXED("aten::nll_loss_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss_backward_out_grad_input)
  .impl_UNBOXED("aten::nll_loss_backward",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss_backward)
  .impl_UNBOXED("aten::nll_loss2d_forward.output",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss2d_forward_out_output)
  .impl_UNBOXED("aten::nll_loss2d_forward",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss2d_forward)
  .impl_UNBOXED("aten::nll_loss2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss2d_backward_out_grad_input)
  .impl_UNBOXED("aten::nll_loss2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::nll_loss2d_backward)
  .impl_UNBOXED("aten::smooth_l1_loss.out",
                DispatchKey::CPUTensorId,
                CPUType::smooth_l1_loss_out_out)
  .impl_UNBOXED("aten::smooth_l1_loss_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::smooth_l1_loss_backward_out_grad_input)
  .impl_UNBOXED("aten::elu.out",
                DispatchKey::CPUTensorId,
                CPUType::elu_out_out)
  .impl("aten::elu",
        DispatchKey::CPUTensorId, &CPUType::elu)
  .impl_UNBOXED("aten::elu_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::elu_backward_out_grad_input)
  .impl_UNBOXED("aten::elu_",
                DispatchKey::CPUTensorId,
                CPUType::elu_)
  .impl_UNBOXED("aten::glu.out",
                DispatchKey::CPUTensorId,
                CPUType::glu_out_out)
  .impl("aten::glu",
        DispatchKey::CPUTensorId, &CPUType::glu)
  .impl_UNBOXED("aten::glu_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::glu_backward_out_grad_input)
  .impl("aten::glu_backward",
        DispatchKey::CPUTensorId, &CPUType::glu_backward)
  .impl("aten::hardsigmoid",
        DispatchKey::CPUTensorId, &CPUType::hardsigmoid)
  .impl_UNBOXED("aten::hardtanh.out",
                DispatchKey::CPUTensorId,
                CPUType::hardtanh_out_out)
  .impl("aten::hardtanh",
        DispatchKey::CPUTensorId, &CPUType::hardtanh)
  .impl_UNBOXED("aten::hardtanh_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::hardtanh_backward_out_grad_input)
  .impl_UNBOXED("aten::hardtanh_",
                DispatchKey::CPUTensorId,
                CPUType::hardtanh_)
  .impl("aten::hardswish",
        DispatchKey::CPUTensorId, &CPUType::hardswish)
  .impl_UNBOXED("aten::hardswish_",
                DispatchKey::CPUTensorId,
                CPUType::hardswish_)
  .impl_UNBOXED("aten::leaky_relu.out",
                DispatchKey::CPUTensorId,
                CPUType::leaky_relu_out_out)
  .impl("aten::leaky_relu",
        DispatchKey::CPUTensorId, &CPUType::leaky_relu)
  .impl_UNBOXED("aten::leaky_relu_",
                DispatchKey::CPUTensorId,
                CPUType::leaky_relu_)
  .impl_UNBOXED("aten::log_sigmoid_forward.output",
                DispatchKey::CPUTensorId,
                CPUType::log_sigmoid_forward_out_output)
  .impl_UNBOXED("aten::log_sigmoid_forward",
                DispatchKey::CPUTensorId,
                CPUType::log_sigmoid_forward)
  .impl_UNBOXED("aten::log_sigmoid_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::log_sigmoid_backward_out_grad_input)
  .impl("aten::log_sigmoid_backward",
        DispatchKey::CPUTensorId, &CPUType::log_sigmoid_backward)
  .impl_UNBOXED("aten::rrelu_with_noise.out",
                DispatchKey::CPUTensorId,
                CPUType::rrelu_with_noise_out_out)
  .impl_UNBOXED("aten::rrelu_with_noise",
                DispatchKey::CPUTensorId,
                CPUType::rrelu_with_noise)
  .impl_UNBOXED("aten::rrelu_with_noise_",
                DispatchKey::CPUTensorId,
                CPUType::rrelu_with_noise_)
  .impl_UNBOXED("aten::softplus_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::softplus_backward_out_grad_input)
  .impl_UNBOXED("aten::softshrink_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::softshrink_backward_out_grad_input)
  .impl_UNBOXED("aten::adaptive_avg_pool2d.out",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_avg_pool2d_out_out)
  .impl_UNBOXED("aten::_adaptive_avg_pool2d",
                DispatchKey::CPUTensorId,
                CPUType::_adaptive_avg_pool2d)
  .impl("aten::_adaptive_avg_pool2d_backward",
        DispatchKey::CPUTensorId, &CPUType::_adaptive_avg_pool2d_backward)
  .impl_UNBOXED("aten::adaptive_avg_pool3d.out",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_avg_pool3d_out_out)
  .impl_UNBOXED("aten::adaptive_avg_pool3d",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_avg_pool3d)
  .impl_UNBOXED("aten::adaptive_avg_pool3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_avg_pool3d_backward_out_grad_input)
  .impl("aten::adaptive_avg_pool3d_backward",
        DispatchKey::CPUTensorId, &CPUType::adaptive_avg_pool3d_backward)
  .impl_UNBOXED("aten::adaptive_max_pool2d.out",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_max_pool2d_out_out)
  .impl_UNBOXED("aten::adaptive_max_pool2d",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_max_pool2d)
  .impl_UNBOXED("aten::adaptive_max_pool2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_max_pool2d_backward_out_grad_input)
  .impl("aten::adaptive_max_pool2d_backward",
        DispatchKey::CPUTensorId, &CPUType::adaptive_max_pool2d_backward)
  .impl_UNBOXED("aten::adaptive_max_pool3d.out",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_max_pool3d_out_out)
  .impl_UNBOXED("aten::adaptive_max_pool3d",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_max_pool3d)
  .impl_UNBOXED("aten::adaptive_max_pool3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::adaptive_max_pool3d_backward_out_grad_input)
  .impl("aten::adaptive_max_pool3d_backward",
        DispatchKey::CPUTensorId, &CPUType::adaptive_max_pool3d_backward)
  .impl_UNBOXED("aten::avg_pool2d.out",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool2d_out_out)
  .impl_UNBOXED("aten::avg_pool2d",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool2d)
  .impl_UNBOXED("aten::avg_pool2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool2d_backward_out_grad_input)
  .impl_UNBOXED("aten::avg_pool2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool2d_backward)
  .impl_UNBOXED("aten::avg_pool3d.out",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool3d_out_out)
  .impl_UNBOXED("aten::avg_pool3d",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool3d)
  .impl_UNBOXED("aten::avg_pool3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool3d_backward_out_grad_input)
  .impl_UNBOXED("aten::avg_pool3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::avg_pool3d_backward)
  .impl_UNBOXED("aten::fractional_max_pool2d.output",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool2d_out_output)
  .impl_UNBOXED("aten::fractional_max_pool2d",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool2d)
  .impl_UNBOXED("aten::fractional_max_pool2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool2d_backward_out_grad_input)
  .impl_UNBOXED("aten::fractional_max_pool2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool2d_backward)
  .impl_UNBOXED("aten::fractional_max_pool3d.output",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool3d_out_output)
  .impl_UNBOXED("aten::fractional_max_pool3d",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool3d)
  .impl_UNBOXED("aten::fractional_max_pool3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool3d_backward_out_grad_input)
  .impl_UNBOXED("aten::fractional_max_pool3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::fractional_max_pool3d_backward)
  .impl_UNBOXED("aten::max_pool2d_with_indices.out",
                DispatchKey::CPUTensorId,
                CPUType::max_pool2d_with_indices_out_out)
  .impl_UNBOXED("aten::max_pool2d_with_indices",
                DispatchKey::CPUTensorId,
                CPUType::max_pool2d_with_indices)
  .impl_UNBOXED("aten::max_pool2d_with_indices_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::max_pool2d_with_indices_backward_out_grad_input)
  .impl_UNBOXED("aten::max_pool2d_with_indices_backward",
                DispatchKey::CPUTensorId,
                CPUType::max_pool2d_with_indices_backward)
  .impl_UNBOXED("aten::max_pool3d_with_indices.out",
                DispatchKey::CPUTensorId,
                CPUType::max_pool3d_with_indices_out_out)
  .impl_UNBOXED("aten::max_pool3d_with_indices",
                DispatchKey::CPUTensorId,
                CPUType::max_pool3d_with_indices)
  .impl_UNBOXED("aten::max_pool3d_with_indices_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::max_pool3d_with_indices_backward_out_grad_input)
  .impl_UNBOXED("aten::max_pool3d_with_indices_backward",
                DispatchKey::CPUTensorId,
                CPUType::max_pool3d_with_indices_backward)
  .impl_UNBOXED("aten::max_unpool2d.out",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool2d_out_out)
  .impl_UNBOXED("aten::max_unpool2d",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool2d)
  .impl_UNBOXED("aten::max_unpool2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool2d_backward_out_grad_input)
  .impl_UNBOXED("aten::max_unpool2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool2d_backward)
  .impl_UNBOXED("aten::max_unpool3d.out",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool3d_out_out)
  .impl_UNBOXED("aten::max_unpool3d",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool3d)
  .impl_UNBOXED("aten::max_unpool3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool3d_backward_out_grad_input)
  .impl_UNBOXED("aten::max_unpool3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::max_unpool3d_backward)
  .impl_UNBOXED("aten::reflection_pad1d.out",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad1d_out_out)
  .impl_UNBOXED("aten::reflection_pad1d",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad1d)
  .impl_UNBOXED("aten::reflection_pad1d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad1d_backward_out_grad_input)
  .impl_UNBOXED("aten::reflection_pad1d_backward",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad1d_backward)
  .impl_UNBOXED("aten::reflection_pad2d.out",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad2d_out_out)
  .impl_UNBOXED("aten::reflection_pad2d",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad2d)
  .impl_UNBOXED("aten::reflection_pad2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad2d_backward_out_grad_input)
  .impl_UNBOXED("aten::reflection_pad2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::reflection_pad2d_backward)
  .impl_UNBOXED("aten::replication_pad1d.out",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad1d_out_out)
  .impl_UNBOXED("aten::replication_pad1d",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad1d)
  .impl_UNBOXED("aten::replication_pad1d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad1d_backward_out_grad_input)
  .impl_UNBOXED("aten::replication_pad1d_backward",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad1d_backward)
  .impl_UNBOXED("aten::replication_pad2d.out",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad2d_out_out)
  .impl_UNBOXED("aten::replication_pad2d",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad2d)
  .impl_UNBOXED("aten::replication_pad2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad2d_backward_out_grad_input)
  .impl_UNBOXED("aten::replication_pad2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad2d_backward)
  .impl_UNBOXED("aten::replication_pad3d.out",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad3d_out_out)
  .impl_UNBOXED("aten::replication_pad3d",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad3d)
  .impl_UNBOXED("aten::replication_pad3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad3d_backward_out_grad_input)
  .impl_UNBOXED("aten::replication_pad3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::replication_pad3d_backward)
  .impl_UNBOXED("aten::upsample_linear1d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_linear1d_out_out)
  .impl_UNBOXED("aten::upsample_linear1d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_linear1d)
  .impl_UNBOXED("aten::upsample_linear1d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_linear1d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_linear1d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_linear1d_backward)
  .impl_UNBOXED("aten::upsample_bilinear2d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bilinear2d_out_out)
  .impl_UNBOXED("aten::upsample_bilinear2d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bilinear2d)
  .impl_UNBOXED("aten::upsample_bilinear2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bilinear2d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_bilinear2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bilinear2d_backward)
  .impl_UNBOXED("aten::upsample_bicubic2d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bicubic2d_out_out)
  .impl_UNBOXED("aten::upsample_bicubic2d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bicubic2d)
  .impl_UNBOXED("aten::upsample_bicubic2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bicubic2d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_bicubic2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_bicubic2d_backward)
  .impl_UNBOXED("aten::upsample_trilinear3d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_trilinear3d_out_out)
  .impl_UNBOXED("aten::upsample_trilinear3d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_trilinear3d)
  .impl_UNBOXED("aten::upsample_trilinear3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_trilinear3d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_trilinear3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_trilinear3d_backward)
  .impl_UNBOXED("aten::upsample_nearest1d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest1d_out_out)
  .impl_UNBOXED("aten::upsample_nearest1d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest1d)
  .impl_UNBOXED("aten::upsample_nearest1d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest1d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_nearest1d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest1d_backward)
  .impl_UNBOXED("aten::upsample_nearest2d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest2d_out_out)
  .impl_UNBOXED("aten::upsample_nearest2d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest2d)
  .impl_UNBOXED("aten::upsample_nearest2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest2d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_nearest2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest2d_backward)
  .impl_UNBOXED("aten::upsample_nearest3d.out",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest3d_out_out)
  .impl_UNBOXED("aten::upsample_nearest3d",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest3d)
  .impl_UNBOXED("aten::upsample_nearest3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest3d_backward_out_grad_input)
  .impl_UNBOXED("aten::upsample_nearest3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::upsample_nearest3d_backward)
  .impl_UNBOXED("aten::sigmoid_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::sigmoid_backward_out_grad_input)
  .impl_UNBOXED("aten::tanh_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::tanh_backward_out_grad_input)
  .impl_UNBOXED("aten::slow_conv_transpose2d.out",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose2d_out_out)
  .impl_UNBOXED("aten::slow_conv_transpose2d",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose2d)
  .impl_UNBOXED("aten::slow_conv_transpose2d_backward.grad_output",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose2d_backward_out_grad_output)
  .impl_UNBOXED("aten::slow_conv_transpose2d_backward.output_mask",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose2d_backward_output_mask)
  .impl_UNBOXED("aten::slow_conv_transpose3d.out",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose3d_out_out)
  .impl_UNBOXED("aten::slow_conv_transpose3d",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose3d)
  .impl_UNBOXED("aten::slow_conv_transpose3d_backward.grad_output",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose3d_backward_out_grad_output)
  .impl_UNBOXED("aten::slow_conv_transpose3d_backward.output_mask",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_transpose3d_backward_output_mask)
  .impl_UNBOXED("aten::thnn_conv2d_forward.output",
                DispatchKey::CPUTensorId,
                CPUType::thnn_conv2d_forward_out_output)
  .impl_UNBOXED("aten::thnn_conv2d_forward",
                DispatchKey::CPUTensorId,
                CPUType::thnn_conv2d_forward)
  .impl_UNBOXED("aten::thnn_conv2d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::thnn_conv2d_backward_out_grad_input)
  .impl_UNBOXED("aten::thnn_conv2d_backward.output_mask",
                DispatchKey::CPUTensorId,
                CPUType::thnn_conv2d_backward_output_mask)
  .impl_UNBOXED("aten::slow_conv3d_forward.output",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv3d_forward_out_output)
  .impl_UNBOXED("aten::slow_conv3d_forward",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv3d_forward)
  .impl_UNBOXED("aten::slow_conv3d_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv3d_backward_out_grad_input)
  .impl_UNBOXED("aten::slow_conv3d_backward.output_mask",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv3d_backward_output_mask)
  .impl_UNBOXED("aten::slow_conv_dilated2d",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_dilated2d)
  .impl_UNBOXED("aten::slow_conv_dilated2d_backward",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_dilated2d_backward)
  .impl_UNBOXED("aten::slow_conv_dilated3d",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_dilated3d)
  .impl_UNBOXED("aten::slow_conv_dilated3d_backward",
                DispatchKey::CPUTensorId,
                CPUType::slow_conv_dilated3d_backward)
  .impl_UNBOXED("aten::col2im.out",
                DispatchKey::CPUTensorId,
                CPUType::col2im_out_out)
  .impl_UNBOXED("aten::col2im",
                DispatchKey::CPUTensorId,
                CPUType::col2im)
  .impl_UNBOXED("aten::col2im_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::col2im_backward_out_grad_input)
  .impl_UNBOXED("aten::col2im_backward",
                DispatchKey::CPUTensorId,
                CPUType::col2im_backward)
  .impl_UNBOXED("aten::im2col.out",
                DispatchKey::CPUTensorId,
                CPUType::im2col_out_out)
  .impl_UNBOXED("aten::im2col",
                DispatchKey::CPUTensorId,
                CPUType::im2col)
  .impl_UNBOXED("aten::im2col_backward.grad_input",
                DispatchKey::CPUTensorId,
                CPUType::im2col_backward_out_grad_input)
  .impl_UNBOXED("aten::im2col_backward",
                DispatchKey::CPUTensorId,
                CPUType::im2col_backward);
}

}
