// required for old g++ to compile PRId64 macros, see
// https://github.com/pytorch/pytorch/issues/3571
// for context
#define __STDC_FORMAT_MACROS

#include <ATen/SparseCUDAType.h>

// @generated by aten/src/ATen/gen.py from SparseTypeDerived.cpp

#include <ATen/CUDAGeneratorImpl.h>
#include <c10/core/Allocator.h>
#include <ATen/DeviceGuard.h>
#include <ATen/NativeFunctions.h>
#include <ATen/Utils.h>
#include <ATen/WrapDimUtils.h>
#include <ATen/Dispatch.h>
#include <c10/util/Half.h>
#include <c10/core/UndefinedTensorImpl.h>
#include <c10/util/Optional.h>
#include <ATen/core/op_registration/op_registration.h>

#include <cstddef>
#include <functional>
#include <memory>
#include <utility>

#include <ATen/Config.h>
#include <ATen/DeviceGuard.h>
#include <ATen/cuda/ATenCUDAGeneral.h>
#include <ATen/cuda/CUDADevice.h>
#include <ATen/cuda/CUDAContext.h>

namespace {
static const char* named_tensors_unsupported_error =
  " is not yet supported with named tensors. Please drop names via "
  "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
  "and set names on the result of the operation.";
}

namespace at {

namespace SparseCUDAType {

Tensor add_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_sparse(self, other, alpha);
}
Tensor & add__Tensor(Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_sparse_(self, other, alpha);
}
Tensor & add_out_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_out_sparse_cuda(out, self, other, alpha);
}
Tensor div_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_sparse(self, other);
}
Tensor & div__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_sparse_(self, other);
}
Tensor & div_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_out_sparse_zerodim(out, self, other);
}
Tensor empty_memory_format(IntArrayRef size, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::empty_sparse(size, options, memory_format);
}
Tensor floor_divide(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_sparse(self, other);
}
Tensor & floor_divide__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_sparse_(self, other);
}
Tensor & floor_divide_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_out_sparse_zerodim(out, self, other);
}
Tensor isnan(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::isnan_sparse(self);
}
Tensor & log1p_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p_sparse_(self);
}
Tensor & log1p_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p_out_sparse(out, self);
}
Tensor mm(const Tensor & self, const Tensor & mat2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_mm(self, mat2);
}
Tensor & mm_out_out(Tensor & out, const Tensor & self, const Tensor & mat2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_mm_out(out, self, mat2);
}
Tensor mul_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_sparse(self, other);
}
Tensor & mul__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_sparse_(self, other);
}
Tensor & mul_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_out_sparse_cuda(out, self, other);
}
Tensor mv(const Tensor & self, const Tensor & vec) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mv_sparse(self, vec);
}
Tensor narrow_copy(const Tensor & self, int64_t dim, int64_t start, int64_t length) {
    if (self.has_names()) {
        AT_ERROR("narrow_copy", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::narrow_copy_sparse(self, dim, start, length);
}
Tensor & sspaddmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("sspaddmm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sspaddmm_out_cuda(out, self, mat1, mat2, beta, alpha);
}
Tensor true_divide_Tensor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_sparse(self, other);
}
Tensor & true_divide__Tensor(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_sparse_(self, other);
}
Tensor & true_divide_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_out_sparse_zerodim(out, self, other);
}
Tensor native_norm(const Tensor & self, Scalar p) {
    if (self.has_names()) {
        AT_ERROR("native_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_sparse(self, p);
}
Tensor _sparse_sum_backward(const Tensor & grad, const Tensor & self, IntArrayRef dim) {
    if (grad.has_names() || self.has_names()) {
        AT_ERROR("_sparse_sum_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum_backward_cuda(grad, self, dim);
}
Tensor clone(const Tensor & self, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clone_sparse(self, memory_format);
}
Tensor & pow_out_Tensor_Scalar_out(Tensor & out, const Tensor & self, Scalar exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_out_sparse_scalar(out, self, exponent);
}
Tensor pow_Tensor_Scalar(const Tensor & self, Scalar exponent) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pow_sparse_scalar(self, exponent);
}
Tensor & zero_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::zero_sparse_(self);
}
Tensor & sub_out_out(Tensor & out, const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_out_sparse(out, self, other, alpha);
}
Tensor sub_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_sparse(self, other, alpha);
}
Tensor & sub__Tensor(Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_sparse_(self, other, alpha);
}
Tensor & addmm_out_out(Tensor & out, const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm_out_sparse_dense_cuda(out, self, mat1, mat2, beta, alpha);
}
Tensor addmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addmm_sparse_dense_cuda(self, mat1, mat2, beta, alpha);
}
Tensor & addmm_(Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::s_addmm_sparse_dense_cuda_(self, mat1, mat2, beta, alpha);
}
Tensor _sparse_coo_tensor_with_dims(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::new_with_dims_sparse(sparse_dim, dense_dim, size, options);
}
Tensor _sparse_coo_tensor_with_dims_and_tensors(int64_t sparse_dim, int64_t dense_dim, IntArrayRef size, const Tensor & indices, const Tensor & values, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("_sparse_coo_tensor_with_dims_and_tensors", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_with_dims_and_tensor_sparse(sparse_dim, dense_dim, size, indices, values, options);
}
Tensor & sparse_resize_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
    if (self.has_names()) {
        AT_ERROR("sparse_resize_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_resize_(self, size, sparse_dim, dense_dim);
}
Tensor & sparse_resize_and_clear_(Tensor & self, IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) {
    if (self.has_names()) {
        AT_ERROR("sparse_resize_and_clear_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_resize_and_clear_(self, size, sparse_dim, dense_dim);
}
Tensor sparse_mask(const Tensor & self, const Tensor & mask) {
    if (self.has_names() || mask.has_names()) {
        AT_ERROR("sparse_mask", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_mask_cuda(self, mask);
}
Tensor to_dense(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("to_dense", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sparse_to_dense(self);
}
int64_t sparse_dim(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("sparse_dim", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::sparse_dim_sparse(self);
}
int64_t _dimI(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_dimI", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::sparse_dim_sparse(self);
}
int64_t dense_dim(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("dense_dim", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::dense_dim_sparse(self);
}
int64_t _dimV(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_dimV", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::dense_dim_sparse(self);
}
int64_t _nnz(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_nnz", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::_nnz_sparse(self);
}
Tensor coalesce(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("coalesce", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::coalesce_sparse_cuda(self);
}
bool is_coalesced(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_coalesced_sparse(self);
}
Tensor _indices(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_indices", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::_indices_sparse(self);
}
Tensor _values(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_values", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::_values_sparse(self);
}
Tensor & _coalesced_(Tensor & self, bool coalesced) {
    if (self.has_names()) {
        AT_ERROR("_coalesced_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::_coalesced_sparse_(self, coalesced);
}
Tensor indices(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("indices", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::indices_sparse(self);
}
Tensor values(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("values", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::values_sparse(self);
}
Tensor & hspmm_out_out(Tensor & out, const Tensor & mat1, const Tensor & mat2) {
    if (out.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("hspmm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::hspmm_out_sparse_cuda(out, mat1, mat2);
}
Tensor hspmm(const Tensor & mat1, const Tensor & mat2) {
    if (mat1.has_names() || mat2.has_names()) {
        AT_ERROR("hspmm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(mat1));
    return at::native::hspmm_sparse_cuda(mat1, mat2);
}
Tensor & copy_sparse_to_sparse_(Tensor & self, const Tensor & src, bool non_blocking) {
    if (self.has_names() || src.has_names()) {
        AT_ERROR("copy_sparse_to_sparse_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::copy_sparse_(self, src, non_blocking);
}
Tensor index_select(const Tensor & self, int64_t dim, const Tensor & index) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_select", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select_sparse(self, dim, index);
}
Tensor any(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_sparse(self);
}

}  // namespace SparseCUDAType

namespace {
static auto registerer = torch::import()
  .impl("aten::add.Tensor",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::add_Tensor)
  .impl_UNBOXED("aten::add_.Tensor",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::add__Tensor)
  .impl_UNBOXED("aten::add.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::add_out_out)
  .impl("aten::div.Tensor",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::div_Tensor)
  .impl_UNBOXED("aten::div_.Tensor",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::div__Tensor)
  .impl_UNBOXED("aten::div.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::div_out_out)
  .impl_UNBOXED("aten::empty.memory_format",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::empty_memory_format)
  .impl_UNBOXED("aten::floor_divide",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::floor_divide)
  .impl_UNBOXED("aten::floor_divide_.Tensor",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::floor_divide__Tensor)
  .impl_UNBOXED("aten::floor_divide.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::floor_divide_out_out)
  .impl("aten::isnan",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::isnan)
  .impl_UNBOXED("aten::log1p_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::log1p_)
  .impl_UNBOXED("aten::log1p.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::log1p_out_out)
  .impl("aten::mm",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::mm)
  .impl_UNBOXED("aten::mm.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::mm_out_out)
  .impl("aten::mul.Tensor",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::mul_Tensor)
  .impl_UNBOXED("aten::mul_.Tensor",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::mul__Tensor)
  .impl_UNBOXED("aten::mul.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::mul_out_out)
  .impl("aten::mv",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::mv)
  .impl("aten::narrow_copy",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::narrow_copy)
  .impl_UNBOXED("aten::sspaddmm.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::sspaddmm_out_out)
  .impl("aten::true_divide.Tensor",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::true_divide_Tensor)
  .impl_UNBOXED("aten::true_divide_.Tensor",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::true_divide__Tensor)
  .impl_UNBOXED("aten::true_divide.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::true_divide_out_out)
  .impl("aten::native_norm",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::native_norm)
  .impl_UNBOXED("aten::_sparse_sum_backward",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::_sparse_sum_backward)
  .impl_UNBOXED("aten::clone",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::clone)
  .impl_UNBOXED("aten::pow.Tensor_Scalar_out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::pow_out_Tensor_Scalar_out)
  .impl("aten::pow.Tensor_Scalar",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::pow_Tensor_Scalar)
  .impl_UNBOXED("aten::zero_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::zero_)
  .impl_UNBOXED("aten::sub.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::sub_out_out)
  .impl("aten::sub.Tensor",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::sub_Tensor)
  .impl_UNBOXED("aten::sub_.Tensor",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::sub__Tensor)
  .impl_UNBOXED("aten::addmm.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::addmm_out_out)
  .impl("aten::addmm",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::addmm)
  .impl_UNBOXED("aten::addmm_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::addmm_)
  .impl_UNBOXED("aten::_sparse_coo_tensor_with_dims",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::_sparse_coo_tensor_with_dims)
  .impl_UNBOXED("aten::_sparse_coo_tensor_with_dims_and_tensors",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::_sparse_coo_tensor_with_dims_and_tensors)
  .impl_UNBOXED("aten::sparse_resize_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::sparse_resize_)
  .impl_UNBOXED("aten::sparse_resize_and_clear_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::sparse_resize_and_clear_)
  .impl("aten::sparse_mask",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::sparse_mask)
  .impl("aten::to_dense",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::to_dense)
  .impl("aten::sparse_dim",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::sparse_dim)
  .impl("aten::_dimI",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::_dimI)
  .impl("aten::dense_dim",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::dense_dim)
  .impl("aten::_dimV",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::_dimV)
  .impl("aten::_nnz",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::_nnz)
  .impl("aten::coalesce",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::coalesce)
  .impl("aten::is_coalesced",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::is_coalesced)
  .impl_UNBOXED("aten::_indices",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::_indices)
  .impl_UNBOXED("aten::_values",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::_values)
  .impl_UNBOXED("aten::_coalesced_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::_coalesced_)
  .impl_UNBOXED("aten::indices",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::indices)
  .impl_UNBOXED("aten::values",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::values)
  .impl_UNBOXED("aten::hspmm.out",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::hspmm_out_out)
  .impl("aten::hspmm",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::hspmm)
  .impl_UNBOXED("aten::copy_sparse_to_sparse_",
                DispatchKey::SparseCUDATensorId,
                SparseCUDAType::copy_sparse_to_sparse_)
  .impl("aten::index_select",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::index_select)
  .impl("aten::any",
        DispatchKey::SparseCUDATensorId, &SparseCUDAType::any);
}

}
