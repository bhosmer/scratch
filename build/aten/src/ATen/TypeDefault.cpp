#include <ATen/TypeDefault.h>

// @generated by aten/src/ATen/gen.py from TypeDefault.cpp

#include <ATen/DeviceGuard.h>
#include <ATen/ExpandUtils.h>
#include <ATen/Functions.h>
#include <ATen/NamedTensorUtils.h>
#include <ATen/NativeFunctions.h>
#include <c10/core/Scalar.h>
#include <c10/core/Storage.h>
#include <ATen/Tensor.h>
#include <c10/core/TensorOptions.h>
#include <ATen/DeviceGuard.h>
#include <ATen/SparseTensorUtils.h>
#include <ATen/core/op_registration/op_registration.h>

namespace {
static const char* named_tensors_unsupported_error =
  " is not yet supported with named tensors. Please drop names via "
  "`tensor = tensor.rename(None)`, call the op with an unnamed tensor, "
  "and set names on the result of the operation.";
}

namespace at {
namespace TypeDefault {

Tensor _cast_Byte(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Byte", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Byte(self, non_blocking);
}
Tensor _cast_Char(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Char", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Char(self, non_blocking);
}
Tensor _cast_Double(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Double", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Double(self, non_blocking);
}
Tensor _cast_Float(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Float", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Float(self, non_blocking);
}
Tensor _cast_Int(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Int", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Int(self, non_blocking);
}
Tensor _cast_Long(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Long", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Long(self, non_blocking);
}
Tensor _cast_Short(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Short", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Short(self, non_blocking);
}
Tensor _cast_Half(const Tensor & self, bool non_blocking) {
    if (self.has_names()) {
        AT_ERROR("_cast_Half", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_cast_Half(self, non_blocking);
}
void backward(const Tensor & self, const Tensor & gradient, bool keep_graph, bool create_graph) {
    if (self.has_names() || gradient.has_names()) {
        AT_ERROR("backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::backward(self, gradient, keep_graph, create_graph);
}
void set_data(const Tensor & self, const Tensor & new_data) {
    if (self.has_names() || new_data.has_names()) {
        AT_ERROR("set_data", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::set_data(self, new_data);
}
Tensor data(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("data", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::data(self);
}
bool is_leaf(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("is_leaf", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_leaf(self);
}
int64_t output_nr(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::output_nr(self);
}
int64_t _version(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_version", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_version(self);
}
Tensor & requires_grad_(Tensor & self, bool _requires_grad) {
    if (self.has_names()) {
        AT_ERROR("requires_grad_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::requires_grad_(self, _requires_grad);
}
void retain_grad(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("retain_grad", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
 at::native::retain_grad(self);
}
Tensor & rename_(Tensor & self, c10::optional<DimnameList> names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rename_(self, names);
}
Tensor rename(const Tensor & self, c10::optional<DimnameList> names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rename(self, names);
}
Tensor align_to(const Tensor & self, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, names);
}
Tensor align_to_ellipsis_idx(const Tensor & self, DimnameList order, int64_t ellipsis_idx) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_to(self, order, ellipsis_idx);
}
Tensor align_as(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::align_as(self, other);
}
std::vector<Tensor> align_tensors(TensorList tensors) {

    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::align_tensors(tensors);
}
Tensor refine_names(const Tensor & self, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::refine_names(self, names);
}
Tensor unflatten_Dimname(const Tensor & self, Dimname dim, IntArrayRef sizes, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unflatten(self, dim, sizes, names);
}
Tensor unflatten_int(const Tensor & self, int64_t dim, IntArrayRef sizes, DimnameList names) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unflatten(self, dim, sizes, names);
}
bool _use_cudnn_rnn_flatten_weight() {

    // DeviceGuard omitted
    return at::native::_use_cudnn_rnn_flatten_weight();
}
int64_t _debug_has_internal_overlap(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_debug_has_internal_overlap", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_debug_has_internal_overlap(self);
}
std::tuple<Tensor,Tensor> _sobol_engine_draw(const Tensor & quasi, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated, c10::optional<ScalarType> dtype) {
    if (quasi.has_names() || sobolstate.has_names()) {
        AT_ERROR("_sobol_engine_draw", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(quasi));
    return at::native::_sobol_engine_draw(quasi, n, sobolstate, dimension, num_generated, dtype);
}
Tensor & _sobol_engine_ff_(Tensor & self, int64_t n, const Tensor & sobolstate, int64_t dimension, int64_t num_generated) {
    if (self.has_names() || sobolstate.has_names()) {
        AT_ERROR("_sobol_engine_ff_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_ff_(self, n, sobolstate, dimension, num_generated);
}
Tensor & _sobol_engine_scramble_(Tensor & self, const Tensor & ltm, int64_t dimension) {
    if (self.has_names() || ltm.has_names()) {
        AT_ERROR("_sobol_engine_scramble_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_scramble_(self, ltm, dimension);
}
Tensor & _sobol_engine_initialize_state_(Tensor & self, int64_t dimension) {
    if (self.has_names()) {
        AT_ERROR("_sobol_engine_initialize_state_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sobol_engine_initialize_state_(self, dimension);
}
Tensor _reshape_from_tensor(const Tensor & self, const Tensor & shape) {
    if (self.has_names() || shape.has_names()) {
        AT_ERROR("_reshape_from_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_reshape_from_tensor(self, shape);
}
Tensor _shape_as_tensor(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_shape_as_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_shape_as_tensor(self);
}
Tensor dropout(const Tensor & input, double p, bool train) {

    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::dropout(input, p, train);
}
Tensor & dropout_(Tensor & self, double p, bool train) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dropout_(self, p, train);
}
Tensor feature_dropout(const Tensor & input, double p, bool train) {
    if (input.has_names()) {
        AT_ERROR("feature_dropout", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_dropout(input, p, train);
}
Tensor & feature_dropout_(Tensor & self, double p, bool train) {
    if (self.has_names()) {
        AT_ERROR("feature_dropout_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_dropout_(self, p, train);
}
Tensor alpha_dropout(const Tensor & input, double p, bool train) {
    if (input.has_names()) {
        AT_ERROR("alpha_dropout", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::alpha_dropout(input, p, train);
}
Tensor & alpha_dropout_(Tensor & self, double p, bool train) {
    if (self.has_names()) {
        AT_ERROR("alpha_dropout_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alpha_dropout_(self, p, train);
}
Tensor feature_alpha_dropout(const Tensor & input, double p, bool train) {
    if (input.has_names()) {
        AT_ERROR("feature_alpha_dropout", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::feature_alpha_dropout(input, p, train);
}
Tensor & feature_alpha_dropout_(Tensor & self, double p, bool train) {
    if (self.has_names()) {
        AT_ERROR("feature_alpha_dropout_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::feature_alpha_dropout_(self, p, train);
}
Tensor abs(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs(self);
}
Tensor & abs_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs_(self);
}
Tensor & abs_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::abs_out(out, self);
}
Tensor angle(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::angle(self);
}
Tensor & angle_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::angle_out(out, self);
}
Tensor real(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::real(self);
}
Tensor imag(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::imag(self);
}
Tensor copy_real(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::copy_real(self);
}
Tensor & copy_real_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::copy_real_out(out, self);
}
Tensor copy_imag(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::copy_imag(self);
}
Tensor & copy_imag_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::copy_imag_out(out, self);
}
Tensor conj(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conj(self);
}
Tensor & conj_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conj_out(out, self);
}
Tensor acos(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos(self);
}
Tensor & acos_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos_(self);
}
Tensor & acos_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::acos_out(out, self);
}
Tensor avg_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, bool ceil_mode, bool count_include_pad) {
    if (self.has_names()) {
        AT_ERROR("avg_pool1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::avg_pool1d(self, kernel_size, stride, padding, ceil_mode, count_include_pad);
}
Tensor adaptive_avg_pool1d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("adaptive_avg_pool1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool1d(self, output_size);
}
std::tuple<Tensor,Tensor> adaptive_max_pool1d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("adaptive_max_pool1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_max_pool1d(self, output_size);
}
Tensor add_Scalar(const Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add(self, other, alpha);
}
Tensor & add__Scalar(Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::add_(self, other, alpha);
}
Tensor addr(const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("addr", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr(self, vec1, vec2, beta, alpha);
}
Tensor & addr_(Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("addr_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_(self, vec1, vec2, beta, alpha);
}
Tensor & addr_out_out(Tensor & out, const Tensor & self, const Tensor & vec1, const Tensor & vec2, Scalar beta, Scalar alpha) {
    if (out.has_names() || self.has_names() || vec1.has_names() || vec2.has_names()) {
        AT_ERROR("addr_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addr_out(out, self, vec1, vec2, beta, alpha);
}
Tensor affine_grid_generator(const Tensor & theta, IntArrayRef size, bool align_corners) {
    if (theta.has_names()) {
        AT_ERROR("affine_grid_generator", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(theta));
    return at::native::affine_grid_generator(theta, size, align_corners);
}
Tensor affine_grid_generator_backward(const Tensor & grad, IntArrayRef size, bool align_corners) {
    if (grad.has_names()) {
        AT_ERROR("affine_grid_generator_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::affine_grid_generator_backward(grad, size, align_corners);
}
Tensor all_dim(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("all", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & all_out_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("all_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
Tensor all_dimname(const Tensor & self, Dimname dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("all", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self, dim, keepdim);
}
Tensor & all_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("all_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all_out(out, self, dim, keepdim);
}
bool allclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("allclose", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::allclose(self, other, rtol, atol, equal_nan);
}
Tensor any_dim(const Tensor & self, int64_t dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("any", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & any_out_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("any_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor any_dimname(const Tensor & self, Dimname dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("any", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any(self, dim, keepdim);
}
Tensor & any_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("any_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::any_out(out, self, dim, keepdim);
}
Tensor arange(Scalar end, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::arange(end, options);
}
Tensor arange_start(Scalar start, Scalar end, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, options);
}
Tensor arange_start_step(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::arange(start, end, step, options);
}
Tensor & arange_out_out(Tensor & out, Scalar end) {
    if (out.has_names()) {
        AT_ERROR("arange_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::arange_out(out, end);
}
Tensor _dim_arange(const Tensor & like, int64_t dim) {
    if (like.has_names()) {
        AT_ERROR("_dim_arange", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(like));
    return at::native::_dim_arange(like, dim);
}
Tensor & as_strided_(Tensor & self, IntArrayRef size, IntArrayRef stride, c10::optional<int64_t> storage_offset) {
    if (self.has_names()) {
        AT_ERROR("as_strided_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::as_strided_(self, size, stride, storage_offset);
}
Tensor asin(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin(self);
}
Tensor & asin_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin_(self);
}
Tensor & asin_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::asin_out(out, self);
}
Tensor atan(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan(self);
}
Tensor & _baddbmm_mkl_(Tensor & self, const Tensor & batch1, const Tensor & batch2, Scalar beta, Scalar alpha) {
    if (self.has_names() || batch1.has_names() || batch2.has_names()) {
        AT_ERROR("_baddbmm_mkl_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_baddbmm_mkl_(self, batch1, batch2, beta, alpha);
}
Tensor bartlett_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, options);
}
Tensor bartlett_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::bartlett_window(window_length, periodic, options);
}
Tensor batch_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("batch_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::batch_norm(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,int64_t> _batch_norm_impl_index(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool training, double momentum, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("_batch_norm_impl_index", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index(input, weight, bias, running_mean, running_var, training, momentum, eps, cudnn_enabled);
}
std::tuple<Tensor,Tensor,Tensor> _batch_norm_impl_index_backward(int64_t impl_index, const Tensor & input, const Tensor & grad_output, const Tensor & weight, const Tensor & running_mean, const Tensor & running_var, const Tensor & save_mean, const Tensor & save_var_transform, bool train, double eps, std::array<bool,3> output_mask, const Tensor & reservedSpace) {
    if (input.has_names() || grad_output.has_names() || weight.has_names() || running_mean.has_names() || running_var.has_names() || save_mean.has_names() || save_var_transform.has_names() || reservedSpace.has_names()) {
        AT_ERROR("_batch_norm_impl_index_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_batch_norm_impl_index_backward(impl_index, input, grad_output, weight, running_mean, running_var, save_mean, save_var_transform, train, eps, output_mask, reservedSpace);
}
Tensor bernoulli(const Tensor & self, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, generator);
}
Tensor & bernoulli_out_out(Tensor & out, const Tensor & self, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli_out(out, self, generator);
}
Tensor bernoulli_p(const Tensor & self, double p, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("bernoulli", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bernoulli(self, p, generator);
}
Tensor bilinear(const Tensor & input1, const Tensor & input2, const Tensor & weight, const Tensor & bias) {
    if (input1.has_names() || input2.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("bilinear", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::bilinear(input1, input2, weight, bias);
}
Tensor binary_cross_entropy_with_logits(const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
    if (self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {
        AT_ERROR("binary_cross_entropy_with_logits", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits(self, target, weight, pos_weight, reduction);
}
Tensor binary_cross_entropy_with_logits_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, const Tensor & weight, const Tensor & pos_weight, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names() || weight.has_names() || pos_weight.has_names()) {
        AT_ERROR("binary_cross_entropy_with_logits_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::binary_cross_entropy_with_logits_backward(grad_output, self, target, weight, pos_weight, reduction);
}
Tensor bitwise_not(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not(self);
}
Tensor & bitwise_not_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_not_(self);
}
Tensor logical_not(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not(self);
}
Tensor & logical_not_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_not_(self);
}
Tensor logical_xor(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor(self, other);
}
Tensor & logical_xor_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_xor_(self, other);
}
Tensor logical_and(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and(self, other);
}
Tensor & logical_and_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_and_(self, other);
}
Tensor logical_or(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or(self, other);
}
Tensor & logical_or_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logical_or_(self, other);
}
Tensor blackman_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, options);
}
Tensor blackman_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::blackman_window(window_length, periodic, options);
}
std::vector<Tensor> broadcast_tensors(TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR("broadcast_tensors", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::broadcast_tensors(tensors);
}
Tensor cat(TensorList tensors, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & cat_out_out(Tensor & out, TensorList tensors, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor cat_names(TensorList tensors, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cat(tensors, dim);
}
Tensor & cat_out_names_out(Tensor & out, TensorList tensors, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::cat_out(out, tensors, dim);
}
Tensor ceil(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil(self);
}
Tensor & ceil_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ceil_(self);
}
Tensor chain_matmul(TensorList matrices) {
    if (at::has_names(matrices)) {
        AT_ERROR("chain_matmul", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(matrices));
    return at::native::chain_matmul(matrices);
}
std::vector<Tensor> chunk(const Tensor & self, int64_t chunks, int64_t dim) {

    // DeviceGuard omitted
    return at::native::chunk(self, chunks, dim);
}
Tensor clamp_max(const Tensor & self, Scalar max) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_max(self, max);
}
Tensor clamp_min(const Tensor & self, Scalar min) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::clamp_min(self, min);
}
bool cudnn_is_acceptable(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("cudnn_is_acceptable", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::cudnn_is_acceptable(self);
}
Tensor constant_pad_nd(const Tensor & self, IntArrayRef pad, Scalar value) {
    if (self.has_names()) {
        AT_ERROR("constant_pad_nd", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::constant_pad_nd(self, pad, value);
}
Tensor contiguous(const Tensor & self, MemoryFormat memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::contiguous(self, memory_format);
}
Tensor convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("convolution", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
Tensor convolution_overrideable(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("convolution_overrideable", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::convolution_overrideable(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups);
}
std::tuple<Tensor,Tensor,Tensor> convolution_backward_overrideable(const Tensor & grad_output, const Tensor & input, const Tensor & weight, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, std::array<bool,3> output_mask) {
    if (grad_output.has_names() || input.has_names() || weight.has_names()) {
        AT_ERROR("convolution_backward_overrideable", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::convolution_backward_overrideable(grad_output, input, weight, stride, padding, dilation, transposed, output_padding, groups, output_mask);
}
Tensor _convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("_convolution", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution(input, weight, bias, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled);
}
Tensor _convolution_nogroup(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("_convolution_nogroup", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_convolution_nogroup(input, weight, bias, stride, padding, dilation, transposed, output_padding);
}
std::tuple<Tensor,Tensor,Tensor> _convolution_double_backward(const Tensor & ggI, const Tensor & ggW, const Tensor & ggb, const Tensor & gO, const Tensor & weight, const Tensor & self, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool transposed, IntArrayRef output_padding, int64_t groups, bool benchmark, bool deterministic, bool cudnn_enabled, std::array<bool,3> output_mask) {
    if (ggI.has_names() || ggW.has_names() || ggb.has_names() || gO.has_names() || weight.has_names() || self.has_names()) {
        AT_ERROR("_convolution_double_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_convolution_double_backward(ggI, ggW, ggb, gO, weight, self, stride, padding, dilation, transposed, output_padding, groups, benchmark, deterministic, cudnn_enabled, output_mask);
}
Tensor conv1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv1d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv2d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv2d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv3d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, int64_t groups) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv3d(input, weight, bias, stride, padding, dilation, groups);
}
Tensor conv_tbc(const Tensor & self, const Tensor & weight, const Tensor & bias, int64_t pad) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_tbc", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc(self, weight, bias, pad);
}
std::tuple<Tensor,Tensor,Tensor> conv_tbc_backward(const Tensor & self, const Tensor & input, const Tensor & weight, const Tensor & bias, int64_t pad) {
    if (self.has_names() || input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_tbc_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::conv_tbc_backward(self, input, weight, bias, pad);
}
Tensor conv_transpose1d(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_transpose1d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose1d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor conv_transpose2d_input(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_transpose2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose2d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor conv_transpose3d_input(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef output_padding, int64_t groups, IntArrayRef dilation) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("conv_transpose3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::conv_transpose3d(input, weight, bias, stride, padding, output_padding, groups, dilation);
}
Tensor & copy_(Tensor & self, const Tensor & src, bool non_blocking) {

    // DeviceGuard omitted
    return at::native::copy_(self, src, non_blocking);
}
Tensor cos(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cos(self);
}
Tensor cosh(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cosh(self);
}
Tensor cosine_embedding_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
    if (input1.has_names() || input2.has_names() || target.has_names()) {
        AT_ERROR("cosine_embedding_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::cosine_embedding_loss(input1, input2, target, margin, reduction);
}
std::tuple<Tensor,Tensor> cummax(const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax(self, dim);
}
std::tuple<Tensor &,Tensor &> cummax_out_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummax_dimname(const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax(self, dim);
}
std::tuple<Tensor &,Tensor &> cummax_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummax_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummin(const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin(self, dim);
}
std::tuple<Tensor &,Tensor &> cummin_out_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin_out(values, indices, self, dim);
}
std::tuple<Tensor,Tensor> cummin_dimname(const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin(self, dim);
}
std::tuple<Tensor &,Tensor &> cummin_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cummin_out(values, indices, self, dim);
}
Tensor cumprod(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & cumprod_out_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor cumprod_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod(self, dim, dtype);
}
Tensor & cumprod_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumprod_out(out, self, dim, dtype);
}
Tensor cumsum(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & cumsum_out_out(Tensor & out, const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor cumsum_dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum(self, dim, dtype);
}
Tensor & cumsum_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cumsum_out(out, self, dim, dtype);
}
Tensor ctc_loss_IntList(const Tensor & log_probs, const Tensor & targets, IntArrayRef input_lengths, IntArrayRef target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
    if (log_probs.has_names() || targets.has_names()) {
        AT_ERROR("ctc_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor ctc_loss_Tensor(const Tensor & log_probs, const Tensor & targets, const Tensor & input_lengths, const Tensor & target_lengths, int64_t blank, int64_t reduction, bool zero_infinity) {
    if (log_probs.has_names() || targets.has_names() || input_lengths.has_names() || target_lengths.has_names()) {
        AT_ERROR("ctc_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(log_probs));
    return at::native::ctc_loss(log_probs, targets, input_lengths, target_lengths, blank, reduction, zero_infinity);
}
Tensor det(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("det", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::det(self);
}
Tensor diag_embed(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {
    if (self.has_names()) {
        AT_ERROR("diag_embed", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diag_embed(self, offset, dim1, dim2);
}
Tensor diagflat(const Tensor & self, int64_t offset) {
    if (self.has_names()) {
        AT_ERROR("diagflat", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagflat(self, offset);
}
Tensor diagonal(const Tensor & self, int64_t offset, int64_t dim1, int64_t dim2) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, offset, dim1, dim2);
}
Tensor diagonal_Dimname(const Tensor & self, Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::diagonal(self, outdim, dim1, dim2, offset);
}
Tensor & fill_diagonal_(Tensor & self, Scalar fill_value, bool wrap) {
    if (self.has_names()) {
        AT_ERROR("fill_diagonal_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_diagonal_(self, fill_value, wrap);
}
Tensor div_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div(self, other);
}
Tensor & div__Scalar(Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::div_(self, other);
}
Tensor & dot_out_out(Tensor & out, const Tensor & self, const Tensor & tensor) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dot_out(out, self, tensor);
}
Tensor einsum(std::string equation, TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR("einsum", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::einsum(equation, tensors);
}
Tensor embedding(const Tensor & weight, const Tensor & indices, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
    if (weight.has_names() || indices.has_names()) {
        AT_ERROR("embedding", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding(weight, indices, padding_idx, scale_grad_by_freq, sparse);
}
Tensor embedding_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq, bool sparse) {
    if (grad.has_names() || indices.has_names()) {
        AT_ERROR("embedding_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq, sparse);
}
Tensor embedding_sparse_backward(const Tensor & grad, const Tensor & indices, int64_t num_weights, int64_t padding_idx, bool scale_grad_by_freq) {
    if (grad.has_names() || indices.has_names()) {
        AT_ERROR("embedding_sparse_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::embedding_sparse_backward(grad, indices, num_weights, padding_idx, scale_grad_by_freq);
}
std::tuple<Tensor,Tensor,Tensor,Tensor> embedding_bag(const Tensor & weight, const Tensor & indices, const Tensor & offsets, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights, bool include_last_offset) {
    if (weight.has_names() || indices.has_names() || offsets.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("embedding_bag", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(weight));
    return at::native::embedding_bag(weight, indices, offsets, scale_grad_by_freq, mode, sparse, per_sample_weights, include_last_offset);
}
Tensor _embedding_bag_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, const Tensor & maximum_indices, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, bool sparse, const Tensor & per_sample_weights) {
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || maximum_indices.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_backward(grad, indices, offsets, offset2bag, bag_size, maximum_indices, num_weights, scale_grad_by_freq, mode, sparse, per_sample_weights);
}
Tensor _embedding_bag_sparse_backward(const Tensor & grad, const Tensor & indices, const Tensor & offsets, const Tensor & offset2bag, const Tensor & bag_size, int64_t num_weights, bool scale_grad_by_freq, int64_t mode, const Tensor & per_sample_weights) {
    if (grad.has_names() || indices.has_names() || offsets.has_names() || offset2bag.has_names() || bag_size.has_names() || per_sample_weights.has_names()) {
        AT_ERROR("_embedding_bag_sparse_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_embedding_bag_sparse_backward(grad, indices, offsets, offset2bag, bag_size, num_weights, scale_grad_by_freq, mode, per_sample_weights);
}
Tensor empty_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::empty(size, names, options, memory_format);
}
Tensor new_empty(const Tensor & self, IntArrayRef size, const TensorOptions & options) {
    if (self.has_names()) {
        AT_ERROR("new_empty", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_empty(self, size, options);
}
Tensor new_full(const Tensor & self, IntArrayRef size, Scalar fill_value, const TensorOptions & options) {
    if (self.has_names()) {
        AT_ERROR("new_full", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_full(self, size, fill_value, options);
}
Tensor new_zeros(const Tensor & self, IntArrayRef size, const TensorOptions & options) {
    if (self.has_names()) {
        AT_ERROR("new_zeros", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::new_zeros(self, size, options);
}
Tensor & resize_(Tensor & self, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::resize_(self, size, memory_format);
}
Tensor & empty_out_out(Tensor & out, IntArrayRef size, c10::optional<MemoryFormat> memory_format) {
    if (out.has_names()) {
        AT_ERROR("empty_out", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::empty_out(out, size, memory_format);
}
Tensor empty_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::empty_like(self, options, memory_format);
}
Tensor erf(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erf(self);
}
Tensor erfc(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::erfc(self);
}
Tensor exp(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exp(self);
}
Tensor expm1(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1(self);
}
Tensor & expm1_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::expm1_(self);
}
Tensor expand(const Tensor & self, IntArrayRef size, bool implicit) {

    // DeviceGuard omitted
    return at::native::expand(self, size, implicit);
}
Tensor expand_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("expand_as", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::expand_as(self, other);
}
Tensor eye(int64_t n, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, options);
}
Tensor eye_m(int64_t n, int64_t m, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::eye(n, m, options);
}
Tensor flatten_using_ints(const Tensor & self, int64_t start_dim, int64_t end_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim);
}
Tensor flatten_named_out_dim(const Tensor & self, int64_t start_dim, int64_t end_dim, Dimname out_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim, out_dim);
}
Tensor flatten_using_names(const Tensor & self, Dimname start_dim, Dimname end_dim, Dimname out_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, start_dim, end_dim, out_dim);
}
Tensor flatten_DimnameList(const Tensor & self, DimnameList dims, Dimname out_dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::flatten(self, dims, out_dim);
}
Tensor & fill__Scalar(Tensor & self, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor & fill__Tensor(Tensor & self, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fill_(self, value);
}
Tensor floor(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor(self);
}
Tensor & floor_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_(self);
}
Tensor floor_divide_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide(self, other);
}
Tensor & floor_divide__Scalar(Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::floor_divide_(self, other);
}
Tensor frac(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac(self);
}
Tensor & frac_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac_(self);
}
Tensor & frac_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frac_out(out, self);
}
Tensor full_names(IntArrayRef size, Scalar fill_value, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::full(size, fill_value, names, options);
}
Tensor full(IntArrayRef size, Scalar fill_value, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::full(size, fill_value, options);
}
Tensor & full_out_out(Tensor & out, IntArrayRef size, Scalar fill_value) {
    if (out.has_names()) {
        AT_ERROR("full_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::full_out(out, size, fill_value);
}
Tensor full_like(const Tensor & self, Scalar fill_value, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::full_like(self, fill_value, options, memory_format);
}
Tensor grid_sampler(const Tensor & input, const Tensor & grid, int64_t interpolation_mode, int64_t padding_mode, bool align_corners) {
    if (input.has_names() || grid.has_names()) {
        AT_ERROR("grid_sampler", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::grid_sampler(input, grid, interpolation_mode, padding_mode, align_corners);
}
Tensor hann_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, options);
}
Tensor hann_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hann_window(window_length, periodic, options);
}
Tensor hamming_window(int64_t window_length, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, options);
}
Tensor hamming_window_periodic(int64_t window_length, bool periodic, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, options);
}
Tensor hamming_window_periodic_alpha(int64_t window_length, bool periodic, double alpha, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, options);
}
Tensor hamming_window_periodic_alpha_beta(int64_t window_length, bool periodic, double alpha, double beta, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::hamming_window(window_length, periodic, alpha, beta, options);
}
Tensor hinge_embedding_loss(const Tensor & self, const Tensor & target, double margin, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("hinge_embedding_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hinge_embedding_loss(self, target, margin, reduction);
}
Tensor ger(const Tensor & self, const Tensor & vec2) {
    if (self.has_names() || vec2.has_names()) {
        AT_ERROR("ger", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ger(self, vec2);
}
Tensor & ger_out_out(Tensor & out, const Tensor & self, const Tensor & vec2) {
    if (out.has_names() || self.has_names() || vec2.has_names()) {
        AT_ERROR("ger_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ger_out(out, self, vec2);
}
Tensor group_norm(const Tensor & input, int64_t num_groups, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("group_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::group_norm(input, num_groups, weight, bias, eps, cudnn_enabled);
}
Tensor fft(const Tensor & self, int64_t signal_ndim, bool normalized) {
    if (self.has_names()) {
        AT_ERROR("fft", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fft(self, signal_ndim, normalized);
}
Tensor ifft(const Tensor & self, int64_t signal_ndim, bool normalized) {
    if (self.has_names()) {
        AT_ERROR("ifft", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ifft(self, signal_ndim, normalized);
}
Tensor rfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided) {
    if (self.has_names()) {
        AT_ERROR("rfft", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rfft(self, signal_ndim, normalized, onesided);
}
Tensor irfft(const Tensor & self, int64_t signal_ndim, bool normalized, bool onesided, IntArrayRef signal_sizes) {
    if (self.has_names()) {
        AT_ERROR("irfft", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::irfft(self, signal_ndim, normalized, onesided, signal_sizes);
}
int64_t _cufft_get_plan_cache_size(int64_t device_index) {

    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_size(device_index);
}
int64_t _cufft_get_plan_cache_max_size(int64_t device_index) {

    // DeviceGuard omitted
    return at::native::_cufft_get_plan_cache_max_size(device_index);
}
void _cufft_set_plan_cache_max_size(int64_t device_index, int64_t max_size) {

    // DeviceGuard omitted
 at::native::_cufft_set_plan_cache_max_size(device_index, max_size);
}
void _cufft_clear_plan_cache(int64_t device_index) {

    // DeviceGuard omitted
 at::native::_cufft_clear_plan_cache(device_index);
}
Tensor index_Tensor(const Tensor & self, TensorList indices) {
    if (self.has_names() || at::has_names(indices)) {
        AT_ERROR("index", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index(self, indices);
}
Tensor & index_copy_(Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_copy_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor index_copy(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_copy", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & index_copy__dimname(Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_copy_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy_(self, dim, index, source);
}
Tensor index_copy_dimname(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_copy", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_copy(self, dim, index, source);
}
Tensor & index_put_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR("index_put_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put_(self, indices, values, accumulate);
}
Tensor index_put(const Tensor & self, TensorList indices, const Tensor & values, bool accumulate) {
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR("index_put", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_put(self, indices, values, accumulate);
}
Tensor & _index_put_impl_(Tensor & self, TensorList indices, const Tensor & values, bool accumulate, bool unsafe) {
    if (self.has_names() || values.has_names() || at::has_names(indices)) {
        AT_ERROR("_index_put_impl_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_index_put_impl_(self, indices, values, accumulate, unsafe);
}
Tensor instance_norm(const Tensor & input, const Tensor & weight, const Tensor & bias, const Tensor & running_mean, const Tensor & running_var, bool use_input_stats, double momentum, double eps, bool cudnn_enabled) {
    if (input.has_names() || weight.has_names() || bias.has_names() || running_mean.has_names() || running_var.has_names()) {
        AT_ERROR("instance_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::instance_norm(input, weight, bias, running_mean, running_var, use_input_stats, momentum, eps, cudnn_enabled);
}
Tensor inverse(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("inverse", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse(self);
}
Tensor & inverse_out_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("inverse_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::inverse_out(out, self);
}
Tensor isclose(const Tensor & self, const Tensor & other, double rtol, double atol, bool equal_nan) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("isclose", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::isclose(self, other, rtol, atol, equal_nan);
}
bool is_distributed(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("is_distributed", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::is_distributed(self);
}
bool is_floating_point(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_floating_point(self);
}
bool is_complex(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_complex(self);
}
bool is_nonzero(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_nonzero(self);
}
bool is_same_size(const Tensor & self, const Tensor & other) {

    // DeviceGuard omitted
    return at::native::is_same_size(self, other);
}
bool is_signed(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::is_signed(self);
}
Tensor kl_div(const Tensor & self, const Tensor & target, int64_t reduction, bool log_target) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("kl_div", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kl_div(self, target, reduction, log_target);
}
std::tuple<Tensor,Tensor> kthvalue(const Tensor & self, int64_t k, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
std::tuple<Tensor,Tensor> kthvalue_dimname(const Tensor & self, int64_t k, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue(self, k, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> kthvalue_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, int64_t k, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::kthvalue_out(values, indices, self, k, dim, keepdim);
}
Tensor layer_norm(const Tensor & input, IntArrayRef normalized_shape, const Tensor & weight, const Tensor & bias, double eps, bool cudnn_enable) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("layer_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::layer_norm(input, normalized_shape, weight, bias, eps, cudnn_enable);
}
Tensor linear(const Tensor & input, const Tensor & weight, const Tensor & bias) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("linear", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::linear(input, weight, bias);
}
Tensor fbgemm_linear_int8_weight_fp32_activation(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_int8_weight_fp32_activation", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight_fp32_activation(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
Tensor fbgemm_linear_int8_weight(const Tensor & input, const Tensor & weight, const Tensor & packed, const Tensor & col_offsets, Scalar weight_scale, Scalar weight_zero_point, const Tensor & bias) {
    if (input.has_names() || weight.has_names() || packed.has_names() || col_offsets.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_int8_weight", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_int8_weight(input, weight, packed, col_offsets, weight_scale, weight_zero_point, bias);
}
std::tuple<Tensor,Tensor,double,int64_t> fbgemm_linear_quantize_weight(const Tensor & input) {
    if (input.has_names()) {
        AT_ERROR("fbgemm_linear_quantize_weight", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_quantize_weight(input);
}
Tensor fbgemm_pack_gemm_matrix_fp16(const Tensor & input) {
    if (input.has_names()) {
        AT_ERROR("fbgemm_pack_gemm_matrix_fp16", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_gemm_matrix_fp16(input);
}
Tensor fbgemm_linear_fp16_weight_fp32_activation(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_fp16_weight_fp32_activation", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight_fp32_activation(input, packed_weight, bias);
}
Tensor fbgemm_linear_fp16_weight(const Tensor & input, const Tensor & packed_weight, const Tensor & bias) {
    if (input.has_names() || packed_weight.has_names() || bias.has_names()) {
        AT_ERROR("fbgemm_linear_fp16_weight", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_linear_fp16_weight(input, packed_weight, bias);
}
Tensor fbgemm_pack_quantized_matrix(const Tensor & input) {
    if (input.has_names()) {
        AT_ERROR("fbgemm_pack_quantized_matrix", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input);
}
Tensor fbgemm_pack_quantized_matrix_KN(const Tensor & input, int64_t K, int64_t N) {
    if (input.has_names()) {
        AT_ERROR("fbgemm_pack_quantized_matrix", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::fbgemm_pack_quantized_matrix(input, K, N);
}
Tensor linspace(Scalar start, Scalar end, int64_t steps, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::linspace(start, end, steps, options);
}
Tensor log(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log(self);
}
Tensor & log_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_(self);
}
Tensor log10(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10(self);
}
Tensor & log10_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log10_(self);
}
Tensor log1p(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log1p(self);
}
Tensor log2(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2(self);
}
Tensor & log2_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log2_(self);
}
Tensor logdet(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("logdet", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logdet(self);
}
Tensor logspace(Scalar start, Scalar end, int64_t steps, double base, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::logspace(start, end, steps, base, options);
}
Tensor log_softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
Tensor log_softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_softmax(self, dim, dtype);
}
Tensor logsumexp(const Tensor & self, IntArrayRef dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & logsumexp_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor logsumexp_names(const Tensor & self, DimnameList dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp(self, dim, keepdim);
}
Tensor & logsumexp_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::logsumexp_out(out, self, dim, keepdim);
}
Tensor margin_ranking_loss(const Tensor & input1, const Tensor & input2, const Tensor & target, double margin, int64_t reduction) {
    if (input1.has_names() || input2.has_names() || target.has_names()) {
        AT_ERROR("margin_ranking_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input1));
    return at::native::margin_ranking_loss(input1, input2, target, margin, reduction);
}
Tensor matmul(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul(self, other);
}
Tensor & matmul_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matmul_out(out, self, other);
}
Tensor matrix_rank_tol(const Tensor & self, double tol, bool symmetric) {
    if (self.has_names()) {
        AT_ERROR("matrix_rank", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, tol, symmetric);
}
Tensor matrix_rank(const Tensor & self, bool symmetric) {
    if (self.has_names()) {
        AT_ERROR("matrix_rank", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_rank(self, symmetric);
}
Tensor matrix_power(const Tensor & self, int64_t n) {
    if (self.has_names()) {
        AT_ERROR("matrix_power", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::matrix_power(self, n);
}
std::tuple<Tensor,Tensor> max_dim(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> max_out_dim_max(Tensor & max, Tensor & max_values, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor max_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("max_values", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> max_names_dim(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> max_out_names_dim_max(Tensor & max, Tensor & max_values, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(max, max_values, self, dim, keepdim);
}
Tensor max_values_names(const Tensor & self, DimnameList dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("max_values", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> max_pool1d_with_indices(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d_with_indices(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool1d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool1d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool2d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool2d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor max_pool3d(const Tensor & self, IntArrayRef kernel_size, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation, bool ceil_mode) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_pool3d(self, kernel_size, stride, padding, dilation, ceil_mode);
}
Tensor mean_names_dim(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean(self, dim, keepdim, dtype);
}
Tensor & mean_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mean_out(out, self, dim, keepdim, dtype);
}
std::tuple<Tensor,Tensor> median_dim(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> median_out_dim_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> median_names_dim(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> median_out_names_dim_values(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::median_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> min_dim(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> min_out_dim_min(Tensor & min, Tensor & min_indices, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor min_values(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("min_values", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
std::tuple<Tensor,Tensor> min_names_dim(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> min_out_names_dim_min(Tensor & min, Tensor & min_indices, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(min, min_indices, self, dim, keepdim);
}
Tensor min_values_names(const Tensor & self, DimnameList dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("min_values", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_values(self, dim, keepdim);
}
Tensor mkldnn_convolution(const Tensor & self, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("mkldnn_convolution", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution(self, weight, bias, padding, stride, dilation, groups);
}
Tensor mkldnn_convolution_backward_input(IntArrayRef self_size, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
    if (grad_output.has_names() || weight.has_names()) {
        AT_ERROR("mkldnn_convolution_backward_input", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::mkldnn_convolution_backward_input(self_size, grad_output, weight, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor> mkldnn_convolution_backward_weights(IntArrayRef weight_size, const Tensor & grad_output, const Tensor & self, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, bool bias_defined) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("mkldnn_convolution_backward_weights", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward_weights(weight_size, grad_output, self, padding, stride, dilation, groups, bias_defined);
}
std::tuple<Tensor,Tensor,Tensor> mkldnn_convolution_backward(const Tensor & self, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, IntArrayRef stride, IntArrayRef dilation, int64_t groups, std::array<bool,3> output_mask) {
    if (self.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("mkldnn_convolution_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mkldnn_convolution_backward(self, grad_output, weight, padding, stride, dilation, groups, output_mask);
}
Tensor _sparse_mm(const Tensor & sparse, const Tensor & dense) {
    if (sparse.has_names() || dense.has_names()) {
        AT_ERROR("_sparse_mm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(sparse));
    return at::native::_sparse_mm(sparse, dense);
}
std::tuple<Tensor,Tensor> mode(const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> mode_out_values(Tensor & values, Tensor & indices, const Tensor & self, int64_t dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
std::tuple<Tensor,Tensor> mode_dimname(const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode(self, dim, keepdim);
}
std::tuple<Tensor &,Tensor &> mode_out_dimname_out(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mode_out(values, indices, self, dim, keepdim);
}
Tensor mul_Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("mul", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul(self, other);
}
Tensor & mul__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("mul_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mul_(self, other);
}
Tensor mvlgamma(const Tensor & self, int64_t p) {
    if (self.has_names()) {
        AT_ERROR("mvlgamma", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma(self, p);
}
Tensor & mvlgamma_(Tensor & self, int64_t p) {
    if (self.has_names()) {
        AT_ERROR("mvlgamma_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mvlgamma_(self, p);
}
Tensor narrow(const Tensor & self, int64_t dim, int64_t start, int64_t length) {

    // DeviceGuard omitted
    return at::native::narrow(self, dim, start, length);
}
Tensor narrow_Tensor(const Tensor & self, int64_t dim, const Tensor & start, int64_t length) {

    // DeviceGuard omitted
    return at::native::narrow(self, dim, start, length);
}
bool _nnpack_available() {

    // DeviceGuard omitted
    return at::native::_nnpack_available();
}
Tensor _nnpack_spatial_convolution(const Tensor & input, const Tensor & weight, const Tensor & bias, IntArrayRef padding, IntArrayRef stride) {
    if (input.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution(input, weight, bias, padding, stride);
}
std::tuple<Tensor,Tensor,Tensor> _nnpack_spatial_convolution_backward(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding, std::array<bool,3> output_mask) {
    if (input.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward(input, grad_output, weight, padding, output_mask);
}
Tensor _nnpack_spatial_convolution_backward_input(const Tensor & input, const Tensor & grad_output, const Tensor & weight, IntArrayRef padding) {
    if (input.has_names() || grad_output.has_names() || weight.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution_backward_input", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_input(input, grad_output, weight, padding);
}
Tensor _nnpack_spatial_convolution_backward_weight(const Tensor & input, IntArrayRef weightsize, const Tensor & grad_output, IntArrayRef padding) {
    if (input.has_names() || grad_output.has_names()) {
        AT_ERROR("_nnpack_spatial_convolution_backward_weight", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_nnpack_spatial_convolution_backward_weight(input, weightsize, grad_output, padding);
}
Tensor ones_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::ones(size, names, options);
}
Tensor ones(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::ones(size, options);
}
Tensor & ones_out_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR("ones_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::ones_out(out, size);
}
Tensor ones_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::ones_like(self, options, memory_format);
}
Tensor pairwise_distance(const Tensor & x1, const Tensor & x2, double p, double eps, bool keepdim) {
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR("pairwise_distance", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::pairwise_distance(x1, x2, p, eps, keepdim);
}
Tensor cdist(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {

    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cdist(x1, x2, p, compute_mode);
}
Tensor _cdist_forward(const Tensor & x1, const Tensor & x2, double p, c10::optional<int64_t> compute_mode) {

    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::_cdist_forward(x1, x2, p, compute_mode);
}
Tensor _cdist_backward(const Tensor & grad, const Tensor & x1, const Tensor & x2, double p, const Tensor & cdist) {
    if (grad.has_names() || x1.has_names() || x2.has_names() || cdist.has_names()) {
        AT_ERROR("_cdist_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_cdist_backward(grad, x1, x2, p, cdist);
}
Tensor pdist(const Tensor & self, double p) {
    if (self.has_names()) {
        AT_ERROR("pdist", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pdist(self, p);
}
Tensor _pdist_forward(const Tensor & self, double p) {
    if (self.has_names()) {
        AT_ERROR("_pdist_forward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_forward(self, p);
}
Tensor _pdist_backward(const Tensor & grad, const Tensor & self, double p, const Tensor & pdist) {
    if (grad.has_names() || self.has_names() || pdist.has_names()) {
        AT_ERROR("_pdist_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_pdist_backward(grad, self, p, pdist);
}
Tensor cosine_similarity(const Tensor & x1, const Tensor & x2, int64_t dim, double eps) {
    if (x1.has_names() || x2.has_names()) {
        AT_ERROR("cosine_similarity", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(x1));
    return at::native::cosine_similarity(x1, x2, dim, eps);
}
Tensor permute(const Tensor & self, IntArrayRef dims) {
    if (self.has_names()) {
        AT_ERROR("permute", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::permute(self, dims);
}
Tensor numpy_T(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("numpy_T", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::numpy_T(self);
}
Tensor pixel_shuffle(const Tensor & self, int64_t upscale_factor) {
    if (self.has_names()) {
        AT_ERROR("pixel_shuffle", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pixel_shuffle(self, upscale_factor);
}
bool is_pinned(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::is_pinned(self);
}
Tensor pin_memory(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("pin_memory", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pin_memory(self);
}
Tensor pinverse(const Tensor & self, double rcond) {
    if (self.has_names()) {
        AT_ERROR("pinverse", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::pinverse(self, rcond);
}
Tensor poisson_nll_loss(const Tensor & input, const Tensor & target, bool log_input, bool full, double eps, int64_t reduction) {
    if (input.has_names() || target.has_names()) {
        AT_ERROR("poisson_nll_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::poisson_nll_loss(input, target, log_input, full, eps, reduction);
}
Tensor scalar_tensor(Scalar s, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::scalar_tensor(s, options);
}
Tensor rand_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::rand(size, names, options);
}
Tensor rand_generator_with_names(IntArrayRef size, Generator generator, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::rand(size, generator, names, options);
}
Tensor rand(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, options);
}
Tensor rand_generator(IntArrayRef size, Generator generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::rand(size, generator, options);
}
Tensor & rand_out_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR("rand_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size);
}
Tensor & rand_out_generator_out(Tensor & out, IntArrayRef size, Generator generator) {
    if (out.has_names()) {
        AT_ERROR("rand_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::rand_out(out, size, generator);
}
Tensor rand_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::rand_like(self, options, memory_format);
}
Tensor randint(int64_t high, IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, options);
}
Tensor randint_generator(int64_t high, IntArrayRef size, Generator generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(high, size, generator, options);
}
Tensor randint_low(int64_t low, int64_t high, IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, options);
}
Tensor randint_low_generator(int64_t low, int64_t high, IntArrayRef size, Generator generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randint(low, high, size, generator, options);
}
Tensor & randint_out_out(Tensor & out, int64_t high, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR("randint_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size);
}
Tensor & randint_out_generator_out(Tensor & out, int64_t high, IntArrayRef size, Generator generator) {
    if (out.has_names()) {
        AT_ERROR("randint_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, high, size, generator);
}
Tensor & randint_out_low_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR("randint_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size);
}
Tensor & randint_out_low_generator_out(Tensor & out, int64_t low, int64_t high, IntArrayRef size, Generator generator) {
    if (out.has_names()) {
        AT_ERROR("randint_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randint_out(out, low, high, size, generator);
}
Tensor randint_like(const Tensor & self, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names()) {
        AT_ERROR("randint_like", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, high, options, memory_format);
}
Tensor randint_like_low_dtype(const Tensor & self, int64_t low, int64_t high, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names()) {
        AT_ERROR("randint_like", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::randint_like(self, low, high, options, memory_format);
}
Tensor randn(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, options);
}
Tensor randn_generator(IntArrayRef size, Generator generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randn(size, generator, options);
}
Tensor randn_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::randn(size, names, options);
}
Tensor randn_generator_with_names(IntArrayRef size, Generator generator, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::randn(size, generator, names, options);
}
Tensor & randn_out_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR("randn_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size);
}
Tensor & randn_out_generator_out(Tensor & out, IntArrayRef size, Generator generator) {
    if (out.has_names()) {
        AT_ERROR("randn_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randn_out(out, size, generator);
}
Tensor randn_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::randn_like(self, options, memory_format);
}
Tensor randperm(int64_t n, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, options);
}
Tensor randperm_generator(int64_t n, Generator generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::randperm(n, generator, options);
}
Tensor & randperm_out_out(Tensor & out, int64_t n) {
    if (out.has_names()) {
        AT_ERROR("randperm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::randperm_out(out, n);
}
Tensor range_step(Scalar start, Scalar end, Scalar step, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, step, options);
}
Tensor range(Scalar start, Scalar end, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::range(start, end, options);
}
Tensor reciprocal(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal(self);
}
Tensor & reciprocal_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal_(self);
}
Tensor & reciprocal_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::reciprocal_out(out, self);
}
Tensor neg(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg(self);
}
Tensor & neg_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::neg_(self);
}
Tensor repeat(const Tensor & self, IntArrayRef repeats) {
    if (self.has_names()) {
        AT_ERROR("repeat", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat(self, repeats);
}
Tensor repeat_interleave_self_Tensor(const Tensor & self, const Tensor & repeats, c10::optional<int64_t> dim) {
    if (self.has_names() || repeats.has_names()) {
        AT_ERROR("repeat_interleave", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor repeat_interleave_self_int(const Tensor & self, int64_t repeats, c10::optional<int64_t> dim) {
    if (self.has_names()) {
        AT_ERROR("repeat_interleave", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::repeat_interleave(self, repeats, dim);
}
Tensor reshape(const Tensor & self, IntArrayRef shape) {

    // DeviceGuard omitted
    return at::native::reshape(self, shape);
}
Tensor reshape_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("reshape_as", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::reshape_as(self, other);
}
Tensor round(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round(self);
}
Tensor & round_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::round_(self);
}
Tensor rrelu(const Tensor & self, Scalar lower, Scalar upper, bool training, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("rrelu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu(self, lower, upper, training, generator);
}
Tensor & rrelu_(Tensor & self, Scalar lower, Scalar upper, bool training, Generator generator) {
    if (self.has_names()) {
        AT_ERROR("rrelu_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_(self, lower, upper, training, generator);
}
Tensor hardshrink(const Tensor & self, Scalar lambd) {
    if (self.has_names()) {
        AT_ERROR("hardshrink", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink(self, lambd);
}
Tensor hardshrink_backward(const Tensor & grad_out, const Tensor & self, Scalar lambd) {
    if (grad_out.has_names() || self.has_names()) {
        AT_ERROR("hardshrink_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardshrink_backward(grad_out, self, lambd);
}
Tensor rsqrt(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt(self);
}
Tensor & rsqrt_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsqrt_(self);
}
Tensor select_Dimname(const Tensor & self, Dimname dim, int64_t index) {

    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor select_int(const Tensor & self, int64_t dim, int64_t index) {

    // DeviceGuard omitted
    return at::native::select(self, dim, index);
}
Tensor selu(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("selu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu(self);
}
Tensor & selu_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("selu_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::selu_(self);
}
Tensor celu(const Tensor & self, Scalar alpha) {
    if (self.has_names()) {
        AT_ERROR("celu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu(self, alpha);
}
Tensor & celu_(Tensor & self, Scalar alpha) {
    if (self.has_names()) {
        AT_ERROR("celu_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::celu_(self, alpha);
}
Tensor & sigmoid_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sigmoid_out(out, self);
}
Tensor sin(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin(self);
}
Tensor & sin_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sin_(self);
}
Tensor sinh(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh(self);
}
Tensor & sinh_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh_(self);
}
Tensor & sinh_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sinh_out(out, self);
}
Tensor detach(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach(self);
}
Tensor & detach_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::detach_(self);
}
int64_t size_int(const Tensor & self, int64_t dim) {

    // DeviceGuard omitted
    return at::native::size(self, dim);
}
int64_t size_Dimname(const Tensor & self, Dimname dim) {

    // DeviceGuard omitted
    return at::native::size(self, dim);
}
Tensor slice_Tensor(const Tensor & self, int64_t dim, int64_t start, int64_t end, int64_t step) {

    // DeviceGuard omitted
    return at::native::slice(self, dim, start, end, step);
}
std::tuple<Tensor,Tensor> slogdet(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("slogdet", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slogdet(self);
}
Tensor smm(const Tensor & self, const Tensor & mat2) {
    if (self.has_names() || mat2.has_names()) {
        AT_ERROR("smm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smm(self, mat2);
}
Tensor softmax_int(const Tensor & self, int64_t dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
Tensor softmax_Dimname(const Tensor & self, Dimname dim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softmax(self, dim, dtype);
}
std::vector<Tensor> split_Tensor(const Tensor & self, int64_t split_size, int64_t dim) {

    // DeviceGuard omitted
    return at::native::split(self, split_size, dim);
}
std::vector<Tensor> split_with_sizes(const Tensor & self, IntArrayRef split_sizes, int64_t dim) {

    // DeviceGuard omitted
    return at::native::split_with_sizes(self, split_sizes, dim);
}
Tensor squeeze(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::squeeze(self);
}
Tensor squeeze_dim(const Tensor & self, int64_t dim) {

    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor squeeze_dimname(const Tensor & self, Dimname dim) {

    // DeviceGuard omitted
    return at::native::squeeze(self, dim);
}
Tensor & squeeze_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("squeeze_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::squeeze_(self);
}
Tensor & squeeze__dim(Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR("squeeze_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor & squeeze__dimname(Tensor & self, Dimname dim) {
    if (self.has_names()) {
        AT_ERROR("squeeze_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::squeeze_(self, dim);
}
Tensor sspaddmm(const Tensor & self, const Tensor & mat1, const Tensor & mat2, Scalar beta, Scalar alpha) {
    if (self.has_names() || mat1.has_names() || mat2.has_names()) {
        AT_ERROR("sspaddmm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sspaddmm(self, mat1, mat2, beta, alpha);
}
Tensor stack(TensorList tensors, int64_t dim) {
    if (at::has_names(tensors)) {
        AT_ERROR("stack", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::stack(tensors, dim);
}
Tensor & stack_out_out(Tensor & out, TensorList tensors, int64_t dim) {
    if (out.has_names() || at::has_names(tensors)) {
        AT_ERROR("stack_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::stack_out(out, tensors, dim);
}
Tensor stft(const Tensor & self, int64_t n_fft, c10::optional<int64_t> hop_length, c10::optional<int64_t> win_length, const Tensor & window, bool normalized, bool onesided) {
    if (self.has_names() || window.has_names()) {
        AT_ERROR("stft", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::stft(self, n_fft, hop_length, win_length, window, normalized, onesided);
}
int64_t stride_int(const Tensor & self, int64_t dim) {

    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
int64_t stride_Dimname(const Tensor & self, Dimname dim) {

    // DeviceGuard omitted
    return at::native::stride(self, dim);
}
Tensor sum(const Tensor & self, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dtype);
}
Tensor sum_dim_IntList(const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
Tensor sum_dim_DimnameList(const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum(self, dim, keepdim, dtype);
}
Tensor & sum_out_IntList_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
Tensor & sum_out_DimnameList_out(Tensor & out, const Tensor & self, DimnameList dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sum_out(out, self, dim, keepdim, dtype);
}
Tensor sum_to_size(const Tensor & self, IntArrayRef size) {
    if (self.has_names()) {
        AT_ERROR("sum_to_size", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::sum_to_size(self, size);
}
Tensor sqrt(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt(self);
}
Tensor & sqrt_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt_(self);
}
Tensor & sqrt_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sqrt_out(out, self);
}
Tensor square(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::square(self);
}
Tensor & square_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::square_(self);
}
Tensor std(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, unbiased);
}
Tensor std_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> std_mean(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> std_mean_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> std_mean_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_mean(self, dim, unbiased, keepdim);
}
Tensor & std_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor std_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std(self, dim, unbiased, keepdim);
}
Tensor & std_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::std_out(out, self, dim, unbiased, keepdim);
}
Tensor prod(const Tensor & self, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dtype);
}
Tensor prod_dim_int(const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & prod_out_int_out(Tensor & out, const Tensor & self, int64_t dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
Tensor prod_dim_Dimname(const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod(self, dim, keepdim, dtype);
}
Tensor & prod_out_Dimname_out(Tensor & out, const Tensor & self, Dimname dim, bool keepdim, c10::optional<ScalarType> dtype) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::prod_out(out, self, dim, keepdim, dtype);
}
Tensor t(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::t(self);
}
Tensor & t_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("t_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::t_(self);
}
Tensor tan(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tan(self);
}
Tensor tensordot(const Tensor & self, const Tensor & other, IntArrayRef dims_self, IntArrayRef dims_other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("tensordot", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tensordot(self, other, dims_self, dims_other);
}
Tensor transpose_int(const Tensor & self, int64_t dim0, int64_t dim1) {

    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor transpose_Dimname(const Tensor & self, Dimname dim0, Dimname dim1) {

    // DeviceGuard omitted
    return at::native::transpose(self, dim0, dim1);
}
Tensor & transpose_(Tensor & self, int64_t dim0, int64_t dim1) {
    if (self.has_names()) {
        AT_ERROR("transpose_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::transpose_(self, dim0, dim1);
}
Tensor one_hot(const Tensor & self, int64_t num_classes) {
    if (self.has_names()) {
        AT_ERROR("one_hot", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::one_hot(self, num_classes);
}
Tensor rot90(const Tensor & self, int64_t k, IntArrayRef dims) {
    if (self.has_names()) {
        AT_ERROR("rot90", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rot90(self, k, dims);
}
Tensor trapz_x(const Tensor & y, const Tensor & x, int64_t dim) {
    if (y.has_names() || x.has_names()) {
        AT_ERROR("trapz", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, x, dim);
}
Tensor trapz_dx(const Tensor & y, double dx, int64_t dim) {
    if (y.has_names()) {
        AT_ERROR("trapz", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(y));
    return at::native::trapz(y, dx, dim);
}
Tensor _trilinear(const Tensor & i1, const Tensor & i2, const Tensor & i3, IntArrayRef expand1, IntArrayRef expand2, IntArrayRef expand3, IntArrayRef sumdim, int64_t unroll_dim) {
    if (i1.has_names() || i2.has_names() || i3.has_names()) {
        AT_ERROR("_trilinear", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(i1));
    return at::native::_trilinear(i1, i2, i3, expand1, expand2, expand3, sumdim, unroll_dim);
}
Tensor triplet_margin_loss(const Tensor & anchor, const Tensor & positive, const Tensor & negative, double margin, double p, double eps, bool swap, int64_t reduction) {
    if (anchor.has_names() || positive.has_names() || negative.has_names()) {
        AT_ERROR("triplet_margin_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(anchor));
    return at::native::triplet_margin_loss(anchor, positive, negative, margin, p, eps, swap, reduction);
}
Tensor true_divide_Scalar(const Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide(self, other);
}
Tensor & true_divide__Scalar(Tensor & self, Scalar other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::true_divide_(self, other);
}
Tensor trunc(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc(self);
}
Tensor & trunc_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::trunc_(self);
}
Tensor type_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("type_as", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::type_as(self, other);
}
bool _has_compatible_shallow_copy_type(const Tensor & self, const Tensor & from) {
    if (self.has_names() || from.has_names()) {
        AT_ERROR("_has_compatible_shallow_copy_type", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_has_compatible_shallow_copy_type(self, from);
}
Tensor _unsafe_view(const Tensor & self, IntArrayRef size) {
    if (self.has_names()) {
        AT_ERROR("_unsafe_view", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_unsafe_view(self, size);
}
Tensor unsqueeze(const Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR("unsqueeze", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::unsqueeze(self, dim);
}
Tensor & unsqueeze_(Tensor & self, int64_t dim) {
    if (self.has_names()) {
        AT_ERROR("unsqueeze_", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::unsqueeze_(self, dim);
}
Tensor var(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, unbiased);
}
Tensor var_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & var_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
Tensor var_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var(self, dim, unbiased, keepdim);
}
Tensor & var_out_names_out(Tensor & out, const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_out(out, self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> var_mean(const Tensor & self, bool unbiased) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, unbiased);
}
std::tuple<Tensor,Tensor> var_mean_dim(const Tensor & self, IntArrayRef dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
std::tuple<Tensor,Tensor> var_mean_names_dim(const Tensor & self, DimnameList dim, bool unbiased, bool keepdim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::var_mean(self, dim, unbiased, keepdim);
}
Tensor view_as(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("view_as", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::view_as(self, other);
}
Tensor where_self(const Tensor & condition, const Tensor & self, const Tensor & other) {
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("where", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::where(condition, self, other);
}
std::vector<Tensor> where(const Tensor & condition) {
    if (condition.has_names()) {
        AT_ERROR("where", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(condition));
    return at::native::where(condition);
}
Tensor _s_where(const Tensor & condition, const Tensor & self, const Tensor & other) {
    if (condition.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("_s_where", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_s_where(condition, self, other);
}
Tensor norm_except_dim(const Tensor & v, int64_t pow, int64_t dim) {
    if (v.has_names()) {
        AT_ERROR("norm_except_dim", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::norm_except_dim(v, pow, dim);
}
Tensor _weight_norm(const Tensor & v, const Tensor & g, int64_t dim) {
    if (v.has_names() || g.has_names()) {
        AT_ERROR("_weight_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(v));
    return at::native::_weight_norm(v, g, dim);
}
std::tuple<Tensor,Tensor> _weight_norm_differentiable_backward(const Tensor & grad_w, const Tensor & saved_v, const Tensor & saved_g, const Tensor & saved_norms, int64_t dim) {
    if (grad_w.has_names() || saved_v.has_names() || saved_g.has_names() || saved_norms.has_names()) {
        AT_ERROR("_weight_norm_differentiable_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_w));
    return at::native::_weight_norm_differentiable_backward(grad_w, saved_v, saved_g, saved_norms, dim);
}
Tensor zeros_names(IntArrayRef size, c10::optional<DimnameList> names, const TensorOptions & options) {

    // DeviceGuard omitted
    return at::native::zeros(size, names, options);
}
Tensor zeros(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::zeros(size, options);
}
Tensor & zeros_out_out(Tensor & out, IntArrayRef size) {
    if (out.has_names()) {
        AT_ERROR("zeros_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::zeros_out(out, size);
}
Tensor zeros_like(const Tensor & self, const TensorOptions & options, c10::optional<MemoryFormat> memory_format) {

    const DeviceGuard device_guard(options.device());
    return at::native::zeros_like(self, options, memory_format);
}
Tensor _sparse_sum(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("_sparse_sum", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self);
}
Tensor _sparse_sum_dtype(const Tensor & self, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR("_sparse_sum", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dtype);
}
Tensor _sparse_sum_dim(const Tensor & self, IntArrayRef dim) {
    if (self.has_names()) {
        AT_ERROR("_sparse_sum", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim);
}
Tensor _sparse_sum_dim_dtype(const Tensor & self, IntArrayRef dim, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR("_sparse_sum", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_sum(self, dim, dtype);
}
Tensor norm_ScalarOpt_dtype(const Tensor & self, c10::optional<Scalar> p, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR("norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dtype);
}
Tensor norm_Scalar(const Tensor & self, Scalar p) {
    if (self.has_names()) {
        AT_ERROR("norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p);
}
Tensor norm_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR("norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor norm_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & norm_out_dtype_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim, ScalarType dtype) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & norm_out_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, IntArrayRef dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor norm_names_ScalarOpt_dim_dtype(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
    if (self.has_names()) {
        AT_ERROR("norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim, dtype);
}
Tensor norm_names_ScalarOpt_dim(const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm(self, p, dim, keepdim);
}
Tensor & norm_out_names_dtype_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim, ScalarType dtype) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim, dtype);
}
Tensor & norm_out_names_out(Tensor & out, const Tensor & self, c10::optional<Scalar> p, DimnameList dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::norm_out(out, self, p, dim, keepdim);
}
Tensor frobenius_norm(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("frobenius_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self);
}
Tensor frobenius_norm_dim(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("frobenius_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm(self, dim, keepdim);
}
Tensor & frobenius_norm_out_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("frobenius_norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::frobenius_norm_out(out, self, dim, keepdim);
}
Tensor nuclear_norm(const Tensor & self, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("nuclear_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, keepdim);
}
Tensor & nuclear_norm_out_out(Tensor & out, const Tensor & self, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nuclear_norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, keepdim);
}
Tensor nuclear_norm_dim(const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (self.has_names()) {
        AT_ERROR("nuclear_norm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm(self, dim, keepdim);
}
Tensor & nuclear_norm_out_dim_out(Tensor & out, const Tensor & self, IntArrayRef dim, bool keepdim) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("nuclear_norm_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nuclear_norm_out(out, self, dim, keepdim);
}
Tensor & resize_as_(Tensor & self, const Tensor & the_template, c10::optional<MemoryFormat> memory_format) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::resize_as_(self, the_template, memory_format);
}
Tensor sub_Scalar(const Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub(self, other, alpha);
}
Tensor & sub__Scalar(Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sub_(self, other, alpha);
}
Tensor rsub_Tensor(const Tensor & self, const Tensor & other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor rsub_Scalar(const Tensor & self, Scalar other, Scalar alpha) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rsub(self, other, alpha);
}
Tensor _sparse_addmm(const Tensor & self, const Tensor & sparse, const Tensor & dense, Scalar beta, Scalar alpha) {
    if (self.has_names() || sparse.has_names() || dense.has_names()) {
        AT_ERROR("_sparse_addmm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_sparse_addmm(self, sparse, dense, beta, alpha);
}
Tensor sparse_coo_tensor_size(IntArrayRef size, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(size, options);
}
Tensor sparse_coo_tensor_indices(const Tensor & indices, const Tensor & values, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("sparse_coo_tensor", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, options);
}
Tensor sparse_coo_tensor_indices_size(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("sparse_coo_tensor", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::sparse_coo_tensor(indices, values, size, options);
}
Tensor _sparse_coo_tensor_unsafe(const Tensor & indices, const Tensor & values, IntArrayRef size, const TensorOptions & options) {
    if (indices.has_names() || values.has_names()) {
        AT_ERROR("_sparse_coo_tensor_unsafe", named_tensors_unsupported_error);
    }
    const DeviceGuard device_guard(options.device());
    return at::native::_sparse_coo_tensor_unsafe(indices, values, size, options);
}
Tensor to_dense_backward(const Tensor & grad, const Tensor & input) {
    if (grad.has_names() || input.has_names()) {
        AT_ERROR("to_dense_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_dense_backward(grad, input);
}
std::vector<Tensor> unbind_int(const Tensor & self, int64_t dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
std::vector<Tensor> unbind_Dimname(const Tensor & self, Dimname dim) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::unbind(self, dim);
}
Tensor to_mkldnn_backward(const Tensor & grad, const Tensor & input) {
    if (grad.has_names() || input.has_names()) {
        AT_ERROR("to_mkldnn_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::to_mkldnn_backward(grad, input);
}
Tensor fake_quantize_per_tensor_affine(const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
    if (self.has_names()) {
        AT_ERROR("fake_quantize_per_tensor_affine", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_tensor_affine(self, scale, zero_point, quant_min, quant_max);
}
Tensor fake_quantize_per_tensor_affine_backward(const Tensor & grad, const Tensor & self, double scale, int64_t zero_point, int64_t quant_min, int64_t quant_max) {
    if (grad.has_names() || self.has_names()) {
        AT_ERROR("fake_quantize_per_tensor_affine_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_tensor_affine_backward(grad, self, scale, zero_point, quant_min, quant_max);
}
Tensor fake_quantize_per_channel_affine(const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
    if (self.has_names() || scale.has_names() || zero_point.has_names()) {
        AT_ERROR("fake_quantize_per_channel_affine", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_channel_affine(self, scale, zero_point, axis, quant_min, quant_max);
}
Tensor fake_quantize_per_channel_affine_backward(const Tensor & grad, const Tensor & self, const Tensor & scale, const Tensor & zero_point, int64_t axis, int64_t quant_min, int64_t quant_max) {
    if (grad.has_names() || self.has_names() || scale.has_names() || zero_point.has_names()) {
        AT_ERROR("fake_quantize_per_channel_affine_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::fake_quantize_per_channel_affine_backward(grad, self, scale, zero_point, axis, quant_min, quant_max);
}
std::tuple<double,int64_t> _choose_qparams_per_tensor(const Tensor & self, bool reduce_range) {
    if (self.has_names()) {
        AT_ERROR("_choose_qparams_per_tensor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_choose_qparams_per_tensor(self, reduce_range);
}
Tensor to_dtype_layout(const Tensor & self, const TensorOptions & options, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::to(self, options, non_blocking, copy, memory_format);
}
Tensor to_device(const Tensor & self, Device device, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::to(self, device, dtype, non_blocking, copy, memory_format);
}
Tensor to_dtype(const Tensor & self, ScalarType dtype, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {

    // DeviceGuard omitted
    return at::native::to(self, dtype, non_blocking, copy, memory_format);
}
Tensor to_other(const Tensor & self, const Tensor & other, bool non_blocking, bool copy, c10::optional<MemoryFormat> memory_format) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("to", named_tensors_unsupported_error);
    }
    // DeviceGuard omitted
    return at::native::to(self, other, non_blocking, copy, memory_format);
}
std::vector<Tensor> meshgrid(TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR("meshgrid", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::meshgrid(tensors);
}
Tensor cartesian_prod(TensorList tensors) {
    if (at::has_names(tensors)) {
        AT_ERROR("cartesian_prod", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensors));
    return at::native::cartesian_prod(tensors);
}
Tensor combinations(const Tensor & self, int64_t r, bool with_replacement) {
    if (self.has_names()) {
        AT_ERROR("combinations", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::combinations(self, r, with_replacement);
}
Scalar item(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::item(self);
}
ScalarType result_type_Tensor(const Tensor & tensor, const Tensor & other) {
    if (tensor.has_names() || other.has_names()) {
        AT_ERROR("result_type", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(tensor, other);
}
ScalarType result_type_Scalar(const Tensor & tensor, Scalar other) {
    if (tensor.has_names()) {
        AT_ERROR("result_type", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(tensor, other);
}
ScalarType result_type_Scalar_Tensor(Scalar scalar, const Tensor & tensor) {
    if (tensor.has_names()) {
        AT_ERROR("result_type", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(tensor));
    return at::native::result_type(scalar, tensor);
}
ScalarType result_type_Scalar_Scalar(Scalar scalar1, Scalar scalar2) {

    // DeviceGuard omitted
    return at::native::result_type(scalar1, scalar2);
}
bool can_cast(ScalarType from, ScalarType to) {

    // DeviceGuard omitted
    return at::native::can_cast(from, to);
}
ScalarType promote_types(ScalarType type1, ScalarType type2) {

    // DeviceGuard omitted
    return at::native::promote_types(type1, type2);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_lstm_cell_backward(const Tensor & grad_hy, const Tensor & grad_cy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & input_bias, const Tensor & hidden_bias, const Tensor & cx, const Tensor & cy) {
    if (grad_hy.has_names() || grad_cy.has_names() || input_gates.has_names() || hidden_gates.has_names() || input_bias.has_names() || hidden_bias.has_names() || cx.has_names() || cy.has_names()) {
        AT_ERROR("_thnn_differentiable_lstm_cell_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input_gates));
    return at::native::_thnn_differentiable_lstm_cell_backward(grad_hy, grad_cy, input_gates, hidden_gates, input_bias, hidden_bias, cx, cy);
}
std::tuple<Tensor,Tensor,Tensor,Tensor,Tensor> _thnn_differentiable_gru_cell_backward(const Tensor & grad_hy, const Tensor & input_gates, const Tensor & hidden_gates, const Tensor & hx, const Tensor & input_bias, const Tensor & hidden_bias) {
    if (grad_hy.has_names() || input_gates.has_names() || hidden_gates.has_names() || hx.has_names() || input_bias.has_names() || hidden_bias.has_names()) {
        AT_ERROR("_thnn_differentiable_gru_cell_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_hy));
    return at::native::_thnn_differentiable_gru_cell_backward(grad_hy, input_gates, hidden_gates, hx, input_bias, hidden_bias);
}
std::tuple<Tensor,Tensor,Tensor> lstm_input(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("lstm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor,Tensor> lstm_data(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("lstm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> gru_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("gru", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> gru_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("gru", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> rnn_tanh_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_tanh", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> rnn_tanh_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_tanh", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_tanh(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> rnn_relu_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_relu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> rnn_relu_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("rnn_relu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::rnn_relu(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || at::has_names(hx)) {
        AT_ERROR("lstm_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR("gru_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR("rnn_tanh_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
Tensor rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names()) {
        AT_ERROR("rnn_relu_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh);
}
std::tuple<Tensor,Tensor,Tensor> quantized_lstm(const Tensor & input, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first, c10::optional<ScalarType> dtype, bool use_dynamic) {
    if (input.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("quantized_lstm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first, dtype, use_dynamic);
}
std::tuple<Tensor,Tensor,Tensor> quantized_lstm_data(const Tensor & data, const Tensor & batch_sizes, TensorList hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, c10::optional<ScalarType> dtype, bool use_dynamic) {
    if (data.has_names() || batch_sizes.has_names() || at::has_names(hx) || at::has_names(params)) {
        AT_ERROR("quantized_lstm", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::quantized_lstm(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional, dtype, use_dynamic);
}
std::tuple<Tensor,Tensor> quantized_gru_input(const Tensor & input, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional, bool batch_first) {
    if (input.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("quantized_gru", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru(input, hx, params, has_biases, num_layers, dropout, train, bidirectional, batch_first);
}
std::tuple<Tensor,Tensor> quantized_gru_data(const Tensor & data, const Tensor & batch_sizes, const Tensor & hx, TensorList params, bool has_biases, int64_t num_layers, double dropout, bool train, bool bidirectional) {
    if (data.has_names() || batch_sizes.has_names() || hx.has_names() || at::has_names(params)) {
        AT_ERROR("quantized_gru", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::quantized_gru(data, batch_sizes, hx, params, has_biases, num_layers, dropout, train, bidirectional);
}
std::tuple<Tensor,Tensor> quantized_lstm_cell(const Tensor & input, TensorList hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names() || at::has_names(hx)) {
        AT_ERROR("quantized_lstm_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_lstm_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_gru_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR("quantized_gru_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_gru_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_rnn_relu_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR("quantized_rnn_relu_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_relu_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
Tensor quantized_rnn_tanh_cell(const Tensor & input, const Tensor & hx, const Tensor & w_ih, const Tensor & w_hh, const Tensor & b_ih, const Tensor & b_hh, const Tensor & packed_ih, const Tensor & packed_hh, const Tensor & col_offsets_ih, const Tensor & col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) {
    if (input.has_names() || hx.has_names() || w_ih.has_names() || w_hh.has_names() || b_ih.has_names() || b_hh.has_names() || packed_ih.has_names() || packed_hh.has_names() || col_offsets_ih.has_names() || col_offsets_hh.has_names()) {
        AT_ERROR("quantized_rnn_tanh_cell", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::quantized_rnn_tanh_cell(input, hx, w_ih, w_hh, b_ih, b_hh, packed_ih, packed_hh, col_offsets_ih, col_offsets_hh, scale_ih, scale_hh, zero_point_ih, zero_point_hh);
}
std::tuple<Tensor,Tensor> _pack_padded_sequence(const Tensor & input, const Tensor & lengths, bool batch_first) {
    if (input.has_names() || lengths.has_names()) {
        AT_ERROR("_pack_padded_sequence", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(input));
    return at::native::_pack_padded_sequence(input, lengths, batch_first);
}
Tensor _pack_padded_sequence_backward(const Tensor & grad, IntArrayRef input_size, const Tensor & batch_sizes, bool batch_first) {
    if (grad.has_names() || batch_sizes.has_names()) {
        AT_ERROR("_pack_padded_sequence_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad));
    return at::native::_pack_padded_sequence_backward(grad, input_size, batch_sizes, batch_first);
}
std::tuple<Tensor,Tensor> _pad_packed_sequence(const Tensor & data, const Tensor & batch_sizes, bool batch_first, Scalar padding_value, int64_t total_length) {
    if (data.has_names() || batch_sizes.has_names()) {
        AT_ERROR("_pad_packed_sequence", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(data));
    return at::native::_pad_packed_sequence(data, batch_sizes, batch_first, padding_value, total_length);
}
Tensor masked_fill_Scalar(const Tensor & self, const Tensor & mask, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor masked_fill_Tensor(const Tensor & self, const Tensor & mask, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_fill(self, mask, value);
}
Tensor masked_scatter(const Tensor & self, const Tensor & mask, const Tensor & source) {
    if (self.has_names() || mask.has_names() || source.has_names()) {
        AT_ERROR("masked_scatter", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::masked_scatter(self, mask, source);
}
Tensor index_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_add", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor index_add_dimname(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & source) {
    if (self.has_names() || index.has_names() || source.has_names()) {
        AT_ERROR("index_add", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_add(self, dim, index, source);
}
Tensor index_fill_int_Scalar(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor index_fill_int_Tensor(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor & index_fill__Dimname_Scalar(Tensor & self, Dimname dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor & index_fill__Dimname_Tensor(Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill_(self, dim, index, value);
}
Tensor index_fill_Dimname_Scalar(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor index_fill_Dimname_Tensor(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_fill(self, dim, index, value);
}
Tensor scatter_src(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor scatter_value(const Tensor & self, int64_t dim, const Tensor & index, Scalar value) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("scatter", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor scatter_dimname_src(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, src);
}
Tensor scatter_dimname_value(const Tensor & self, Dimname dim, const Tensor & index, Scalar value) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("scatter", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter(self, dim, index, value);
}
Tensor scatter_add(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_add", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor scatter_add_dimname(const Tensor & self, Dimname dim, const Tensor & index, const Tensor & src) {
    if (self.has_names() || index.has_names() || src.has_names()) {
        AT_ERROR("scatter_add", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::scatter_add(self, dim, index, src);
}
Tensor & lt__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("lt_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_(self, other);
}
Tensor & lt__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("lt_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lt_(self, other);
}
Tensor & gt__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("gt_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_(self, other);
}
Tensor & gt__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("gt_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gt_(self, other);
}
Tensor & le__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("le_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_(self, other);
}
Tensor & le__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("le_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::le_(self, other);
}
Tensor & ge__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("ge_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_(self, other);
}
Tensor & ge__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ge_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ge_(self, other);
}
Tensor & eq__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("eq_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_(self, other);
}
Tensor & eq__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("eq_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::eq_(self, other);
}
Tensor & ne__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("ne_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_(self, other);
}
Tensor & ne__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("ne_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::ne_(self, other);
}
Tensor bitwise_and_Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("bitwise_and", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and(self, other);
}
Tensor bitwise_and_Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_and", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and(self, other);
}
Tensor & bitwise_and__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("bitwise_and_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_(self, other);
}
Tensor & bitwise_and__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_and_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_and_(self, other);
}
Tensor __and___Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__and__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__and__(self, other);
}
Tensor __and___Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__and__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__and__(self, other);
}
Tensor & __iand___Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__iand__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__iand__(self, other);
}
Tensor & __iand___Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__iand__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__iand__(self, other);
}
Tensor bitwise_or_Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("bitwise_or", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or(self, other);
}
Tensor bitwise_or_Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_or", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or(self, other);
}
Tensor & bitwise_or__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("bitwise_or_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_(self, other);
}
Tensor & bitwise_or__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_or_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_or_(self, other);
}
Tensor __or___Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__or__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__or__(self, other);
}
Tensor __or___Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__or__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__or__(self, other);
}
Tensor & __ior___Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__ior__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ior__(self, other);
}
Tensor & __ior___Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ior__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ior__(self, other);
}
Tensor bitwise_xor_Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("bitwise_xor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor(self, other);
}
Tensor bitwise_xor_Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_xor", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor(self, other);
}
Tensor & bitwise_xor__Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("bitwise_xor_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_(self, other);
}
Tensor & bitwise_xor__Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("bitwise_xor_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::bitwise_xor_(self, other);
}
Tensor __xor___Scalar(const Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__xor__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__xor__(self, other);
}
Tensor __xor___Tensor(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__xor__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__xor__(self, other);
}
Tensor & __ixor___Scalar(Tensor & self, Scalar other) {
    if (self.has_names()) {
        AT_ERROR("__ixor__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ixor__(self, other);
}
Tensor & __ixor___Tensor(Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("__ixor__", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::__ixor__(self, other);
}
Tensor & atan2_(Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_(self, other);
}
Tensor & digamma_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma_(self);
}
Tensor & polygamma_(Tensor & self, int64_t n) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma_(self, n);
}
Tensor & addcdiv_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_(self, tensor1, tensor2, value);
}
Tensor & random__from(Tensor & self, int64_t from, c10::optional<int64_t> to, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_(self, from, to, generator);
}
Tensor & random__to(Tensor & self, int64_t to, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_(self, to, generator);
}
Tensor & random_(Tensor & self, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::random_(self, generator);
}
Tensor & uniform_(Tensor & self, double from, double to, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::uniform_(self, from, to, generator);
}
Tensor & cauchy_(Tensor & self, double median, double sigma, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cauchy_(self, median, sigma, generator);
}
Tensor & log_normal_(Tensor & self, double mean, double std, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_normal_(self, mean, std, generator);
}
Tensor & exponential_(Tensor & self, double lambd, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::exponential_(self, lambd, generator);
}
Tensor & geometric_(Tensor & self, double p, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::geometric_(self, p, generator);
}
Tensor & cross_out_out(Tensor & out, const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("cross_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross_out(out, self, other, dim);
}
Tensor cross(const Tensor & self, const Tensor & other, c10::optional<int64_t> dim) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("cross", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cross(self, other, dim);
}
Tensor triu(const Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR("triu", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triu(self, diagonal);
}
Tensor tril(const Tensor & self, int64_t diagonal) {
    if (self.has_names()) {
        AT_ERROR("tril", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::tril(self, diagonal);
}
Tensor & index_select_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("index_select_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select_out(out, self, dim, index);
}
Tensor index_select_dimname(const Tensor & self, Dimname dim, const Tensor & index) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("index_select", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::index_select(self, dim, index);
}
std::vector<Tensor> nonzero_numpy(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("nonzero_numpy", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nonzero_numpy(self);
}
Tensor & gather_out_dimname_out(Tensor & out, const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
    if (out.has_names() || self.has_names() || index.has_names()) {
        AT_ERROR("gather_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather_out(out, self, dim, index, sparse_grad);
}
Tensor gather_dimname(const Tensor & self, Dimname dim, const Tensor & index, bool sparse_grad) {
    if (self.has_names() || index.has_names()) {
        AT_ERROR("gather", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::gather(self, dim, index, sparse_grad);
}
Tensor _gather_sparse_backward(const Tensor & self, int64_t dim, const Tensor & index, const Tensor & grad) {
    if (self.has_names() || index.has_names() || grad.has_names()) {
        AT_ERROR("_gather_sparse_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::_gather_sparse_backward(self, dim, index, grad);
}
Tensor & addcmul_out_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_out(out, self, tensor1, tensor2, value);
}
Tensor addcmul(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul(self, tensor1, tensor2, value);
}
Tensor & addcmul_(Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcmul_(self, tensor1, tensor2, value);
}
Tensor & addcdiv_out_out(Tensor & out, const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv_out(out, self, tensor1, tensor2, value);
}
Tensor addcdiv(const Tensor & self, const Tensor & tensor1, const Tensor & tensor2, Scalar value) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::addcdiv(self, tensor1, tensor2, value);
}
std::tuple<Tensor &,Tensor &> triangular_solve_out_X(Tensor & X, Tensor & M, const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    if (X.has_names() || M.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR("triangular_solve_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve_out(X, M, self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor,Tensor> triangular_solve(const Tensor & self, const Tensor & A, bool upper, bool transpose, bool unitriangular) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR("triangular_solve", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::triangular_solve(self, A, upper, transpose, unitriangular);
}
std::tuple<Tensor &,Tensor &> symeig_out_e(Tensor & e, Tensor & V, const Tensor & self, bool eigenvectors, bool upper) {
    if (e.has_names() || V.has_names() || self.has_names()) {
        AT_ERROR("symeig_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig_out(e, V, self, eigenvectors, upper);
}
std::tuple<Tensor,Tensor> symeig(const Tensor & self, bool eigenvectors, bool upper) {
    if (self.has_names()) {
        AT_ERROR("symeig", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::symeig(self, eigenvectors, upper);
}
std::tuple<Tensor &,Tensor &,Tensor &> svd_out_U(Tensor & U, Tensor & S, Tensor & V, const Tensor & self, bool some, bool compute_uv) {
    if (U.has_names() || S.has_names() || V.has_names() || self.has_names()) {
        AT_ERROR("svd_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd_out(U, S, V, self, some, compute_uv);
}
std::tuple<Tensor,Tensor,Tensor> svd(const Tensor & self, bool some, bool compute_uv) {
    if (self.has_names()) {
        AT_ERROR("svd", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::svd(self, some, compute_uv);
}
Tensor & cholesky_out_out(Tensor & out, const Tensor & self, bool upper) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("cholesky_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_out(out, self, upper);
}
Tensor cholesky(const Tensor & self, bool upper) {
    if (self.has_names()) {
        AT_ERROR("cholesky", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky(self, upper);
}
Tensor & cholesky_solve_out_out(Tensor & out, const Tensor & self, const Tensor & input2, bool upper) {
    if (out.has_names() || self.has_names() || input2.has_names()) {
        AT_ERROR("cholesky_solve_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve_out(out, self, input2, upper);
}
Tensor cholesky_solve(const Tensor & self, const Tensor & input2, bool upper) {
    if (self.has_names() || input2.has_names()) {
        AT_ERROR("cholesky_solve", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::cholesky_solve(self, input2, upper);
}
std::tuple<Tensor,Tensor> solve(const Tensor & self, const Tensor & A) {
    if (self.has_names() || A.has_names()) {
        AT_ERROR("solve", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve(self, A);
}
std::tuple<Tensor &,Tensor &> solve_out_solution(Tensor & solution, Tensor & lu, const Tensor & self, const Tensor & A) {
    if (solution.has_names() || lu.has_names() || self.has_names() || A.has_names()) {
        AT_ERROR("solve_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::solve_out(solution, lu, self, A);
}
std::tuple<Tensor &,Tensor &> qr_out_Q(Tensor & Q, Tensor & R, const Tensor & self, bool some) {
    if (Q.has_names() || R.has_names() || self.has_names()) {
        AT_ERROR("qr_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr_out(Q, R, self, some);
}
std::tuple<Tensor,Tensor> qr(const Tensor & self, bool some) {
    if (self.has_names()) {
        AT_ERROR("qr", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::qr(self, some);
}
Tensor & lu_solve_out_out(Tensor & out, const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    if (out.has_names() || self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR("lu_solve_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve_out(out, self, LU_data, LU_pivots);
}
Tensor lu_solve(const Tensor & self, const Tensor & LU_data, const Tensor & LU_pivots) {
    if (self.has_names() || LU_data.has_names() || LU_pivots.has_names()) {
        AT_ERROR("lu_solve", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::lu_solve(self, LU_data, LU_pivots);
}
Tensor & digamma_out_out(Tensor & out, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma_out(out, self);
}
Tensor digamma(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::digamma(self);
}
Tensor & polygamma_out_out(Tensor & out, int64_t n, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma_out(out, n, self);
}
Tensor polygamma(int64_t n, const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::polygamma(n, self);
}
Tensor sign(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign(self);
}
Tensor & sign_(Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sign_(self);
}
Tensor dist(const Tensor & self, const Tensor & other, Scalar p) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("dist", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::dist(self, other, p);
}
Tensor & atan2_out_out(Tensor & out, const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2_out(out, self, other);
}
Tensor atan2(const Tensor & self, const Tensor & other) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::atan2(self, other);
}
Tensor & min_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("min_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min_out(out, self, other);
}
Tensor min_other(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("min", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::min(self, other);
}
Tensor & max_out_out(Tensor & out, const Tensor & self, const Tensor & other) {
    if (out.has_names() || self.has_names() || other.has_names()) {
        AT_ERROR("max_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max_out(out, self, other);
}
Tensor max_other(const Tensor & self, const Tensor & other) {
    if (self.has_names() || other.has_names()) {
        AT_ERROR("max", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::max(self, other);
}
std::tuple<Tensor &,Tensor &> sort_out_dimname_values(Tensor & values, Tensor & indices, const Tensor & self, Dimname dim, bool descending) {
    if (values.has_names() || indices.has_names() || self.has_names()) {
        AT_ERROR("sort_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sort_out(values, indices, self, dim, descending);
}
std::tuple<Tensor,Tensor> sort_dimname(const Tensor & self, Dimname dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR("sort", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::sort(self, dim, descending);
}
Tensor argsort(const Tensor & self, int64_t dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR("argsort", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
Tensor argsort_dimname(const Tensor & self, Dimname dim, bool descending) {
    if (self.has_names()) {
        AT_ERROR("argsort", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::argsort(self, dim, descending);
}
Tensor all(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::all(self);
}
Tensor & normal_(Tensor & self, double mean, double std, Generator generator) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::normal_(self, mean, std, generator);
}
Tensor & normal_out_Tensor_float_out(Tensor & out, const Tensor & mean, double std, Generator generator) {
    if (out.has_names() || mean.has_names()) {
        AT_ERROR("normal_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, generator);
}
Tensor normal_Tensor_float(const Tensor & mean, double std, Generator generator) {
    if (mean.has_names()) {
        AT_ERROR("normal", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::normal(mean, std, generator);
}
Tensor & normal_out_float_Tensor_out(Tensor & out, double mean, const Tensor & std, Generator generator) {
    if (out.has_names() || std.has_names()) {
        AT_ERROR("normal_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, generator);
}
Tensor normal_float_Tensor(double mean, const Tensor & std, Generator generator) {
    if (std.has_names()) {
        AT_ERROR("normal", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(std));
    return at::native::normal(mean, std, generator);
}
Tensor & normal_out_Tensor_Tensor_out(Tensor & out, const Tensor & mean, const Tensor & std, Generator generator) {
    if (out.has_names() || mean.has_names() || std.has_names()) {
        AT_ERROR("normal_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, generator);
}
Tensor normal_Tensor_Tensor(const Tensor & mean, const Tensor & std, Generator generator) {
    if (mean.has_names() || std.has_names()) {
        AT_ERROR("normal", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(mean));
    return at::native::normal(mean, std, generator);
}
Tensor normal_float_float(double mean, double std, IntArrayRef size, Generator generator, const TensorOptions & options) {

    const DeviceGuard device_guard(options.device());
    return at::native::normal(mean, std, size, generator, options);
}
Tensor & normal_out_float_float_out(Tensor & out, double mean, double std, IntArrayRef size, Generator generator) {
    if (out.has_names()) {
        AT_ERROR("normal_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(out));
    return at::native::normal_out(out, mean, std, size, generator);
}
Tensor alias(const Tensor & self) {

    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::alias(self);
}
Tensor & mse_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss_out(out, self, target, reduction);
}
Tensor mse_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("mse_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::mse_loss(self, target, reduction);
}
Tensor & l1_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_out(out, self, target, reduction);
}
Tensor l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss(self, target, reduction);
}
Tensor l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("l1_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & multilabel_margin_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss_out(out, self, target, reduction);
}
Tensor multilabel_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("multilabel_margin_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::multilabel_margin_loss(self, target, reduction);
}
Tensor & nll_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss_out(out, self, target, weight, reduction, ignore_index);
}
Tensor nll_loss(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss(self, target, weight, reduction, ignore_index);
}
Tensor & nll_loss2d_out_out(Tensor & out, const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (out.has_names() || self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d_out(out, self, target, weight, reduction, ignore_index);
}
Tensor nll_loss2d(const Tensor & self, const Tensor & target, const Tensor & weight, int64_t reduction, int64_t ignore_index) {
    if (self.has_names() || target.has_names() || weight.has_names()) {
        AT_ERROR("nll_loss2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::nll_loss2d(self, target, weight, reduction, ignore_index);
}
Tensor smooth_l1_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss(self, target, reduction);
}
Tensor smooth_l1_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("smooth_l1_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::smooth_l1_loss_backward(grad_output, self, target, reduction);
}
Tensor & soft_margin_loss_out_out(Tensor & out, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (out.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_out(out, self, target, reduction);
}
Tensor soft_margin_loss(const Tensor & self, const Tensor & target, int64_t reduction) {
    if (self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss(self, target, reduction);
}
Tensor & soft_margin_loss_backward_out_grad_input(Tensor & grad_input, const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_input.has_names() || grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss_backward_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_backward_out(grad_input, grad_output, self, target, reduction);
}
Tensor soft_margin_loss_backward(const Tensor & grad_output, const Tensor & self, const Tensor & target, int64_t reduction) {
    if (grad_output.has_names() || self.has_names() || target.has_names()) {
        AT_ERROR("soft_margin_loss_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::soft_margin_loss_backward(grad_output, self, target, reduction);
}
Tensor elu_backward(const Tensor & grad_output, Scalar alpha, Scalar scale, Scalar input_scale, const Tensor & output) {
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("elu_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::elu_backward(grad_output, alpha, scale, input_scale, output);
}
Tensor & hardsigmoid_out_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("hardsigmoid_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardsigmoid_out(out, self);
}
Tensor & hardsigmoid_(Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("hardsigmoid_", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardsigmoid_(self);
}
Tensor hardsigmoid_backward(const Tensor & grad_output, const Tensor & self) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("hardsigmoid_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardsigmoid_backward(grad_output, self);
}
Tensor hardtanh_backward(const Tensor & grad_output, const Tensor & self, Scalar min_val, Scalar max_val) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("hardtanh_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardtanh_backward(grad_output, self, min_val, max_val);
}
Tensor & hardswish_out_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("hardswish_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish_out(out, self);
}
Tensor hardswish_backward(const Tensor & grad_output, const Tensor & self) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("hardswish_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::hardswish_backward(grad_output, self);
}
Tensor leaky_relu_backward(const Tensor & grad_output, const Tensor & self, Scalar negative_slope, bool self_is_result) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("leaky_relu_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::leaky_relu_backward(grad_output, self, negative_slope, self_is_result);
}
Tensor & log_sigmoid_out_out(Tensor & out, const Tensor & self) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("log_sigmoid_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid_out(out, self);
}
Tensor log_sigmoid(const Tensor & self) {
    if (self.has_names()) {
        AT_ERROR("log_sigmoid", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::log_sigmoid(self);
}
Tensor rrelu_with_noise_backward(const Tensor & grad_output, const Tensor & self, const Tensor & noise, Scalar lower, Scalar upper, bool training, bool self_is_result) {
    if (grad_output.has_names() || self.has_names() || noise.has_names()) {
        AT_ERROR("rrelu_with_noise_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::rrelu_with_noise_backward(grad_output, self, noise, lower, upper, training, self_is_result);
}
Tensor & softplus_out_out(Tensor & out, const Tensor & self, Scalar beta, Scalar threshold) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("softplus_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_out(out, self, beta, threshold);
}
Tensor softplus(const Tensor & self, Scalar beta, Scalar threshold) {
    if (self.has_names()) {
        AT_ERROR("softplus", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus(self, beta, threshold);
}
Tensor softplus_backward(const Tensor & grad_output, const Tensor & self, Scalar beta, Scalar threshold, const Tensor & output) {
    if (grad_output.has_names() || self.has_names() || output.has_names()) {
        AT_ERROR("softplus_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softplus_backward(grad_output, self, beta, threshold, output);
}
Tensor & softshrink_out_out(Tensor & out, const Tensor & self, Scalar lambd) {
    if (out.has_names() || self.has_names()) {
        AT_ERROR("softshrink_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_out(out, self, lambd);
}
Tensor softshrink(const Tensor & self, Scalar lambd) {
    if (self.has_names()) {
        AT_ERROR("softshrink", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink(self, lambd);
}
Tensor softshrink_backward(const Tensor & grad_output, const Tensor & self, Scalar lambd) {
    if (grad_output.has_names() || self.has_names()) {
        AT_ERROR("softshrink_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::softshrink_backward(grad_output, self, lambd);
}
Tensor adaptive_avg_pool2d(const Tensor & self, IntArrayRef output_size) {
    if (self.has_names()) {
        AT_ERROR("adaptive_avg_pool2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::adaptive_avg_pool2d(self, output_size);
}
Tensor sigmoid_backward(const Tensor & grad_output, const Tensor & output) {
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("sigmoid_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::sigmoid_backward(grad_output, output);
}
Tensor tanh_backward(const Tensor & grad_output, const Tensor & output) {
    if (grad_output.has_names() || output.has_names()) {
        AT_ERROR("tanh_backward", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(grad_output));
    return at::native::tanh_backward(grad_output, output);
}
Tensor & thnn_conv2d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor thnn_conv2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv2d(self, weight, kernel_size, bias, stride, padding);
}
Tensor & thnn_conv_depthwise2d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d_out(out, self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor thnn_conv_depthwise2d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding, IntArrayRef dilation) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("thnn_conv_depthwise2d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::thnn_conv_depthwise2d(self, weight, kernel_size, bias, stride, padding, dilation);
}
Tensor & slow_conv3d_out_out(Tensor & out, const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (out.has_names() || self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv3d_out", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d_out(out, self, weight, kernel_size, bias, stride, padding);
}
Tensor slow_conv3d(const Tensor & self, const Tensor & weight, IntArrayRef kernel_size, const Tensor & bias, IntArrayRef stride, IntArrayRef padding) {
    if (self.has_names() || weight.has_names() || bias.has_names()) {
        AT_ERROR("slow_conv3d", named_tensors_unsupported_error);
    }
    const OptionalDeviceGuard device_guard(device_of(self));
    return at::native::slow_conv3d(self, weight, kernel_size, bias, stride, padding);
}
Tensor isfinite(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::isfinite(self);
}
Tensor isinf(const Tensor & self) {

    // DeviceGuard omitted
    return at::native::isinf(self);
}

}  // namespace TypeDefault

namespace {
auto registerer = torch::import()
  .def("aten::_cast_Byte(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Byte", &TypeDefault::_cast_Byte)
  .def("aten::_cast_Char(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Char", &TypeDefault::_cast_Char)
  .def("aten::_cast_Double(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Double", &TypeDefault::_cast_Double)
  .def("aten::_cast_Float(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Float", &TypeDefault::_cast_Float)
  .def("aten::_cast_Int(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Int", &TypeDefault::_cast_Int)
  .def("aten::_cast_Long(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Long", &TypeDefault::_cast_Long)
  .def("aten::_cast_Short(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Short", &TypeDefault::_cast_Short)
  .def("aten::_cast_Half(Tensor self, bool non_blocking=False) -> Tensor")
  .impl("aten::_cast_Half", &TypeDefault::_cast_Half)
  .def("aten::rename_(Tensor(a!) self, Dimname[]? names) -> Tensor(a!)")
  .impl("aten::rename_",
        CppFunction::makeUnboxedOnly(TypeDefault::rename_))
  .def("aten::rename(Tensor(a) self, Dimname[]? names) -> Tensor(a)")
  .impl("aten::rename",
        CppFunction::makeUnboxedOnly(TypeDefault::rename))
  .def("aten::align_to(Tensor(a) self, Dimname[] names) -> Tensor(a)")
  .impl("aten::align_to",
        CppFunction::makeUnboxedOnly(TypeDefault::align_to))
  .def("aten::align_to.ellipsis_idx(Tensor(a) self, Dimname[] order, int ellipsis_idx) -> Tensor(a)")
  .impl("aten::align_to.ellipsis_idx",
        CppFunction::makeUnboxedOnly(TypeDefault::align_to_ellipsis_idx))
  .def("aten::align_as(Tensor self, Tensor other) -> Tensor")
  .impl("aten::align_as",
        CppFunction::makeUnboxedOnly(TypeDefault::align_as))
  .def("aten::align_tensors(Tensor[] tensors) -> Tensor[]")
  .impl("aten::align_tensors",
        CppFunction::makeUnboxedOnly(TypeDefault::align_tensors))
  .def("aten::refine_names(Tensor(a) self, Dimname[] names) -> Tensor(a)")
  .impl("aten::refine_names",
        CppFunction::makeUnboxedOnly(TypeDefault::refine_names))
  .def("aten::unflatten.Dimname(Tensor self, Dimname dim, int[] sizes, Dimname[] names) -> Tensor")
  .impl("aten::unflatten.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::unflatten_Dimname))
  .def("aten::unflatten.int(Tensor self, int dim, int[] sizes, Dimname[] names) -> Tensor")
  .impl("aten::unflatten.int",
        CppFunction::makeUnboxedOnly(TypeDefault::unflatten_int))
  .def("aten::_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> bool")
  .def("aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)")
  .def("aten::_use_cudnn_rnn_flatten_weight() -> bool")
  .impl("aten::_use_cudnn_rnn_flatten_weight", &TypeDefault::_use_cudnn_rnn_flatten_weight)
  .def("aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> Tensor")
  .def("aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
  .def("aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])")
  .def("aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
  .def("aten::_debug_has_internal_overlap(Tensor self) -> int")
  .impl("aten::_debug_has_internal_overlap", &TypeDefault::_debug_has_internal_overlap)
  .def("aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)")
  .def("aten::_masked_scale(Tensor self, Tensor mask, float scale) -> Tensor")
  .def("aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, ScalarType? dtype) -> (Tensor, Tensor)")
  .impl("aten::_sobol_engine_draw",
        CppFunction::makeUnboxedOnly(TypeDefault::_sobol_engine_draw))
  .def("aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> Tensor(a!)")
  .impl("aten::_sobol_engine_ff_",
        CppFunction::makeUnboxedOnly(TypeDefault::_sobol_engine_ff_))
  .def("aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> Tensor(a!)")
  .impl("aten::_sobol_engine_scramble_",
        CppFunction::makeUnboxedOnly(TypeDefault::_sobol_engine_scramble_))
  .def("aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> Tensor(a!)")
  .impl("aten::_sobol_engine_initialize_state_",
        CppFunction::makeUnboxedOnly(TypeDefault::_sobol_engine_initialize_state_))
  .def("aten::_reshape_from_tensor(Tensor self, Tensor shape) -> Tensor")
  .impl("aten::_reshape_from_tensor", &TypeDefault::_reshape_from_tensor)
  .def("aten::_shape_as_tensor(Tensor self) -> Tensor")
  .impl("aten::_shape_as_tensor", &TypeDefault::_shape_as_tensor)
  .def("aten::dropout(Tensor input, float p, bool train) -> Tensor")
  .impl("aten::dropout", &TypeDefault::dropout)
  .def("aten::dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
  .impl("aten::dropout_",
        CppFunction::makeUnboxedOnly(TypeDefault::dropout_))
  .def("aten::feature_dropout(Tensor input, float p, bool train) -> Tensor")
  .impl("aten::feature_dropout", &TypeDefault::feature_dropout)
  .def("aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
  .impl("aten::feature_dropout_",
        CppFunction::makeUnboxedOnly(TypeDefault::feature_dropout_))
  .def("aten::alpha_dropout(Tensor input, float p, bool train) -> Tensor")
  .impl("aten::alpha_dropout", &TypeDefault::alpha_dropout)
  .def("aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
  .impl("aten::alpha_dropout_",
        CppFunction::makeUnboxedOnly(TypeDefault::alpha_dropout_))
  .def("aten::feature_alpha_dropout(Tensor input, float p, bool train) -> Tensor")
  .impl("aten::feature_alpha_dropout", &TypeDefault::feature_alpha_dropout)
  .def("aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> Tensor(a!)")
  .impl("aten::feature_alpha_dropout_",
        CppFunction::makeUnboxedOnly(TypeDefault::feature_alpha_dropout_))
  .def("aten::abs(Tensor self) -> Tensor")
  .impl("aten::abs", &TypeDefault::abs)
  .def("aten::abs_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::abs_",
        CppFunction::makeUnboxedOnly(TypeDefault::abs_))
  .def("aten::abs.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::abs.out",
        CppFunction::makeUnboxedOnly(TypeDefault::abs_out_out))
  .def("aten::angle(Tensor self) -> Tensor")
  .impl("aten::angle", &TypeDefault::angle)
  .def("aten::angle.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::angle.out",
        CppFunction::makeUnboxedOnly(TypeDefault::angle_out_out))
  .def("aten::real(Tensor self) -> Tensor")
  .impl("aten::real", &TypeDefault::real)
  .def("aten::imag(Tensor self) -> Tensor")
  .impl("aten::imag", &TypeDefault::imag)
  .def("aten::copy_real(Tensor self) -> Tensor")
  .impl("aten::copy_real", &TypeDefault::copy_real)
  .def("aten::copy_real.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::copy_real.out",
        CppFunction::makeUnboxedOnly(TypeDefault::copy_real_out_out))
  .def("aten::copy_imag(Tensor self) -> Tensor")
  .impl("aten::copy_imag", &TypeDefault::copy_imag)
  .def("aten::copy_imag.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::copy_imag.out",
        CppFunction::makeUnboxedOnly(TypeDefault::copy_imag_out_out))
  .def("aten::conj(Tensor self) -> Tensor")
  .impl("aten::conj", &TypeDefault::conj)
  .def("aten::conj.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::conj.out",
        CppFunction::makeUnboxedOnly(TypeDefault::conj_out_out))
  .def("aten::acos(Tensor self) -> Tensor")
  .impl("aten::acos", &TypeDefault::acos)
  .def("aten::acos_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::acos_",
        CppFunction::makeUnboxedOnly(TypeDefault::acos_))
  .def("aten::acos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::acos.out",
        CppFunction::makeUnboxedOnly(TypeDefault::acos_out_out))
  .def("aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, bool ceil_mode=False, bool count_include_pad=True) -> Tensor")
  .impl("aten::avg_pool1d",
        CppFunction::makeUnboxedOnly(TypeDefault::avg_pool1d))
  .def("aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> Tensor")
  .impl("aten::adaptive_avg_pool1d",
        CppFunction::makeUnboxedOnly(TypeDefault::adaptive_avg_pool1d))
  .def("aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)")
  .impl("aten::adaptive_max_pool1d",
        CppFunction::makeUnboxedOnly(TypeDefault::adaptive_max_pool1d))
  .def("aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
  .def("aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
  .impl("aten::add.Scalar", &TypeDefault::add_Scalar)
  .def("aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)")
  .impl("aten::add_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::add__Scalar))
  .def("aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .def("aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .impl("aten::addr", &TypeDefault::addr)
  .def("aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .impl("aten::addr_",
        CppFunction::makeUnboxedOnly(TypeDefault::addr_))
  .def("aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::addr.out",
        CppFunction::makeUnboxedOnly(TypeDefault::addr_out_out))
  .def("aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> Tensor")
  .impl("aten::affine_grid_generator",
        CppFunction::makeUnboxedOnly(TypeDefault::affine_grid_generator))
  .def("aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> Tensor")
  .impl("aten::affine_grid_generator_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::affine_grid_generator_backward))
  .def("aten::all.dim(Tensor self, int dim, bool keepdim=False) -> Tensor")
  .impl("aten::all.dim", &TypeDefault::all_dim)
  .def("aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::all.out",
        CppFunction::makeUnboxedOnly(TypeDefault::all_out_out))
  .def("aten::all.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor")
  .impl("aten::all.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::all_dimname))
  .def("aten::all.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::all.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::all_out_dimname_out))
  .def("aten::allclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> bool")
  .impl("aten::allclose", &TypeDefault::allclose)
  .def("aten::any.dim(Tensor self, int dim, bool keepdim=False) -> Tensor")
  .impl("aten::any.dim", &TypeDefault::any_dim)
  .def("aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::any.out",
        CppFunction::makeUnboxedOnly(TypeDefault::any_out_out))
  .def("aten::any.dimname(Tensor self, Dimname dim, bool keepdim=False) -> Tensor")
  .impl("aten::any.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::any_dimname))
  .def("aten::any.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::any.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::any_out_dimname_out))
  .def("aten::arange(Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::arange",
        CppFunction::makeUnboxedOnly(TypeDefault::arange))
  .def("aten::arange.start(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::arange.start",
        CppFunction::makeUnboxedOnly(TypeDefault::arange_start))
  .def("aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::arange.start_step",
        CppFunction::makeUnboxedOnly(TypeDefault::arange_start_step))
  .def("aten::arange.out(Scalar end, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::arange.out",
        CppFunction::makeUnboxedOnly(TypeDefault::arange_out_out))
  .def("aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::_dim_arange(Tensor like, int dim) -> Tensor")
  .impl("aten::_dim_arange", &TypeDefault::_dim_arange)
  .def("aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> Tensor")
  .def("aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> Tensor")
  .def("aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a)")
  .def("aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> Tensor(a!)")
  .impl("aten::as_strided_",
        CppFunction::makeUnboxedOnly(TypeDefault::as_strided_))
  .def("aten::asin(Tensor self) -> Tensor")
  .impl("aten::asin", &TypeDefault::asin)
  .def("aten::asin_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::asin_",
        CppFunction::makeUnboxedOnly(TypeDefault::asin_))
  .def("aten::asin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::asin.out",
        CppFunction::makeUnboxedOnly(TypeDefault::asin_out_out))
  .def("aten::atan(Tensor self) -> Tensor")
  .impl("aten::atan", &TypeDefault::atan)
  .def("aten::atan_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::atan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .def("aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .impl("aten::_baddbmm_mkl_",
        CppFunction::makeUnboxedOnly(TypeDefault::_baddbmm_mkl_))
  .def("aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bartlett_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::bartlett_window",
        CppFunction::makeUnboxedOnly(TypeDefault::bartlett_window))
  .def("aten::bartlett_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::bartlett_window.periodic",
        CppFunction::makeUnboxedOnly(TypeDefault::bartlett_window_periodic))
  .def("aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> Tensor")
  .impl("aten::batch_norm",
        CppFunction::makeUnboxedOnly(TypeDefault::batch_norm))
  .def("aten::quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> Tensor")
  .def("aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)")
  .impl("aten::_batch_norm_impl_index",
        CppFunction::makeUnboxedOnly(TypeDefault::_batch_norm_impl_index))
  .def("aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)")
  .impl("aten::_batch_norm_impl_index_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_batch_norm_impl_index_backward))
  .def("aten::bernoulli(Tensor self, *, Generator? generator=None) -> Tensor")
  .impl("aten::bernoulli",
        CppFunction::makeUnboxedOnly(TypeDefault::bernoulli))
  .def("aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::bernoulli.out",
        CppFunction::makeUnboxedOnly(TypeDefault::bernoulli_out_out))
  .def("aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> Tensor(a!)")
  .def("aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> Tensor(a!)")
  .def("aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> Tensor")
  .impl("aten::bernoulli.p",
        CppFunction::makeUnboxedOnly(TypeDefault::bernoulli_p))
  .def("aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> Tensor")
  .impl("aten::bilinear",
        CppFunction::makeUnboxedOnly(TypeDefault::bilinear))
  .def("aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor")
  .def("aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean) -> Tensor")
  .def("aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor")
  .impl("aten::binary_cross_entropy_with_logits",
        CppFunction::makeUnboxedOnly(TypeDefault::binary_cross_entropy_with_logits))
  .def("aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=Mean) -> Tensor")
  .impl("aten::binary_cross_entropy_with_logits_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::binary_cross_entropy_with_logits_backward))
  .def("aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> Tensor")
  .def("aten::bitwise_not(Tensor self) -> Tensor")
  .impl("aten::bitwise_not", &TypeDefault::bitwise_not)
  .def("aten::bitwise_not_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::bitwise_not_",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_not_))
  .def("aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::logical_not(Tensor self) -> Tensor")
  .impl("aten::logical_not",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_not))
  .def("aten::logical_not_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::logical_not_",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_not_))
  .def("aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::logical_xor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::logical_xor",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_xor))
  .def("aten::logical_xor_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::logical_xor_",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_xor_))
  .def("aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::logical_and(Tensor self, Tensor other) -> Tensor")
  .impl("aten::logical_and",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_and))
  .def("aten::logical_and_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::logical_and_",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_and_))
  .def("aten::logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::logical_or(Tensor self, Tensor other) -> Tensor")
  .impl("aten::logical_or",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_or))
  .def("aten::logical_or_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::logical_or_",
        CppFunction::makeUnboxedOnly(TypeDefault::logical_or_))
  .def("aten::logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::blackman_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::blackman_window",
        CppFunction::makeUnboxedOnly(TypeDefault::blackman_window))
  .def("aten::blackman_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::blackman_window.periodic",
        CppFunction::makeUnboxedOnly(TypeDefault::blackman_window_periodic))
  .def("aten::bmm(Tensor self, Tensor mat2) -> Tensor")
  .def("aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::broadcast_tensors(Tensor[] tensors) -> Tensor[]")
  .impl("aten::broadcast_tensors",
        CppFunction::makeUnboxedOnly(TypeDefault::broadcast_tensors))
  .def("aten::cat(Tensor[] tensors, int dim=0) -> Tensor")
  .impl("aten::cat",
        CppFunction::makeUnboxedOnly(TypeDefault::cat))
  .def("aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cat.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cat_out_out))
  .def("aten::cat.names(Tensor[] tensors, Dimname dim) -> Tensor")
  .impl("aten::cat.names",
        CppFunction::makeUnboxedOnly(TypeDefault::cat_names))
  .def("aten::cat.names_out(Tensor[] tensors, Dimname dim, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cat.names_out",
        CppFunction::makeUnboxedOnly(TypeDefault::cat_out_names_out))
  .def("aten::ceil(Tensor self) -> Tensor")
  .impl("aten::ceil", &TypeDefault::ceil)
  .def("aten::ceil_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::ceil_",
        CppFunction::makeUnboxedOnly(TypeDefault::ceil_))
  .def("aten::ceil.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::chain_matmul(Tensor[] matrices) -> Tensor")
  .impl("aten::chain_matmul",
        CppFunction::makeUnboxedOnly(TypeDefault::chain_matmul))
  .def("aten::chunk(Tensor(a) self, int chunks, int dim=0) -> Tensor(a)[]")
  .impl("aten::chunk",
        CppFunction::makeUnboxedOnly(TypeDefault::chunk))
  .def("aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> Tensor")
  .def("aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> Tensor(a!)")
  .def("aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::clamp_max(Tensor self, Scalar max) -> Tensor")
  .impl("aten::clamp_max", &TypeDefault::clamp_max)
  .def("aten::clamp_max_(Tensor(a!) self, Scalar max) -> Tensor(a!)")
  .def("aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::clamp_min(Tensor self, Scalar min) -> Tensor")
  .impl("aten::clamp_min", &TypeDefault::clamp_min)
  .def("aten::clamp_min_(Tensor(a!) self, Scalar min) -> Tensor(a!)")
  .def("aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::cudnn_is_acceptable(Tensor self) -> bool")
  .impl("aten::cudnn_is_acceptable", &TypeDefault::cudnn_is_acceptable)
  .def("aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> Tensor")
  .impl("aten::constant_pad_nd",
        CppFunction::makeUnboxedOnly(TypeDefault::constant_pad_nd))
  .def("aten::contiguous(Tensor self, *, MemoryFormat memory_format=contiguous_format) -> Tensor")
  .impl("aten::contiguous",
        CppFunction::makeUnboxedOnly(TypeDefault::contiguous))
  .def("aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor")
  .impl("aten::convolution",
        CppFunction::makeUnboxedOnly(TypeDefault::convolution))
  .def("aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> Tensor")
  .impl("aten::convolution_overrideable",
        CppFunction::makeUnboxedOnly(TypeDefault::convolution_overrideable))
  .def("aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .impl("aten::convolution_backward_overrideable",
        CppFunction::makeUnboxedOnly(TypeDefault::convolution_backward_overrideable))
  .def("aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> Tensor")
  .impl("aten::_convolution",
        CppFunction::makeUnboxedOnly(TypeDefault::_convolution))
  .def("aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> Tensor")
  .impl("aten::_convolution_nogroup",
        CppFunction::makeUnboxedOnly(TypeDefault::_convolution_nogroup))
  .def("aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .impl("aten::_convolution_double_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_convolution_double_backward))
  .def("aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] dilation=1, int groups=1) -> Tensor")
  .impl("aten::conv1d",
        CppFunction::makeUnboxedOnly(TypeDefault::conv1d))
  .def("aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, int groups=1) -> Tensor")
  .impl("aten::conv2d",
        CppFunction::makeUnboxedOnly(TypeDefault::conv2d))
  .def("aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1, int groups=1) -> Tensor")
  .impl("aten::conv3d",
        CppFunction::makeUnboxedOnly(TypeDefault::conv3d))
  .def("aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> Tensor")
  .impl("aten::conv_tbc", &TypeDefault::conv_tbc)
  .def("aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor)")
  .impl("aten::conv_tbc_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::conv_tbc_backward))
  .def("aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=1, int[1] padding=0, int[1] output_padding=0, int groups=1, int[1] dilation=1) -> Tensor")
  .impl("aten::conv_transpose1d",
        CppFunction::makeUnboxedOnly(TypeDefault::conv_transpose1d))
  .def("aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int groups=1, int[2] dilation=1) -> Tensor")
  .impl("aten::conv_transpose2d.input",
        CppFunction::makeUnboxedOnly(TypeDefault::conv_transpose2d_input))
  .def("aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int groups=1, int[3] dilation=1) -> Tensor")
  .impl("aten::conv_transpose3d.input",
        CppFunction::makeUnboxedOnly(TypeDefault::conv_transpose3d_input))
  .def("aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> Tensor")
  .def("aten::cos(Tensor self) -> Tensor")
  .impl("aten::cos", &TypeDefault::cos)
  .def("aten::cos_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::cos.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::cosh(Tensor self) -> Tensor")
  .impl("aten::cosh", &TypeDefault::cosh)
  .def("aten::cosh_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::cosh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor")
  .impl("aten::cosine_embedding_loss", &TypeDefault::cosine_embedding_loss)
  .def("aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> Tensor grid")
  .def("aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> Tensor grad_theta")
  .def("aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)")
  .def("aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)")
  .def("aten::cudnn_convolution.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)")
  .def("aten::cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution_transpose.deprecated(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[2] output_mask) -> (Tensor, Tensor)")
  .def("aten::cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> Tensor output")
  .def("aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)")
  .def("aten::cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)")
  .impl("aten::cummax",
        CppFunction::makeUnboxedOnly(TypeDefault::cummax))
  .def("aten::cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::cummax.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cummax_out_out))
  .def("aten::cummax.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)")
  .impl("aten::cummax.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::cummax_dimname))
  .def("aten::cummax.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::cummax.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::cummax_out_dimname_out))
  .def("aten::_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()")
  .def("aten::cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)")
  .impl("aten::cummin",
        CppFunction::makeUnboxedOnly(TypeDefault::cummin))
  .def("aten::cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::cummin.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cummin_out_out))
  .def("aten::cummin.dimname(Tensor self, Dimname dim) -> (Tensor values, Tensor indices)")
  .impl("aten::cummin.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::cummin_dimname))
  .def("aten::cummin.dimname_out(Tensor self, Dimname dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::cummin.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::cummin_out_dimname_out))
  .def("aten::_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()")
  .def("aten::cumprod(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::cumprod",
        CppFunction::makeUnboxedOnly(TypeDefault::cumprod))
  .def("aten::cumprod.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cumprod.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cumprod_out_out))
  .def("aten::cumprod.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::cumprod.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::cumprod_dimname))
  .def("aten::cumprod.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cumprod.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::cumprod_out_dimname_out))
  .def("aten::cumsum(Tensor self, int dim, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::cumsum",
        CppFunction::makeUnboxedOnly(TypeDefault::cumsum))
  .def("aten::cumsum.out(Tensor self, int dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cumsum.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cumsum_out_out))
  .def("aten::cumsum.dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::cumsum.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::cumsum_dimname))
  .def("aten::cumsum.dimname_out(Tensor self, Dimname dim, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cumsum.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::cumsum_out_dimname_out))
  .def("aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor")
  .impl("aten::ctc_loss.IntList",
        CppFunction::makeUnboxedOnly(TypeDefault::ctc_loss_IntList))
  .def("aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=Mean, bool zero_infinity=False) -> Tensor")
  .impl("aten::ctc_loss.Tensor", &TypeDefault::ctc_loss_Tensor)
  .def("aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)")
  .def("aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> Tensor")
  .def("aten::det(Tensor self) -> Tensor")
  .impl("aten::det", &TypeDefault::det)
  .def("aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> Tensor")
  .impl("aten::diag_embed", &TypeDefault::diag_embed)
  .def("aten::diagflat(Tensor self, int offset=0) -> Tensor")
  .impl("aten::diagflat", &TypeDefault::diagflat)
  .def("aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> Tensor(a)")
  .impl("aten::diagonal",
        CppFunction::makeUnboxedOnly(TypeDefault::diagonal))
  .def("aten::diagonal.Dimname(Tensor(a) self, *, Dimname outdim, Dimname dim1, Dimname dim2, int offset=0) -> Tensor(a)")
  .impl("aten::diagonal.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::diagonal_Dimname))
  .def("aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> Tensor(a!)")
  .impl("aten::fill_diagonal_",
        CppFunction::makeUnboxedOnly(TypeDefault::fill_diagonal_))
  .def("aten::div.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::div_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::div.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::div.Scalar", &TypeDefault::div_Scalar)
  .def("aten::div_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::div_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::div__Scalar))
  .def("aten::dot(Tensor self, Tensor tensor) -> Tensor")
  .def("aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::dot.out",
        CppFunction::makeUnboxedOnly(TypeDefault::dot_out_out))
  .def("aten::einsum(str equation, Tensor[] tensors) -> Tensor")
  .impl("aten::einsum",
        CppFunction::makeUnboxedOnly(TypeDefault::einsum))
  .def("aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> Tensor")
  .impl("aten::embedding", &TypeDefault::embedding)
  .def("aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> Tensor")
  .impl("aten::embedding_backward", &TypeDefault::embedding_backward)
  .def("aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor")
  .def("aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> Tensor(a!)")
  .def("aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> Tensor")
  .impl("aten::embedding_sparse_backward", &TypeDefault::embedding_sparse_backward)
  .def("aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)")
  .impl("aten::embedding_bag",
        CppFunction::makeUnboxedOnly(TypeDefault::embedding_bag))
  .def("aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)")
  .def("aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> Tensor")
  .impl("aten::_embedding_bag_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_embedding_bag_backward))
  .def("aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor")
  .impl("aten::_embedding_bag_sparse_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_embedding_bag_sparse_backward))
  .def("aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> Tensor")
  .def("aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> Tensor")
  .def("aten::empty.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::empty.names",
        CppFunction::makeUnboxedOnly(TypeDefault::empty_names))
  .def("aten::empty.memory_format(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .def("aten::new_empty(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::new_empty",
        CppFunction::makeUnboxedOnly(TypeDefault::new_empty))
  .def("aten::new_full(Tensor self, int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::new_full",
        CppFunction::makeUnboxedOnly(TypeDefault::new_full))
  .def("aten::new_zeros(Tensor self, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::new_zeros",
        CppFunction::makeUnboxedOnly(TypeDefault::new_zeros))
  .def("aten::_empty_affine_quantized(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, float scale=1, int zero_point=0, MemoryFormat? memory_format=contiguous_format) -> Tensor")
  .def("aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=contiguous_format) -> Tensor")
  .def("aten::empty.out(int[] size, *, MemoryFormat? memory_format=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::empty.out",
        CppFunction::makeUnboxedOnly(TypeDefault::empty_out_out))
  .def("aten::empty_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::empty_like",
        CppFunction::makeUnboxedOnly(TypeDefault::empty_like))
  .def("aten::empty_strided(int[] size, int[] stride, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .def("aten::erf(Tensor self) -> Tensor")
  .impl("aten::erf", &TypeDefault::erf)
  .def("aten::erf_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::erf.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::erfc(Tensor self) -> Tensor")
  .impl("aten::erfc", &TypeDefault::erfc)
  .def("aten::erfc_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::erfc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::exp(Tensor self) -> Tensor")
  .impl("aten::exp", &TypeDefault::exp)
  .def("aten::exp_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::exp.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::expm1(Tensor self) -> Tensor")
  .impl("aten::expm1", &TypeDefault::expm1)
  .def("aten::expm1_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::expm1_",
        CppFunction::makeUnboxedOnly(TypeDefault::expm1_))
  .def("aten::expm1.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> Tensor(a)")
  .impl("aten::expand",
        CppFunction::makeUnboxedOnly(TypeDefault::expand))
  .def("aten::expand_as(Tensor self, Tensor other) -> Tensor")
  .impl("aten::expand_as", &TypeDefault::expand_as)
  .def("aten::eye(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::eye",
        CppFunction::makeUnboxedOnly(TypeDefault::eye))
  .def("aten::eye.m(int n, int m, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::eye.m",
        CppFunction::makeUnboxedOnly(TypeDefault::eye_m))
  .def("aten::eye.out(int n, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::flatten.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> Tensor")
  .impl("aten::flatten.using_ints", &TypeDefault::flatten_using_ints)
  .def("aten::flatten.named_out_dim(Tensor self, int start_dim, int end_dim, Dimname out_dim) -> Tensor")
  .impl("aten::flatten.named_out_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::flatten_named_out_dim))
  .def("aten::flatten.using_names(Tensor self, Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor")
  .impl("aten::flatten.using_names",
        CppFunction::makeUnboxedOnly(TypeDefault::flatten_using_names))
  .def("aten::flatten.DimnameList(Tensor self, Dimname[] dims, Dimname out_dim) -> Tensor")
  .impl("aten::flatten.DimnameList",
        CppFunction::makeUnboxedOnly(TypeDefault::flatten_DimnameList))
  .def("aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> Tensor(a!)")
  .impl("aten::fill_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::fill__Scalar))
  .def("aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> Tensor(a!)")
  .impl("aten::fill_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::fill__Tensor))
  .def("aten::floor(Tensor self) -> Tensor")
  .impl("aten::floor", &TypeDefault::floor)
  .def("aten::floor_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::floor_",
        CppFunction::makeUnboxedOnly(TypeDefault::floor_))
  .def("aten::floor.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::floor_divide(Tensor self, Tensor other) -> Tensor")
  .def("aten::floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::floor_divide.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::floor_divide.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::floor_divide_Scalar))
  .def("aten::floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::floor_divide_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::floor_divide__Scalar))
  .def("aten::frac(Tensor self) -> Tensor")
  .impl("aten::frac", &TypeDefault::frac)
  .def("aten::frac_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::frac_",
        CppFunction::makeUnboxedOnly(TypeDefault::frac_))
  .def("aten::frac.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::frac.out",
        CppFunction::makeUnboxedOnly(TypeDefault::frac_out_out))
  .def("aten::full.names(int[] size, Scalar fill_value, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::full.names",
        CppFunction::makeUnboxedOnly(TypeDefault::full_names))
  .def("aten::full(int[] size, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::full",
        CppFunction::makeUnboxedOnly(TypeDefault::full))
  .def("aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::full.out",
        CppFunction::makeUnboxedOnly(TypeDefault::full_out_out))
  .def("aten::full_like(Tensor self, Scalar fill_value, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::full_like",
        CppFunction::makeUnboxedOnly(TypeDefault::full_like))
  .def("aten::from_file(str filename, bool? shared=None, int? size=0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .def("aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
  .impl("aten::grid_sampler", &TypeDefault::grid_sampler)
  .def("aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
  .def("aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)")
  .def("aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> Tensor")
  .def("aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)")
  .def("aten::hann_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::hann_window",
        CppFunction::makeUnboxedOnly(TypeDefault::hann_window))
  .def("aten::hann_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::hann_window.periodic",
        CppFunction::makeUnboxedOnly(TypeDefault::hann_window_periodic))
  .def("aten::hamming_window(int window_length, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::hamming_window",
        CppFunction::makeUnboxedOnly(TypeDefault::hamming_window))
  .def("aten::hamming_window.periodic(int window_length, bool periodic, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::hamming_window.periodic",
        CppFunction::makeUnboxedOnly(TypeDefault::hamming_window_periodic))
  .def("aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::hamming_window.periodic_alpha",
        CppFunction::makeUnboxedOnly(TypeDefault::hamming_window_periodic_alpha))
  .def("aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::hamming_window.periodic_alpha_beta",
        CppFunction::makeUnboxedOnly(TypeDefault::hamming_window_periodic_alpha_beta))
  .def("aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1.0, int reduction=Mean) -> Tensor")
  .impl("aten::hinge_embedding_loss", &TypeDefault::hinge_embedding_loss)
  .def("aten::ger(Tensor self, Tensor vec2) -> Tensor")
  .impl("aten::ger", &TypeDefault::ger)
  .def("aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::ger.out",
        CppFunction::makeUnboxedOnly(TypeDefault::ger_out_out))
  .def("aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enabled=True) -> Tensor")
  .impl("aten::group_norm",
        CppFunction::makeUnboxedOnly(TypeDefault::group_norm))
  .def("aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor")
  .impl("aten::fft", &TypeDefault::fft)
  .def("aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> Tensor")
  .impl("aten::ifft", &TypeDefault::ifft)
  .def("aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> Tensor")
  .impl("aten::rfft", &TypeDefault::rfft)
  .def("aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> Tensor")
  .impl("aten::irfft",
        CppFunction::makeUnboxedOnly(TypeDefault::irfft))
  .def("aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> Tensor")
  .def("aten::_cufft_get_plan_cache_size(int device_index) -> int")
  .impl("aten::_cufft_get_plan_cache_size", &TypeDefault::_cufft_get_plan_cache_size)
  .def("aten::_cufft_get_plan_cache_max_size(int device_index) -> int")
  .impl("aten::_cufft_get_plan_cache_max_size", &TypeDefault::_cufft_get_plan_cache_max_size)
  .def("aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()")
  .impl("aten::_cufft_set_plan_cache_max_size",
        CppFunction::makeUnboxedOnly(TypeDefault::_cufft_set_plan_cache_max_size))
  .def("aten::_cufft_clear_plan_cache(int device_index) -> ()")
  .impl("aten::_cufft_clear_plan_cache",
        CppFunction::makeUnboxedOnly(TypeDefault::_cufft_clear_plan_cache))
  .def("aten::index.Tensor(Tensor self, Tensor?[] indices) -> Tensor")
  .impl("aten::index.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::index_Tensor))
  .def("aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
  .impl("aten::index_copy_",
        CppFunction::makeUnboxedOnly(TypeDefault::index_copy_))
  .def("aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> Tensor")
  .impl("aten::index_copy", &TypeDefault::index_copy)
  .def("aten::index_copy_.dimname(Tensor(a!) self, Dimname dim, Tensor index, Tensor source) -> Tensor(a!)")
  .impl("aten::index_copy_.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::index_copy__dimname))
  .def("aten::index_copy.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor")
  .impl("aten::index_copy.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::index_copy_dimname))
  .def("aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor(a!)")
  .impl("aten::index_put_",
        CppFunction::makeUnboxedOnly(TypeDefault::index_put_))
  .def("aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> Tensor")
  .impl("aten::index_put",
        CppFunction::makeUnboxedOnly(TypeDefault::index_put))
  .def("aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> Tensor(a!)")
  .impl("aten::_index_put_impl_",
        CppFunction::makeUnboxedOnly(TypeDefault::_index_put_impl_))
  .def("aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> Tensor")
  .impl("aten::instance_norm",
        CppFunction::makeUnboxedOnly(TypeDefault::instance_norm))
  .def("aten::inverse(Tensor self) -> Tensor")
  .impl("aten::inverse", &TypeDefault::inverse)
  .def("aten::inverse.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::inverse.out",
        CppFunction::makeUnboxedOnly(TypeDefault::inverse_out_out))
  .def("aten::_inverse_helper(Tensor self) -> Tensor")
  .def("aten::isclose(Tensor self, Tensor other, float rtol=1e-05, float atol=1e-08, bool equal_nan=False) -> Tensor")
  .impl("aten::isclose", &TypeDefault::isclose)
  .def("aten::isnan(Tensor self) -> Tensor")
  .def("aten::is_distributed(Tensor self) -> bool")
  .impl("aten::is_distributed", &TypeDefault::is_distributed)
  .def("aten::is_floating_point(Tensor self) -> bool")
  .impl("aten::is_floating_point", &TypeDefault::is_floating_point)
  .def("aten::is_complex(Tensor self) -> bool")
  .impl("aten::is_complex", &TypeDefault::is_complex)
  .def("aten::is_nonzero(Tensor self) -> bool")
  .impl("aten::is_nonzero", &TypeDefault::is_nonzero)
  .def("aten::is_same_size(Tensor self, Tensor other) -> bool")
  .impl("aten::is_same_size", &TypeDefault::is_same_size)
  .def("aten::is_signed(Tensor self) -> bool")
  .impl("aten::is_signed", &TypeDefault::is_signed)
  .def("aten::kl_div(Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor")
  .impl("aten::kl_div", &TypeDefault::kl_div)
  .def("aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=Mean, *, bool log_target=False) -> Tensor")
  .def("aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::kthvalue",
        CppFunction::makeUnboxedOnly(TypeDefault::kthvalue))
  .def("aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .def("aten::kthvalue.dimname(Tensor self, int k, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::kthvalue.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::kthvalue_dimname))
  .def("aten::kthvalue.dimname_out(Tensor self, int k, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::kthvalue.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::kthvalue_out_dimname_out))
  .def("aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1e-05, bool cudnn_enable=True) -> Tensor")
  .impl("aten::layer_norm",
        CppFunction::makeUnboxedOnly(TypeDefault::layer_norm))
  .def("aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor)")
  .def("aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .def("aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor")
  .impl("aten::linear",
        CppFunction::makeUnboxedOnly(TypeDefault::linear))
  .def("aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> Tensor")
  .def("aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor")
  .impl("aten::fbgemm_linear_int8_weight_fp32_activation",
        CppFunction::makeUnboxedOnly(TypeDefault::fbgemm_linear_int8_weight_fp32_activation))
  .def("aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> Tensor")
  .impl("aten::fbgemm_linear_int8_weight", &TypeDefault::fbgemm_linear_int8_weight)
  .def("aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)")
  .impl("aten::fbgemm_linear_quantize_weight",
        CppFunction::makeUnboxedOnly(TypeDefault::fbgemm_linear_quantize_weight))
  .def("aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> Tensor")
  .impl("aten::fbgemm_pack_gemm_matrix_fp16", &TypeDefault::fbgemm_pack_gemm_matrix_fp16)
  .def("aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor")
  .impl("aten::fbgemm_linear_fp16_weight_fp32_activation",
        CppFunction::makeUnboxedOnly(TypeDefault::fbgemm_linear_fp16_weight_fp32_activation))
  .def("aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> Tensor")
  .impl("aten::fbgemm_linear_fp16_weight", &TypeDefault::fbgemm_linear_fp16_weight)
  .def("aten::fbgemm_pack_quantized_matrix(Tensor input) -> Tensor")
  .impl("aten::fbgemm_pack_quantized_matrix", &TypeDefault::fbgemm_pack_quantized_matrix)
  .def("aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> Tensor")
  .impl("aten::fbgemm_pack_quantized_matrix.KN", &TypeDefault::fbgemm_pack_quantized_matrix_KN)
  .def("aten::linspace(Scalar start, Scalar end, int steps=100, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::linspace",
        CppFunction::makeUnboxedOnly(TypeDefault::linspace))
  .def("aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::log(Tensor self) -> Tensor")
  .impl("aten::log", &TypeDefault::log)
  .def("aten::log_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::log_",
        CppFunction::makeUnboxedOnly(TypeDefault::log_))
  .def("aten::log.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::log10(Tensor self) -> Tensor")
  .impl("aten::log10", &TypeDefault::log10)
  .def("aten::log10_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::log10_",
        CppFunction::makeUnboxedOnly(TypeDefault::log10_))
  .def("aten::log10.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::log1p(Tensor self) -> Tensor")
  .impl("aten::log1p", &TypeDefault::log1p)
  .def("aten::log1p_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::log1p.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::log2(Tensor self) -> Tensor")
  .impl("aten::log2", &TypeDefault::log2)
  .def("aten::log2_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::log2_",
        CppFunction::makeUnboxedOnly(TypeDefault::log2_))
  .def("aten::log2.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::logdet(Tensor self) -> Tensor")
  .impl("aten::logdet", &TypeDefault::logdet)
  .def("aten::logspace(Scalar start, Scalar end, int steps=100, float base=10.0, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::logspace",
        CppFunction::makeUnboxedOnly(TypeDefault::logspace))
  .def("aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10.0, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::log_softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor")
  .impl("aten::log_softmax.int",
        CppFunction::makeUnboxedOnly(TypeDefault::log_softmax_int))
  .def("aten::log_softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::log_softmax.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::log_softmax_Dimname))
  .def("aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> Tensor")
  .def("aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor")
  .def("aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::logsumexp",
        CppFunction::makeUnboxedOnly(TypeDefault::logsumexp))
  .def("aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::logsumexp.out",
        CppFunction::makeUnboxedOnly(TypeDefault::logsumexp_out_out))
  .def("aten::logsumexp.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::logsumexp.names",
        CppFunction::makeUnboxedOnly(TypeDefault::logsumexp_names))
  .def("aten::logsumexp.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::logsumexp.names_out",
        CppFunction::makeUnboxedOnly(TypeDefault::logsumexp_out_names_out))
  .def("aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0.0, int reduction=Mean) -> Tensor")
  .impl("aten::margin_ranking_loss", &TypeDefault::margin_ranking_loss)
  .def("aten::matmul(Tensor self, Tensor other) -> Tensor")
  .impl("aten::matmul", &TypeDefault::matmul)
  .def("aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::matmul.out",
        CppFunction::makeUnboxedOnly(TypeDefault::matmul_out_out))
  .def("aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> Tensor")
  .impl("aten::matrix_rank.tol", &TypeDefault::matrix_rank_tol)
  .def("aten::matrix_rank(Tensor self, bool symmetric=False) -> Tensor")
  .impl("aten::matrix_rank", &TypeDefault::matrix_rank)
  .def("aten::matrix_power(Tensor self, int n) -> Tensor")
  .impl("aten::matrix_power", &TypeDefault::matrix_power)
  .def("aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::max.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::max_dim))
  .def("aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::max.dim_max",
        CppFunction::makeUnboxedOnly(TypeDefault::max_out_dim_max))
  .def("aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::max_values",
        CppFunction::makeUnboxedOnly(TypeDefault::max_values))
  .def("aten::max.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::max.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::max_names_dim))
  .def("aten::max.names_dim_max(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::max.names_dim_max",
        CppFunction::makeUnboxedOnly(TypeDefault::max_out_names_dim_max))
  .def("aten::max_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::max_values.names",
        CppFunction::makeUnboxedOnly(TypeDefault::max_values_names))
  .def("aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
  .impl("aten::max_pool1d_with_indices",
        CppFunction::makeUnboxedOnly(TypeDefault::max_pool1d_with_indices))
  .def("aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=0, int[1] dilation=1, bool ceil_mode=False) -> Tensor")
  .impl("aten::max_pool1d",
        CppFunction::makeUnboxedOnly(TypeDefault::max_pool1d))
  .def("aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor")
  .impl("aten::max_pool2d",
        CppFunction::makeUnboxedOnly(TypeDefault::max_pool2d))
  .def("aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor")
  .def("aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> Tensor")
  .def("aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> Tensor")
  .impl("aten::max_pool3d",
        CppFunction::makeUnboxedOnly(TypeDefault::max_pool3d))
  .def("aten::mean(Tensor self, *, ScalarType? dtype=None) -> Tensor")
  .def("aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
  .def("aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::mean.names_dim(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::mean.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::mean_names_dim))
  .def("aten::mean.names_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::mean.names_out",
        CppFunction::makeUnboxedOnly(TypeDefault::mean_out_names_out))
  .def("aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::median.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::median_dim))
  .def("aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::median.dim_values",
        CppFunction::makeUnboxedOnly(TypeDefault::median_out_dim_values))
  .def("aten::median.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::median.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::median_names_dim))
  .def("aten::median.names_dim_values(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::median.names_dim_values",
        CppFunction::makeUnboxedOnly(TypeDefault::median_out_names_dim_values))
  .def("aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::min.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::min_dim))
  .def("aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::min.dim_min",
        CppFunction::makeUnboxedOnly(TypeDefault::min_out_dim_min))
  .def("aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::min_values",
        CppFunction::makeUnboxedOnly(TypeDefault::min_values))
  .def("aten::min.names_dim(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::min.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::min_names_dim))
  .def("aten::min.names_dim_min(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::min.names_dim_min",
        CppFunction::makeUnboxedOnly(TypeDefault::min_out_names_dim_min))
  .def("aten::min_values.names(Tensor self, Dimname[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::min_values.names",
        CppFunction::makeUnboxedOnly(TypeDefault::min_values_names))
  .def("aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> Tensor")
  .impl("aten::mkldnn_convolution",
        CppFunction::makeUnboxedOnly(TypeDefault::mkldnn_convolution))
  .def("aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> Tensor")
  .impl("aten::mkldnn_convolution_backward_input",
        CppFunction::makeUnboxedOnly(TypeDefault::mkldnn_convolution_backward_input))
  .def("aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor)")
  .impl("aten::mkldnn_convolution_backward_weights",
        CppFunction::makeUnboxedOnly(TypeDefault::mkldnn_convolution_backward_weights))
  .def("aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .impl("aten::mkldnn_convolution_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::mkldnn_convolution_backward))
  .def("aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)")
  .def("aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)")
  .def("aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .def("aten::miopen_convolution_backward_bias(Tensor grad_output) -> Tensor")
  .def("aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .def("aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .def("aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> Tensor")
  .def("aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
  .def("aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])")
  .def("aten::mm(Tensor self, Tensor mat2) -> Tensor")
  .def("aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::_sparse_mm(Tensor sparse, Tensor dense) -> Tensor")
  .impl("aten::_sparse_mm", &TypeDefault::_sparse_mm)
  .def("aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::mode",
        CppFunction::makeUnboxedOnly(TypeDefault::mode))
  .def("aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::mode.values",
        CppFunction::makeUnboxedOnly(TypeDefault::mode_out_values))
  .def("aten::mode.dimname(Tensor self, Dimname dim, bool keepdim=False) -> (Tensor values, Tensor indices)")
  .impl("aten::mode.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::mode_dimname))
  .def("aten::mode.dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::mode.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::mode_out_dimname_out))
  .def("aten::mul.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::mul.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::mul.Scalar", &TypeDefault::mul_Scalar)
  .def("aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::mul_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::mul__Scalar))
  .def("aten::mv(Tensor self, Tensor vec) -> Tensor")
  .def("aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::mvlgamma(Tensor self, int p) -> Tensor")
  .impl("aten::mvlgamma", &TypeDefault::mvlgamma)
  .def("aten::mvlgamma_(Tensor(a!) self, int p) -> Tensor(a!)")
  .impl("aten::mvlgamma_",
        CppFunction::makeUnboxedOnly(TypeDefault::mvlgamma_))
  .def("aten::narrow_copy(Tensor self, int dim, int start, int length) -> Tensor")
  .def("aten::narrow(Tensor(a) self, int dim, int start, int length) -> Tensor(a)")
  .impl("aten::narrow",
        CppFunction::makeUnboxedOnly(TypeDefault::narrow))
  .def("aten::narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> Tensor(a)")
  .impl("aten::narrow.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::narrow_Tensor))
  .def("aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)")
  .def("aten::native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)")
  .def("aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> Tensor")
  .def("aten::batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)")
  .def("aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor)")
  .def("aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .def("aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)")
  .def("aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> Tensor")
  .def("aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)")
  .def("aten::_nnpack_available() -> bool")
  .impl("aten::_nnpack_available", &TypeDefault::_nnpack_available)
  .def("aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=1) -> Tensor")
  .impl("aten::_nnpack_spatial_convolution",
        CppFunction::makeUnboxedOnly(TypeDefault::_nnpack_spatial_convolution))
  .def("aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor)")
  .impl("aten::_nnpack_spatial_convolution_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_nnpack_spatial_convolution_backward))
  .def("aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> Tensor")
  .impl("aten::_nnpack_spatial_convolution_backward_input",
        CppFunction::makeUnboxedOnly(TypeDefault::_nnpack_spatial_convolution_backward_input))
  .def("aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> Tensor")
  .impl("aten::_nnpack_spatial_convolution_backward_weight",
        CppFunction::makeUnboxedOnly(TypeDefault::_nnpack_spatial_convolution_backward_weight))
  .def("aten::ones.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::ones.names",
        CppFunction::makeUnboxedOnly(TypeDefault::ones_names))
  .def("aten::ones(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::ones",
        CppFunction::makeUnboxedOnly(TypeDefault::ones))
  .def("aten::ones.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::ones.out",
        CppFunction::makeUnboxedOnly(TypeDefault::ones_out_out))
  .def("aten::ones_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::ones_like",
        CppFunction::makeUnboxedOnly(TypeDefault::ones_like))
  .def("aten::pairwise_distance(Tensor x1, Tensor x2, float p=2, float eps=1e-06, bool keepdim=False) -> Tensor")
  .impl("aten::pairwise_distance", &TypeDefault::pairwise_distance)
  .def("aten::cdist(Tensor x1, Tensor x2, float p=2, int? compute_mode=None) -> Tensor")
  .impl("aten::cdist",
        CppFunction::makeUnboxedOnly(TypeDefault::cdist))
  .def("aten::_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> Tensor")
  .impl("aten::_cdist_forward", &TypeDefault::_cdist_forward)
  .def("aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> Tensor")
  .impl("aten::_cdist_backward", &TypeDefault::_cdist_backward)
  .def("aten::pdist(Tensor self, float p=2) -> Tensor")
  .impl("aten::pdist", &TypeDefault::pdist)
  .def("aten::_pdist_forward(Tensor self, float p=2) -> Tensor")
  .impl("aten::_pdist_forward", &TypeDefault::_pdist_forward)
  .def("aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> Tensor")
  .impl("aten::_pdist_backward", &TypeDefault::_pdist_backward)
  .def("aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> Tensor")
  .impl("aten::cosine_similarity", &TypeDefault::cosine_similarity)
  .def("aten::permute(Tensor(a) self, int[] dims) -> Tensor(a)")
  .impl("aten::permute",
        CppFunction::makeUnboxedOnly(TypeDefault::permute))
  .def("aten::numpy_T(Tensor(a) self) -> Tensor(a)")
  .impl("aten::numpy_T",
        CppFunction::makeUnboxedOnly(TypeDefault::numpy_T))
  .def("aten::pixel_shuffle(Tensor self, int upscale_factor) -> Tensor")
  .impl("aten::pixel_shuffle", &TypeDefault::pixel_shuffle)
  .def("aten::is_pinned(Tensor self) -> bool")
  .impl("aten::is_pinned", &TypeDefault::is_pinned)
  .def("aten::pin_memory(Tensor self) -> Tensor")
  .impl("aten::pin_memory", &TypeDefault::pin_memory)
  .def("aten::pinverse(Tensor self, float rcond=1e-15) -> Tensor")
  .impl("aten::pinverse", &TypeDefault::pinverse)
  .def("aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> Tensor")
  .impl("aten::poisson_nll_loss", &TypeDefault::poisson_nll_loss)
  .def("aten::scalar_tensor(Scalar s, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::scalar_tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::scalar_tensor))
  .def("aten::rand.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::rand.names",
        CppFunction::makeUnboxedOnly(TypeDefault::rand_names))
  .def("aten::rand.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::rand.generator_with_names",
        CppFunction::makeUnboxedOnly(TypeDefault::rand_generator_with_names))
  .def("aten::rand(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::rand",
        CppFunction::makeUnboxedOnly(TypeDefault::rand))
  .def("aten::rand.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::rand.generator",
        CppFunction::makeUnboxedOnly(TypeDefault::rand_generator))
  .def("aten::rand.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::rand.out",
        CppFunction::makeUnboxedOnly(TypeDefault::rand_out_out))
  .def("aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::rand.generator_out",
        CppFunction::makeUnboxedOnly(TypeDefault::rand_out_generator_out))
  .def("aten::rand_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::rand_like",
        CppFunction::makeUnboxedOnly(TypeDefault::rand_like))
  .def("aten::randint(int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randint",
        CppFunction::makeUnboxedOnly(TypeDefault::randint))
  .def("aten::randint.generator(int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randint.generator",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_generator))
  .def("aten::randint.low(int low, int high, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randint.low",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_low))
  .def("aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randint.low_generator",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_low_generator))
  .def("aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randint.out",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_out_out))
  .def("aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randint.generator_out",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_out_generator_out))
  .def("aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randint.low_out",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_out_low_out))
  .def("aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randint.low_generator_out",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_out_low_generator_out))
  .def("aten::randint_like(Tensor self, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::randint_like",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_like))
  .def("aten::randint_like.low_dtype(Tensor self, int low, int high, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::randint_like.low_dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::randint_like_low_dtype))
  .def("aten::randn(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randn",
        CppFunction::makeUnboxedOnly(TypeDefault::randn))
  .def("aten::randn.generator(int[] size, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randn.generator",
        CppFunction::makeUnboxedOnly(TypeDefault::randn_generator))
  .def("aten::randn.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randn.names",
        CppFunction::makeUnboxedOnly(TypeDefault::randn_names))
  .def("aten::randn.generator_with_names(int[] size, *, Generator? generator, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randn.generator_with_names",
        CppFunction::makeUnboxedOnly(TypeDefault::randn_generator_with_names))
  .def("aten::randn.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randn.out",
        CppFunction::makeUnboxedOnly(TypeDefault::randn_out_out))
  .def("aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randn.generator_out",
        CppFunction::makeUnboxedOnly(TypeDefault::randn_out_generator_out))
  .def("aten::randn_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::randn_like",
        CppFunction::makeUnboxedOnly(TypeDefault::randn_like))
  .def("aten::randperm(int n, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randperm",
        CppFunction::makeUnboxedOnly(TypeDefault::randperm))
  .def("aten::randperm.generator(int n, *, Generator? generator, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::randperm.generator",
        CppFunction::makeUnboxedOnly(TypeDefault::randperm_generator))
  .def("aten::randperm.out(int n, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::randperm.out",
        CppFunction::makeUnboxedOnly(TypeDefault::randperm_out_out))
  .def("aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::range.step(Scalar start, Scalar end, Scalar step=1, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::range.step",
        CppFunction::makeUnboxedOnly(TypeDefault::range_step))
  .def("aten::range(Scalar start, Scalar end, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::range",
        CppFunction::makeUnboxedOnly(TypeDefault::range))
  .def("aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::reciprocal(Tensor self) -> Tensor")
  .impl("aten::reciprocal", &TypeDefault::reciprocal)
  .def("aten::reciprocal_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::reciprocal_",
        CppFunction::makeUnboxedOnly(TypeDefault::reciprocal_))
  .def("aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::reciprocal.out",
        CppFunction::makeUnboxedOnly(TypeDefault::reciprocal_out_out))
  .def("aten::neg(Tensor self) -> Tensor")
  .impl("aten::neg", &TypeDefault::neg)
  .def("aten::neg_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::neg_",
        CppFunction::makeUnboxedOnly(TypeDefault::neg_))
  .def("aten::neg.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::repeat(Tensor self, int[] repeats) -> Tensor")
  .impl("aten::repeat",
        CppFunction::makeUnboxedOnly(TypeDefault::repeat))
  .def("aten::repeat_interleave.Tensor(Tensor repeats) -> Tensor")
  .def("aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> Tensor")
  .impl("aten::repeat_interleave.self_Tensor", &TypeDefault::repeat_interleave_self_Tensor)
  .def("aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> Tensor")
  .impl("aten::repeat_interleave.self_int", &TypeDefault::repeat_interleave_self_int)
  .def("aten::reshape(Tensor self, int[] shape) -> Tensor")
  .impl("aten::reshape",
        CppFunction::makeUnboxedOnly(TypeDefault::reshape))
  .def("aten::_mkldnn_reshape(Tensor self, int[] shape) -> Tensor")
  .def("aten::reshape_as(Tensor self, Tensor other) -> Tensor")
  .impl("aten::reshape_as", &TypeDefault::reshape_as)
  .def("aten::round(Tensor self) -> Tensor")
  .impl("aten::round", &TypeDefault::round)
  .def("aten::round_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::round_",
        CppFunction::makeUnboxedOnly(TypeDefault::round_))
  .def("aten::round.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor")
  .impl("aten::rrelu",
        CppFunction::makeUnboxedOnly(TypeDefault::rrelu))
  .def("aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::rrelu_",
        CppFunction::makeUnboxedOnly(TypeDefault::rrelu_))
  .def("aten::relu(Tensor self) -> Tensor")
  .def("aten::relu_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::prelu(Tensor self, Tensor weight) -> Tensor")
  .def("aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)")
  .def("aten::gelu(Tensor self) -> Tensor")
  .def("aten::gelu_backward(Tensor grad, Tensor self) -> Tensor")
  .def("aten::hardshrink(Tensor self, Scalar lambd=0.5) -> Tensor")
  .impl("aten::hardshrink", &TypeDefault::hardshrink)
  .def("aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> Tensor")
  .impl("aten::hardshrink_backward", &TypeDefault::hardshrink_backward)
  .def("aten::rsqrt(Tensor self) -> Tensor")
  .impl("aten::rsqrt", &TypeDefault::rsqrt)
  .def("aten::rsqrt_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::rsqrt_",
        CppFunction::makeUnboxedOnly(TypeDefault::rsqrt_))
  .def("aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::select.Dimname(Tensor(a) self, Dimname dim, int index) -> Tensor(a)")
  .impl("aten::select.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::select_Dimname))
  .def("aten::select.int(Tensor(a) self, int dim, int index) -> Tensor(a)")
  .impl("aten::select.int",
        CppFunction::makeUnboxedOnly(TypeDefault::select_int))
  .def("aten::selu(Tensor self) -> Tensor")
  .impl("aten::selu", &TypeDefault::selu)
  .def("aten::selu_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::selu_",
        CppFunction::makeUnboxedOnly(TypeDefault::selu_))
  .def("aten::celu(Tensor self, Scalar alpha=1.0) -> Tensor")
  .impl("aten::celu", &TypeDefault::celu)
  .def("aten::celu_(Tensor(a!) self, Scalar alpha=1.0) -> Tensor(a!)")
  .impl("aten::celu_",
        CppFunction::makeUnboxedOnly(TypeDefault::celu_))
  .def("aten::sigmoid(Tensor self) -> Tensor")
  .def("aten::sigmoid_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::sigmoid.out",
        CppFunction::makeUnboxedOnly(TypeDefault::sigmoid_out_out))
  .def("aten::sin(Tensor self) -> Tensor")
  .impl("aten::sin", &TypeDefault::sin)
  .def("aten::sin_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::sin_",
        CppFunction::makeUnboxedOnly(TypeDefault::sin_))
  .def("aten::sin.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::sinh(Tensor self) -> Tensor")
  .impl("aten::sinh", &TypeDefault::sinh)
  .def("aten::sinh_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::sinh_",
        CppFunction::makeUnboxedOnly(TypeDefault::sinh_))
  .def("aten::sinh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::sinh.out",
        CppFunction::makeUnboxedOnly(TypeDefault::sinh_out_out))
  .def("aten::size.int(Tensor self, int dim) -> int")
  .impl("aten::size.int", &TypeDefault::size_int)
  .def("aten::size.Dimname(Tensor self, Dimname dim) -> int")
  .impl("aten::size.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::size_Dimname))
  .def("aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> Tensor(a)")
  .impl("aten::slice.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::slice_Tensor))
  .def("aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)")
  .impl("aten::slogdet",
        CppFunction::makeUnboxedOnly(TypeDefault::slogdet))
  .def("aten::smm(Tensor self, Tensor mat2) -> Tensor")
  .impl("aten::smm", &TypeDefault::smm)
  .def("aten::softmax.int(Tensor self, int dim, ScalarType? dtype=None) -> Tensor")
  .impl("aten::softmax.int",
        CppFunction::makeUnboxedOnly(TypeDefault::softmax_int))
  .def("aten::softmax.Dimname(Tensor self, Dimname dim, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::softmax.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::softmax_Dimname))
  .def("aten::_softmax(Tensor self, int dim, bool half_to_float) -> Tensor")
  .def("aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> Tensor")
  .def("aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> Tensor(a)[]")
  .impl("aten::split.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::split_Tensor))
  .def("aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> Tensor[]")
  .impl("aten::split_with_sizes",
        CppFunction::makeUnboxedOnly(TypeDefault::split_with_sizes))
  .def("aten::squeeze(Tensor(a) self) -> Tensor(a)")
  .impl("aten::squeeze",
        CppFunction::makeUnboxedOnly(TypeDefault::squeeze))
  .def("aten::squeeze.dim(Tensor(a) self, int dim) -> Tensor(a)")
  .impl("aten::squeeze.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::squeeze_dim))
  .def("aten::squeeze.dimname(Tensor(a) self, Dimname dim) -> Tensor(a)")
  .impl("aten::squeeze.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::squeeze_dimname))
  .def("aten::squeeze_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::squeeze_",
        CppFunction::makeUnboxedOnly(TypeDefault::squeeze_))
  .def("aten::squeeze_.dim(Tensor(a!) self, int dim) -> Tensor(a!)")
  .impl("aten::squeeze_.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::squeeze__dim))
  .def("aten::squeeze_.dimname(Tensor(a!) self, Dimname dim) -> Tensor(a!)")
  .impl("aten::squeeze_.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::squeeze__dimname))
  .def("aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .impl("aten::sspaddmm", &TypeDefault::sspaddmm)
  .def("aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::stack(Tensor[] tensors, int dim=0) -> Tensor")
  .impl("aten::stack",
        CppFunction::makeUnboxedOnly(TypeDefault::stack))
  .def("aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::stack.out",
        CppFunction::makeUnboxedOnly(TypeDefault::stack_out_out))
  .def("aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> Tensor")
  .impl("aten::stft",
        CppFunction::makeUnboxedOnly(TypeDefault::stft))
  .def("aten::stride.int(Tensor self, int dim) -> int")
  .impl("aten::stride.int", &TypeDefault::stride_int)
  .def("aten::stride.Dimname(Tensor self, Dimname dim) -> int")
  .impl("aten::stride.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::stride_Dimname))
  .def("aten::sum(Tensor self, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::sum",
        CppFunction::makeUnboxedOnly(TypeDefault::sum))
  .def("aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::sum.dim_IntList",
        CppFunction::makeUnboxedOnly(TypeDefault::sum_dim_IntList))
  .def("aten::sum.dim_DimnameList(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::sum.dim_DimnameList",
        CppFunction::makeUnboxedOnly(TypeDefault::sum_dim_DimnameList))
  .def("aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::sum.IntList_out",
        CppFunction::makeUnboxedOnly(TypeDefault::sum_out_IntList_out))
  .def("aten::sum.DimnameList_out(Tensor self, Dimname[1] dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::sum.DimnameList_out",
        CppFunction::makeUnboxedOnly(TypeDefault::sum_out_DimnameList_out))
  .def("aten::sum_to_size(Tensor self, int[] size) -> Tensor")
  .impl("aten::sum_to_size",
        CppFunction::makeUnboxedOnly(TypeDefault::sum_to_size))
  .def("aten::sqrt(Tensor self) -> Tensor")
  .impl("aten::sqrt", &TypeDefault::sqrt)
  .def("aten::sqrt_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::sqrt_",
        CppFunction::makeUnboxedOnly(TypeDefault::sqrt_))
  .def("aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::sqrt.out",
        CppFunction::makeUnboxedOnly(TypeDefault::sqrt_out_out))
  .def("aten::square(Tensor self) -> Tensor")
  .impl("aten::square", &TypeDefault::square)
  .def("aten::square_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::square_",
        CppFunction::makeUnboxedOnly(TypeDefault::square_))
  .def("aten::std(Tensor self, bool unbiased=True) -> Tensor")
  .impl("aten::std", &TypeDefault::std)
  .def("aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
  .impl("aten::std.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::std_dim))
  .def("aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)")
  .impl("aten::std_mean",
        CppFunction::makeUnboxedOnly(TypeDefault::std_mean))
  .def("aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
  .impl("aten::std_mean.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::std_mean_dim))
  .def("aten::std_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
  .impl("aten::std_mean.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::std_mean_names_dim))
  .def("aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::std.out",
        CppFunction::makeUnboxedOnly(TypeDefault::std_out_out))
  .def("aten::std.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
  .impl("aten::std.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::std_names_dim))
  .def("aten::std.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::std.names_out",
        CppFunction::makeUnboxedOnly(TypeDefault::std_out_names_out))
  .def("aten::prod(Tensor self, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::prod",
        CppFunction::makeUnboxedOnly(TypeDefault::prod))
  .def("aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::prod.dim_int",
        CppFunction::makeUnboxedOnly(TypeDefault::prod_dim_int))
  .def("aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::prod.int_out",
        CppFunction::makeUnboxedOnly(TypeDefault::prod_out_int_out))
  .def("aten::prod.dim_Dimname(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None) -> Tensor")
  .impl("aten::prod.dim_Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::prod_dim_Dimname))
  .def("aten::prod.Dimname_out(Tensor self, Dimname dim, bool keepdim=False, *, ScalarType? dtype=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::prod.Dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::prod_out_Dimname_out))
  .def("aten::t(Tensor(a) self) -> Tensor(a)")
  .impl("aten::t",
        CppFunction::makeUnboxedOnly(TypeDefault::t))
  .def("aten::t_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::t_",
        CppFunction::makeUnboxedOnly(TypeDefault::t_))
  .def("aten::tan(Tensor self) -> Tensor")
  .impl("aten::tan", &TypeDefault::tan)
  .def("aten::tan_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::tan.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::tanh(Tensor self) -> Tensor")
  .def("aten::tanh_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::tanh.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> Tensor")
  .impl("aten::tensordot",
        CppFunction::makeUnboxedOnly(TypeDefault::tensordot))
  .def("aten::threshold(Tensor self, Scalar threshold, Scalar value) -> Tensor")
  .def("aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> Tensor(a!)")
  .def("aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> Tensor")
  .def("aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> Tensor(a)")
  .impl("aten::transpose.int",
        CppFunction::makeUnboxedOnly(TypeDefault::transpose_int))
  .def("aten::transpose.Dimname(Tensor(a) self, Dimname dim0, Dimname dim1) -> Tensor(a)")
  .impl("aten::transpose.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::transpose_Dimname))
  .def("aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> Tensor")
  .def("aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)")
  .impl("aten::transpose_",
        CppFunction::makeUnboxedOnly(TypeDefault::transpose_))
  .def("aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> Tensor(a!)")
  .def("aten::one_hot(Tensor self, int num_classes=-1) -> Tensor")
  .impl("aten::one_hot", &TypeDefault::one_hot)
  .def("aten::flip(Tensor self, int[] dims) -> Tensor")
  .def("aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> Tensor")
  .def("aten::rot90(Tensor self, int k=1, int[] dims=[0,1]) -> Tensor")
  .impl("aten::rot90",
        CppFunction::makeUnboxedOnly(TypeDefault::rot90))
  .def("aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> Tensor")
  .impl("aten::trapz.x", &TypeDefault::trapz_x)
  .def("aten::trapz.dx(Tensor y, *, float dx=1, int dim=-1) -> Tensor")
  .impl("aten::trapz.dx", &TypeDefault::trapz_dx)
  .def("aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> Tensor")
  .impl("aten::_trilinear",
        CppFunction::makeUnboxedOnly(TypeDefault::_trilinear))
  .def("aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1.0, float p=2, float eps=1e-06, bool swap=False, int reduction=Mean) -> Tensor")
  .impl("aten::triplet_margin_loss", &TypeDefault::triplet_margin_loss)
  .def("aten::true_divide.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::true_divide_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::true_divide.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::true_divide.Scalar", &TypeDefault::true_divide_Scalar)
  .def("aten::true_divide_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::true_divide_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::true_divide__Scalar))
  .def("aten::trunc(Tensor self) -> Tensor")
  .impl("aten::trunc", &TypeDefault::trunc)
  .def("aten::trunc_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::trunc_",
        CppFunction::makeUnboxedOnly(TypeDefault::trunc_))
  .def("aten::trunc.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::type_as(Tensor self, Tensor other) -> Tensor")
  .impl("aten::type_as", &TypeDefault::type_as)
  .def("aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> bool")
  .impl("aten::_has_compatible_shallow_copy_type", &TypeDefault::_has_compatible_shallow_copy_type)
  .def("aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)")
  .def("aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)")
  .def("aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)")
  .def("aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)")
  .def("aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)")
  .def("aten::_unsafe_view(Tensor self, int[] size) -> Tensor")
  .impl("aten::_unsafe_view",
        CppFunction::makeUnboxedOnly(TypeDefault::_unsafe_view))
  .def("aten::unsqueeze(Tensor(a) self, int dim) -> Tensor(a)")
  .impl("aten::unsqueeze",
        CppFunction::makeUnboxedOnly(TypeDefault::unsqueeze))
  .def("aten::unsqueeze_(Tensor(a!) self, int dim) -> Tensor(a!)")
  .impl("aten::unsqueeze_",
        CppFunction::makeUnboxedOnly(TypeDefault::unsqueeze_))
  .def("aten::var(Tensor self, bool unbiased=True) -> Tensor")
  .impl("aten::var", &TypeDefault::var)
  .def("aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
  .impl("aten::var.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::var_dim))
  .def("aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::var.out",
        CppFunction::makeUnboxedOnly(TypeDefault::var_out_out))
  .def("aten::var.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> Tensor")
  .impl("aten::var.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::var_names_dim))
  .def("aten::var.names_out(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::var.names_out",
        CppFunction::makeUnboxedOnly(TypeDefault::var_out_names_out))
  .def("aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)")
  .impl("aten::var_mean",
        CppFunction::makeUnboxedOnly(TypeDefault::var_mean))
  .def("aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
  .impl("aten::var_mean.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::var_mean_dim))
  .def("aten::var_mean.names_dim(Tensor self, Dimname[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)")
  .impl("aten::var_mean.names_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::var_mean_names_dim))
  .def("aten::view_as(Tensor self, Tensor other) -> Tensor")
  .impl("aten::view_as", &TypeDefault::view_as)
  .def("aten::where.self(Tensor condition, Tensor self, Tensor other) -> Tensor")
  .impl("aten::where.self", &TypeDefault::where_self)
  .def("aten::where(Tensor condition) -> Tensor[]")
  .impl("aten::where",
        CppFunction::makeUnboxedOnly(TypeDefault::where))
  .def("aten::_s_where(Tensor condition, Tensor self, Tensor other) -> Tensor")
  .impl("aten::_s_where", &TypeDefault::_s_where)
  .def("aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> Tensor")
  .impl("aten::norm_except_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_except_dim))
  .def("aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> Tensor")
  .impl("aten::_weight_norm", &TypeDefault::_weight_norm)
  .def("aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)")
  .def("aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)")
  .def("aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)")
  .impl("aten::_weight_norm_differentiable_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_weight_norm_differentiable_backward))
  .def("aten::zeros.names(int[] size, *, Dimname[]? names, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::zeros.names",
        CppFunction::makeUnboxedOnly(TypeDefault::zeros_names))
  .def("aten::zeros(int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::zeros",
        CppFunction::makeUnboxedOnly(TypeDefault::zeros))
  .def("aten::zeros.out(int[] size, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::zeros.out",
        CppFunction::makeUnboxedOnly(TypeDefault::zeros_out_out))
  .def("aten::zeros_like(Tensor self, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::zeros_like",
        CppFunction::makeUnboxedOnly(TypeDefault::zeros_like))
  .def("aten::_standard_gamma_grad(Tensor self, Tensor output) -> Tensor")
  .def("aten::_standard_gamma(Tensor self, Generator? generator=None) -> Tensor")
  .def("aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> Tensor")
  .def("aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> Tensor")
  .def("aten::poisson(Tensor self, Generator? generator=None) -> Tensor")
  .def("aten::native_norm(Tensor self, Scalar p=2) -> Tensor")
  .def("aten::_sparse_sum(Tensor self) -> Tensor")
  .impl("aten::_sparse_sum", &TypeDefault::_sparse_sum)
  .def("aten::_sparse_sum.dtype(Tensor self, *, ScalarType dtype) -> Tensor")
  .impl("aten::_sparse_sum.dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::_sparse_sum_dtype))
  .def("aten::_sparse_sum.dim(Tensor self, int[1] dim) -> Tensor")
  .impl("aten::_sparse_sum.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::_sparse_sum_dim))
  .def("aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, ScalarType dtype) -> Tensor")
  .impl("aten::_sparse_sum.dim_dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::_sparse_sum_dim_dtype))
  .def("aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> Tensor")
  .def("aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, ScalarType dtype) -> Tensor")
  .impl("aten::norm.ScalarOpt_dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_ScalarOpt_dtype))
  .def("aten::norm.Scalar(Tensor self, Scalar p=2) -> Tensor")
  .impl("aten::norm.Scalar", &TypeDefault::norm_Scalar)
  .def("aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor")
  .impl("aten::norm.ScalarOpt_dim_dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_ScalarOpt_dim_dtype))
  .def("aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::norm.ScalarOpt_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_ScalarOpt_dim))
  .def("aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::norm.dtype_out",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_out_dtype_out))
  .def("aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::norm.out",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_out_out))
  .def("aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype) -> Tensor")
  .impl("aten::norm.names_ScalarOpt_dim_dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_names_ScalarOpt_dim_dtype))
  .def("aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::norm.names_ScalarOpt_dim",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_names_ScalarOpt_dim))
  .def("aten::norm.names_dtype_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim, *, ScalarType dtype, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::norm.names_dtype_out",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_out_names_dtype_out))
  .def("aten::norm.names_out(Tensor self, Scalar? p, Dimname[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::norm.names_out",
        CppFunction::makeUnboxedOnly(TypeDefault::norm_out_names_out))
  .def("aten::frobenius_norm(Tensor self) -> Tensor")
  .impl("aten::frobenius_norm", &TypeDefault::frobenius_norm)
  .def("aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> Tensor")
  .impl("aten::frobenius_norm.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::frobenius_norm_dim))
  .def("aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::frobenius_norm.out",
        CppFunction::makeUnboxedOnly(TypeDefault::frobenius_norm_out_out))
  .def("aten::nuclear_norm(Tensor self, bool keepdim=False) -> Tensor")
  .impl("aten::nuclear_norm", &TypeDefault::nuclear_norm)
  .def("aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::nuclear_norm.out",
        CppFunction::makeUnboxedOnly(TypeDefault::nuclear_norm_out_out))
  .def("aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> Tensor")
  .impl("aten::nuclear_norm.dim",
        CppFunction::makeUnboxedOnly(TypeDefault::nuclear_norm_dim))
  .def("aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::nuclear_norm.dim_out",
        CppFunction::makeUnboxedOnly(TypeDefault::nuclear_norm_out_dim_out))
  .def("aten::clone(Tensor self, *, MemoryFormat? memory_format=None) -> Tensor")
  .def("aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> Tensor")
  .def("aten::zero_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
  .def("aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
  .impl("aten::sub.Scalar", &TypeDefault::sub_Scalar)
  .def("aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> Tensor(a!)")
  .impl("aten::sub_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::sub__Scalar))
  .def("aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> Tensor")
  .impl("aten::rsub.Tensor", &TypeDefault::rsub_Tensor)
  .def("aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> Tensor")
  .impl("aten::rsub.Scalar", &TypeDefault::rsub_Scalar)
  .def("aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .impl("aten::_sparse_addmm", &TypeDefault::_sparse_addmm)
  .def("aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .def("aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::sparse_coo_tensor.size(int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
  .impl("aten::sparse_coo_tensor.size",
        CppFunction::makeUnboxedOnly(TypeDefault::sparse_coo_tensor_size))
  .def("aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::sparse_coo_tensor.indices",
        CppFunction::makeUnboxedOnly(TypeDefault::sparse_coo_tensor_indices))
  .def("aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::sparse_coo_tensor.indices_size",
        CppFunction::makeUnboxedOnly(TypeDefault::sparse_coo_tensor_indices_size))
  .def("aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::_sparse_coo_tensor_unsafe",
        CppFunction::makeUnboxedOnly(TypeDefault::_sparse_coo_tensor_unsafe))
  .def("aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
  .def("aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False) -> Tensor")
  .def("aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)")
  .def("aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> Tensor(a!)")
  .def("aten::sparse_mask(Tensor self, Tensor mask) -> Tensor")
  .def("aten::to_dense(Tensor self) -> Tensor")
  .def("aten::to_dense_backward(Tensor grad, Tensor input) -> Tensor")
  .impl("aten::to_dense_backward", &TypeDefault::to_dense_backward)
  .def("aten::sparse_dim(Tensor self) -> int")
  .def("aten::_dimI(Tensor self) -> int")
  .def("aten::dense_dim(Tensor self) -> int")
  .def("aten::_dimV(Tensor self) -> int")
  .def("aten::_nnz(Tensor self) -> int")
  .def("aten::coalesce(Tensor self) -> Tensor")
  .def("aten::is_coalesced(Tensor self) -> bool")
  .def("aten::_indices(Tensor(a) self) -> Tensor(a)")
  .def("aten::_values(Tensor(a) self) -> Tensor(a)")
  .def("aten::_coalesced_(Tensor(a!) self, bool coalesced) -> Tensor(a!)")
  .def("aten::indices(Tensor(a) self) -> Tensor(a)")
  .def("aten::values(Tensor(a) self) -> Tensor(a)")
  .def("aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::hspmm(Tensor mat1, Tensor mat2) -> Tensor")
  .def("aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> Tensor(a!)")
  .def("aten::unbind.int(Tensor(a) self, int dim=0) -> Tensor(a)[]")
  .impl("aten::unbind.int",
        CppFunction::makeUnboxedOnly(TypeDefault::unbind_int))
  .def("aten::unbind.Dimname(Tensor(a) self, Dimname dim) -> Tensor(a)[]")
  .impl("aten::unbind.Dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::unbind_Dimname))
  .def("aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> Tensor")
  .def("aten::to_sparse(Tensor self) -> Tensor")
  .def("aten::to_mkldnn(Tensor self) -> Tensor")
  .def("aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=0, int[2] stride=1, int[2] dilation=1, int groups=1) -> Tensor")
  .def("aten::to_mkldnn_backward(Tensor grad, Tensor input) -> Tensor")
  .impl("aten::to_mkldnn_backward", &TypeDefault::to_mkldnn_backward)
  .def("aten::quantize_per_tensor(Tensor self, float scale, int zero_point, ScalarType dtype) -> Tensor")
  .def("aten::quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, ScalarType dtype) -> Tensor[]")
  .def("aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, ScalarType dtype) -> Tensor")
  .def("aten::dequantize.self(Tensor self) -> Tensor")
  .def("aten::dequantize.tensors(Tensor[] tensors) -> Tensor[]")
  .def("aten::q_scale(Tensor self) -> float")
  .def("aten::q_zero_point(Tensor self) -> int")
  .def("aten::q_per_channel_scales(Tensor self) -> Tensor")
  .def("aten::q_per_channel_zero_points(Tensor self) -> Tensor")
  .def("aten::q_per_channel_axis(Tensor self) -> int")
  .def("aten::int_repr(Tensor self) -> Tensor")
  .def("aten::_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> Tensor")
  .def("aten::_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> Tensor")
  .def("aten::qscheme(Tensor self) -> QScheme")
  .def("aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor")
  .impl("aten::fake_quantize_per_tensor_affine", &TypeDefault::fake_quantize_per_tensor_affine)
  .def("aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> Tensor")
  .impl("aten::fake_quantize_per_tensor_affine_backward", &TypeDefault::fake_quantize_per_tensor_affine_backward)
  .def("aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor")
  .impl("aten::fake_quantize_per_channel_affine", &TypeDefault::fake_quantize_per_channel_affine)
  .def("aten::fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> Tensor")
  .impl("aten::fake_quantize_per_channel_affine_backward", &TypeDefault::fake_quantize_per_channel_affine_backward)
  .def("aten::_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)")
  .impl("aten::_choose_qparams_per_tensor", &TypeDefault::_choose_qparams_per_tensor)
  .def("aten::to.dtype_layout(Tensor self, *, ScalarType dtype, Layout layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::to.dtype_layout",
        CppFunction::makeUnboxedOnly(TypeDefault::to_dtype_layout))
  .def("aten::to.device(Tensor self, Device device, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::to.device",
        CppFunction::makeUnboxedOnly(TypeDefault::to_device))
  .def("aten::to.dtype(Tensor self, ScalarType dtype, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::to.dtype",
        CppFunction::makeUnboxedOnly(TypeDefault::to_dtype))
  .def("aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, MemoryFormat? memory_format=None) -> Tensor")
  .impl("aten::to.other",
        CppFunction::makeUnboxedOnly(TypeDefault::to_other))
  .def("aten::meshgrid(Tensor[] tensors) -> Tensor[]")
  .impl("aten::meshgrid",
        CppFunction::makeUnboxedOnly(TypeDefault::meshgrid))
  .def("aten::cartesian_prod(Tensor[] tensors) -> Tensor")
  .impl("aten::cartesian_prod",
        CppFunction::makeUnboxedOnly(TypeDefault::cartesian_prod))
  .def("aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> Tensor")
  .impl("aten::combinations", &TypeDefault::combinations)
  .def("aten::item(Tensor self) -> Scalar")
  .impl("aten::item", &TypeDefault::item)
  .def("aten::result_type.Tensor(Tensor tensor, Tensor other) -> ScalarType")
  .impl("aten::result_type.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::result_type_Tensor))
  .def("aten::result_type.Scalar(Tensor tensor, Scalar other) -> ScalarType")
  .impl("aten::result_type.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::result_type_Scalar))
  .def("aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> ScalarType")
  .impl("aten::result_type.Scalar_Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::result_type_Scalar_Tensor))
  .def("aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> ScalarType")
  .impl("aten::result_type.Scalar_Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::result_type_Scalar_Scalar))
  .def("aten::can_cast(ScalarType from, ScalarType to) -> bool")
  .impl("aten::can_cast",
        CppFunction::makeUnboxedOnly(TypeDefault::can_cast))
  .def("aten::promote_types(ScalarType type1, ScalarType type2) -> ScalarType")
  .impl("aten::promote_types",
        CppFunction::makeUnboxedOnly(TypeDefault::promote_types))
  .def("aten::_local_scalar_dense(Tensor self) -> Scalar")
  .def("aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)")
  .def("aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
  .def("aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
  .impl("aten::_thnn_differentiable_lstm_cell_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_thnn_differentiable_lstm_cell_backward))
  .def("aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)")
  .def("aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
  .def("aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)")
  .impl("aten::_thnn_differentiable_gru_cell_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_thnn_differentiable_gru_cell_backward))
  .def("aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)")
  .impl("aten::lstm.input",
        CppFunction::makeUnboxedOnly(TypeDefault::lstm_input))
  .def("aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)")
  .impl("aten::lstm.data",
        CppFunction::makeUnboxedOnly(TypeDefault::lstm_data))
  .def("aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
  .impl("aten::gru.input",
        CppFunction::makeUnboxedOnly(TypeDefault::gru_input))
  .def("aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
  .impl("aten::gru.data",
        CppFunction::makeUnboxedOnly(TypeDefault::gru_data))
  .def("aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
  .impl("aten::rnn_tanh.input",
        CppFunction::makeUnboxedOnly(TypeDefault::rnn_tanh_input))
  .def("aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
  .impl("aten::rnn_tanh.data",
        CppFunction::makeUnboxedOnly(TypeDefault::rnn_tanh_data))
  .def("aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
  .impl("aten::rnn_relu.input",
        CppFunction::makeUnboxedOnly(TypeDefault::rnn_relu_input))
  .def("aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
  .impl("aten::rnn_relu.data",
        CppFunction::makeUnboxedOnly(TypeDefault::rnn_relu_data))
  .def("aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)")
  .impl("aten::lstm_cell",
        CppFunction::makeUnboxedOnly(TypeDefault::lstm_cell))
  .def("aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
  .impl("aten::gru_cell",
        CppFunction::makeUnboxedOnly(TypeDefault::gru_cell))
  .def("aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
  .impl("aten::rnn_tanh_cell",
        CppFunction::makeUnboxedOnly(TypeDefault::rnn_tanh_cell))
  .def("aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> Tensor")
  .impl("aten::rnn_relu_cell",
        CppFunction::makeUnboxedOnly(TypeDefault::rnn_relu_cell))
  .def("aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)")
  .impl("aten::quantized_lstm",
        CppFunction::makeUnboxedOnly(TypeDefault::quantized_lstm))
  .def("aten::quantized_lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, ScalarType? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)")
  .impl("aten::quantized_lstm.data",
        CppFunction::makeUnboxedOnly(TypeDefault::quantized_lstm_data))
  .def("aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)")
  .impl("aten::quantized_gru.input",
        CppFunction::makeUnboxedOnly(TypeDefault::quantized_gru_input))
  .def("aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)")
  .impl("aten::quantized_gru.data",
        CppFunction::makeUnboxedOnly(TypeDefault::quantized_gru_data))
  .def("aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)")
  .impl("aten::quantized_lstm_cell",
        CppFunction::makeUnboxedOnly(TypeDefault::quantized_lstm_cell))
  .def("aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
  .impl("aten::quantized_gru_cell", &TypeDefault::quantized_gru_cell)
  .def("aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
  .impl("aten::quantized_rnn_relu_cell", &TypeDefault::quantized_rnn_relu_cell)
  .def("aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> Tensor")
  .impl("aten::quantized_rnn_tanh_cell", &TypeDefault::quantized_rnn_tanh_cell)
  .def("aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)")
  .impl("aten::_pack_padded_sequence",
        CppFunction::makeUnboxedOnly(TypeDefault::_pack_padded_sequence))
  .def("aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> Tensor")
  .impl("aten::_pack_padded_sequence_backward",
        CppFunction::makeUnboxedOnly(TypeDefault::_pack_padded_sequence_backward))
  .def("aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)")
  .impl("aten::_pad_packed_sequence",
        CppFunction::makeUnboxedOnly(TypeDefault::_pad_packed_sequence))
  .def("aten::set_.source_Storage(Tensor(a!) self, Storage source) -> Tensor(a!)")
  .def("aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> Tensor(a!)")
  .def("aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> Tensor(a!)")
  .def("aten::set_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::set_quantizer_(Tensor(a!) self, ConstQuantizerPtr quantizer) -> Tensor(a!)")
  .def("aten::is_set_to(Tensor self, Tensor tensor) -> bool")
  .def("aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)")
  .def("aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor")
  .impl("aten::masked_fill.Scalar", &TypeDefault::masked_fill_Scalar)
  .def("aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)")
  .def("aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor")
  .impl("aten::masked_fill.Tensor", &TypeDefault::masked_fill_Tensor)
  .def("aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)")
  .def("aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor")
  .impl("aten::masked_scatter", &TypeDefault::masked_scatter)
  .def("aten::view(Tensor(a) self, int[] size) -> Tensor(a)")
  .def("aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> Tensor(a!)")
  .def("aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
  .def("aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> Tensor")
  .impl("aten::index_add", &TypeDefault::index_add)
  .def("aten::index_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor source) -> Tensor")
  .impl("aten::index_add.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::index_add_dimname))
  .def("aten::index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)")
  .def("aten::index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> Tensor")
  .impl("aten::index_fill.int_Scalar", &TypeDefault::index_fill_int_Scalar)
  .def("aten::index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> Tensor(a!)")
  .def("aten::index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> Tensor")
  .impl("aten::index_fill.int_Tensor", &TypeDefault::index_fill_int_Tensor)
  .def("aten::index_fill_.Dimname_Scalar(Tensor(a!) self, Dimname dim, Tensor index, Scalar value) -> Tensor(a!)")
  .impl("aten::index_fill_.Dimname_Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::index_fill__Dimname_Scalar))
  .def("aten::index_fill_.Dimname_Tensor(Tensor(a!) self, Dimname dim, Tensor index, Tensor value) -> Tensor(a!)")
  .impl("aten::index_fill_.Dimname_Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::index_fill__Dimname_Tensor))
  .def("aten::index_fill.Dimname_Scalar(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor")
  .impl("aten::index_fill.Dimname_Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::index_fill_Dimname_Scalar))
  .def("aten::index_fill.Dimname_Tensor(Tensor self, Dimname dim, Tensor index, Tensor value) -> Tensor")
  .impl("aten::index_fill.Dimname_Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::index_fill_Dimname_Tensor))
  .def("aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)")
  .def("aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> Tensor")
  .impl("aten::scatter.src", &TypeDefault::scatter_src)
  .def("aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> Tensor(a!)")
  .def("aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> Tensor")
  .impl("aten::scatter.value", &TypeDefault::scatter_value)
  .def("aten::scatter.dimname_src(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor")
  .impl("aten::scatter.dimname_src",
        CppFunction::makeUnboxedOnly(TypeDefault::scatter_dimname_src))
  .def("aten::scatter.dimname_value(Tensor self, Dimname dim, Tensor index, Scalar value) -> Tensor")
  .impl("aten::scatter.dimname_value",
        CppFunction::makeUnboxedOnly(TypeDefault::scatter_dimname_value))
  .def("aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> Tensor(a!)")
  .def("aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> Tensor")
  .impl("aten::scatter_add", &TypeDefault::scatter_add)
  .def("aten::scatter_add.dimname(Tensor self, Dimname dim, Tensor index, Tensor src) -> Tensor")
  .impl("aten::scatter_add.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::scatter_add_dimname))
  .def("aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::lt_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::lt__Scalar))
  .def("aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::lt_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::lt__Tensor))
  .def("aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::gt_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::gt__Scalar))
  .def("aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::gt_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::gt__Tensor))
  .def("aten::le_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::le_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::le__Scalar))
  .def("aten::le_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::le_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::le__Tensor))
  .def("aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::ge_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::ge__Scalar))
  .def("aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::ge_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::ge__Tensor))
  .def("aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::eq_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::eq__Scalar))
  .def("aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::eq_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::eq__Tensor))
  .def("aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::ne_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::ne__Scalar))
  .def("aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::ne_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::ne__Tensor))
  .def("aten::bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bitwise_and.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::bitwise_and.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_and_Scalar))
  .def("aten::bitwise_and.Tensor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::bitwise_and.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_and_Tensor))
  .def("aten::bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::bitwise_and_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_and__Scalar))
  .def("aten::bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::bitwise_and_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_and__Tensor))
  .def("aten::__and__.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::__and__.Scalar", &TypeDefault::__and___Scalar)
  .def("aten::__and__.Tensor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::__and__.Tensor", &TypeDefault::__and___Tensor)
  .def("aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::__iand__.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::__iand___Scalar))
  .def("aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::__iand__.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::__iand___Tensor))
  .def("aten::bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bitwise_or.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::bitwise_or.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_or_Scalar))
  .def("aten::bitwise_or.Tensor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::bitwise_or.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_or_Tensor))
  .def("aten::bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::bitwise_or_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_or__Scalar))
  .def("aten::bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::bitwise_or_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_or__Tensor))
  .def("aten::__or__.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::__or__.Scalar", &TypeDefault::__or___Scalar)
  .def("aten::__or__.Tensor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::__or__.Tensor", &TypeDefault::__or___Tensor)
  .def("aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::__ior__.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::__ior___Scalar))
  .def("aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::__ior__.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::__ior___Tensor))
  .def("aten::bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::bitwise_xor.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::bitwise_xor.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_xor_Scalar))
  .def("aten::bitwise_xor.Tensor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::bitwise_xor.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_xor_Tensor))
  .def("aten::bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::bitwise_xor_.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_xor__Scalar))
  .def("aten::bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::bitwise_xor_.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::bitwise_xor__Tensor))
  .def("aten::__xor__.Scalar(Tensor self, Scalar other) -> Tensor")
  .impl("aten::__xor__.Scalar", &TypeDefault::__xor___Scalar)
  .def("aten::__xor__.Tensor(Tensor self, Tensor other) -> Tensor")
  .impl("aten::__xor__.Tensor", &TypeDefault::__xor___Tensor)
  .def("aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .impl("aten::__ixor__.Scalar",
        CppFunction::makeUnboxedOnly(TypeDefault::__ixor___Scalar))
  .def("aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::__ixor__.Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::__ixor___Tensor))
  .def("aten::__lshift__.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::__lshift__.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .def("aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::__rshift__.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::__rshift__.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .def("aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::lgamma_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::atan2_(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .impl("aten::atan2_",
        CppFunction::makeUnboxedOnly(TypeDefault::atan2_))
  .def("aten::tril_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)")
  .def("aten::triu_(Tensor(a!) self, int diagonal=0) -> Tensor(a!)")
  .def("aten::digamma_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::digamma_",
        CppFunction::makeUnboxedOnly(TypeDefault::digamma_))
  .def("aten::polygamma_(Tensor(a!) self, int n) -> Tensor(a!)")
  .impl("aten::polygamma_",
        CppFunction::makeUnboxedOnly(TypeDefault::polygamma_))
  .def("aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> Tensor(a!)")
  .def("aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> Tensor(a!)")
  .def("aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> Tensor(a!)")
  .def("aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> Tensor(a!)")
  .def("aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> Tensor(a!)")
  .def("aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .def("aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> Tensor(a!)")
  .def("aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> Tensor(a!)")
  .def("aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .def("aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)")
  .impl("aten::addcdiv_",
        CppFunction::makeUnboxedOnly(TypeDefault::addcdiv_))
  .def("aten::random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::random_.from",
        CppFunction::makeUnboxedOnly(TypeDefault::random__from))
  .def("aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::random_.to",
        CppFunction::makeUnboxedOnly(TypeDefault::random__to))
  .def("aten::random_(Tensor(a!) self, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::random_",
        CppFunction::makeUnboxedOnly(TypeDefault::random_))
  .def("aten::uniform_(Tensor(a!) self, float from=0, float to=1, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::uniform_",
        CppFunction::makeUnboxedOnly(TypeDefault::uniform_))
  .def("aten::cauchy_(Tensor(a!) self, float median=0, float sigma=1, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::cauchy_",
        CppFunction::makeUnboxedOnly(TypeDefault::cauchy_))
  .def("aten::log_normal_(Tensor(a!) self, float mean=1, float std=2, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::log_normal_",
        CppFunction::makeUnboxedOnly(TypeDefault::log_normal_))
  .def("aten::exponential_(Tensor(a!) self, float lambd=1, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::exponential_",
        CppFunction::makeUnboxedOnly(TypeDefault::exponential_))
  .def("aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::geometric_",
        CppFunction::makeUnboxedOnly(TypeDefault::geometric_))
  .def("aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::diag(Tensor self, int diagonal=0) -> Tensor")
  .def("aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cross.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cross_out_out))
  .def("aten::cross(Tensor self, Tensor other, int? dim=None) -> Tensor")
  .impl("aten::cross", &TypeDefault::cross)
  .def("aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::triu(Tensor self, int diagonal=0) -> Tensor")
  .impl("aten::triu", &TypeDefault::triu)
  .def("aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::tril(Tensor self, int diagonal=0) -> Tensor")
  .impl("aten::tril", &TypeDefault::tril)
  .def("aten::tril_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .def("aten::triu_indices(int row, int col, int offset=0, *, ScalarType? dtype=long, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .def("aten::trace(Tensor self) -> Tensor")
  .def("aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::ne.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::ne.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::eq.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::eq.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::ge.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::ge.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::le.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::le.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::gt.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::gt.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::lt.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::lt.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::take(Tensor self, Tensor index) -> Tensor")
  .def("aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::index_select(Tensor self, int dim, Tensor index) -> Tensor")
  .def("aten::index_select.dimname_out(Tensor self, Dimname dim, Tensor index, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::index_select.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::index_select_out_dimname_out))
  .def("aten::index_select.dimname(Tensor self, Dimname dim, Tensor index) -> Tensor")
  .impl("aten::index_select.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::index_select_dimname))
  .def("aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::masked_select(Tensor self, Tensor mask) -> Tensor")
  .def("aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::nonzero(Tensor self) -> Tensor")
  .def("aten::nonzero_numpy(Tensor self) -> Tensor[]")
  .impl("aten::nonzero_numpy",
        CppFunction::makeUnboxedOnly(TypeDefault::nonzero_numpy))
  .def("aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> Tensor")
  .def("aten::gather.dimname_out(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::gather.dimname_out",
        CppFunction::makeUnboxedOnly(TypeDefault::gather_out_dimname_out))
  .def("aten::gather.dimname(Tensor self, Dimname dim, Tensor index, *, bool sparse_grad=False) -> Tensor")
  .impl("aten::gather.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::gather_dimname))
  .def("aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> Tensor")
  .impl("aten::_gather_sparse_backward", &TypeDefault::_gather_sparse_backward)
  .def("aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::addcmul.out",
        CppFunction::makeUnboxedOnly(TypeDefault::addcmul_out_out))
  .def("aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor")
  .impl("aten::addcmul", &TypeDefault::addcmul)
  .def("aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor(a!)")
  .impl("aten::addcmul_",
        CppFunction::makeUnboxedOnly(TypeDefault::addcmul_))
  .def("aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::addcdiv.out",
        CppFunction::makeUnboxedOnly(TypeDefault::addcdiv_out_out))
  .def("aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> Tensor")
  .impl("aten::addcdiv", &TypeDefault::addcdiv)
  .def("aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)")
  .def("aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)")
  .def("aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)")
  .impl("aten::triangular_solve.X",
        CppFunction::makeUnboxedOnly(TypeDefault::triangular_solve_out_X))
  .def("aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)")
  .impl("aten::triangular_solve",
        CppFunction::makeUnboxedOnly(TypeDefault::triangular_solve))
  .def("aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor)")
  .def("aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)")
  .impl("aten::symeig.e",
        CppFunction::makeUnboxedOnly(TypeDefault::symeig_out_e))
  .def("aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)")
  .impl("aten::symeig",
        CppFunction::makeUnboxedOnly(TypeDefault::symeig))
  .def("aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)")
  .def("aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)")
  .def("aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)")
  .def("aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)")
  .impl("aten::svd.U",
        CppFunction::makeUnboxedOnly(TypeDefault::svd_out_U))
  .def("aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)")
  .impl("aten::svd",
        CppFunction::makeUnboxedOnly(TypeDefault::svd))
  .def("aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor)")
  .def("aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cholesky.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cholesky_out_out))
  .def("aten::cholesky(Tensor self, bool upper=False) -> Tensor")
  .impl("aten::cholesky", &TypeDefault::cholesky)
  .def("aten::_cholesky_helper(Tensor self, bool upper) -> Tensor")
  .def("aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::cholesky_solve.out",
        CppFunction::makeUnboxedOnly(TypeDefault::cholesky_solve_out_out))
  .def("aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> Tensor")
  .impl("aten::cholesky_solve", &TypeDefault::cholesky_solve)
  .def("aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> Tensor")
  .def("aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU)")
  .impl("aten::solve",
        CppFunction::makeUnboxedOnly(TypeDefault::solve))
  .def("aten::solve.solution(Tensor self, Tensor A, *, Tensor(a!) solution, Tensor(b!) lu) -> (Tensor(a!) solution, Tensor(b!) LU)")
  .impl("aten::solve.solution",
        CppFunction::makeUnboxedOnly(TypeDefault::solve_out_solution))
  .def("aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor)")
  .def("aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::cholesky_inverse(Tensor self, bool upper=False) -> Tensor")
  .def("aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)")
  .impl("aten::qr.Q",
        CppFunction::makeUnboxedOnly(TypeDefault::qr_out_Q))
  .def("aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)")
  .impl("aten::qr",
        CppFunction::makeUnboxedOnly(TypeDefault::qr))
  .def("aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor)")
  .def("aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)")
  .def("aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)")
  .def("aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::orgqr(Tensor self, Tensor input2) -> Tensor")
  .def("aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> Tensor")
  .def("aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor)")
  .def("aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::lu_solve.out",
        CppFunction::makeUnboxedOnly(TypeDefault::lu_solve_out_out))
  .def("aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor")
  .impl("aten::lu_solve", &TypeDefault::lu_solve)
  .def("aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> Tensor")
  .def("aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> Tensor")
  .def("aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor)")
  .def("aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> Tensor")
  .def("aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::lgamma(Tensor self) -> Tensor")
  .def("aten::digamma.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::digamma.out",
        CppFunction::makeUnboxedOnly(TypeDefault::digamma_out_out))
  .def("aten::digamma(Tensor self) -> Tensor")
  .impl("aten::digamma", &TypeDefault::digamma)
  .def("aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::polygamma.out",
        CppFunction::makeUnboxedOnly(TypeDefault::polygamma_out_out))
  .def("aten::polygamma(int n, Tensor self) -> Tensor")
  .impl("aten::polygamma", &TypeDefault::polygamma)
  .def("aten::erfinv(Tensor self) -> Tensor")
  .def("aten::erfinv_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::sign(Tensor self) -> Tensor")
  .impl("aten::sign",
        CppFunction::makeUnboxedOnly(TypeDefault::sign))
  .def("aten::sign_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::sign_",
        CppFunction::makeUnboxedOnly(TypeDefault::sign_))
  .def("aten::sign.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::dist(Tensor self, Tensor other, Scalar p=2) -> Tensor")
  .impl("aten::dist", &TypeDefault::dist)
  .def("aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::atan2.out",
        CppFunction::makeUnboxedOnly(TypeDefault::atan2_out_out))
  .def("aten::atan2(Tensor self, Tensor other) -> Tensor")
  .impl("aten::atan2", &TypeDefault::atan2)
  .def("aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> Tensor")
  .def("aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> Tensor")
  .def("aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> Tensor")
  .def("aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::fmod.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::fmod.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::remainder.Scalar(Tensor self, Scalar other) -> Tensor")
  .def("aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::remainder.Tensor(Tensor self, Tensor other) -> Tensor")
  .def("aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::min.out",
        CppFunction::makeUnboxedOnly(TypeDefault::min_out_out))
  .def("aten::min.other(Tensor self, Tensor other) -> Tensor")
  .impl("aten::min.other", &TypeDefault::min_other)
  .def("aten::min(Tensor self) -> Tensor")
  .def("aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::max.out",
        CppFunction::makeUnboxedOnly(TypeDefault::max_out_out))
  .def("aten::max.other(Tensor self, Tensor other) -> Tensor")
  .impl("aten::max.other", &TypeDefault::max_other)
  .def("aten::max(Tensor self) -> Tensor")
  .def("aten::median(Tensor self) -> Tensor")
  .def("aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .def("aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)")
  .def("aten::sort.dimname_values(Tensor self, Dimname dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)")
  .impl("aten::sort.dimname_values",
        CppFunction::makeUnboxedOnly(TypeDefault::sort_out_dimname_values))
  .def("aten::sort.dimname(Tensor self, Dimname dim, bool descending=False) -> (Tensor values, Tensor indices)")
  .impl("aten::sort.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::sort_dimname))
  .def("aten::argsort(Tensor self, int dim=-1, bool descending=False) -> Tensor")
  .impl("aten::argsort", &TypeDefault::argsort)
  .def("aten::argsort.dimname(Tensor self, Dimname dim, bool descending=False) -> Tensor")
  .impl("aten::argsort.dimname",
        CppFunction::makeUnboxedOnly(TypeDefault::argsort_dimname))
  .def("aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) ->(Tensor(a!) values, Tensor(b!) indices)")
  .def("aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)")
  .def("aten::all(Tensor self) -> Tensor")
  .impl("aten::all", &TypeDefault::all)
  .def("aten::any(Tensor self) -> Tensor")
  .def("aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> Tensor")
  .def("aten::unfold(Tensor(a) self, int dimension, int size, int step) -> Tensor(a)")
  .def("aten::equal(Tensor self, Tensor other) -> bool")
  .def("aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> Tensor")
  .def("aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::pow.Scalar(Scalar self, Tensor exponent) -> Tensor")
  .def("aten::normal_(Tensor(a!) self, float mean=0, float std=1, *, Generator? generator=None) -> Tensor(a!)")
  .impl("aten::normal_",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_))
  .def("aten::normal.Tensor_float_out(Tensor mean, float std=1, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::normal.Tensor_float_out",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_out_Tensor_float_out))
  .def("aten::normal.Tensor_float(Tensor mean, float std=1, *, Generator? generator=None) -> Tensor")
  .impl("aten::normal.Tensor_float",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_Tensor_float))
  .def("aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::normal.float_Tensor_out",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_out_float_Tensor_out))
  .def("aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> Tensor")
  .impl("aten::normal.float_Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_float_Tensor))
  .def("aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::normal.Tensor_Tensor_out",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_out_Tensor_Tensor_out))
  .def("aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> Tensor")
  .impl("aten::normal.Tensor_Tensor",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_Tensor_Tensor))
  .def("aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, ScalarType? dtype=None, Layout? layout=None, Device? device=None, bool? pin_memory=None) -> Tensor")
  .impl("aten::normal.float_float",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_float_float))
  .def("aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::normal.float_float_out",
        CppFunction::makeUnboxedOnly(TypeDefault::normal_out_float_float_out))
  .def("aten::alias(Tensor(a) self) -> Tensor(a)")
  .impl("aten::alias",
        CppFunction::makeUnboxedOnly(TypeDefault::alias))
  .def("aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor")
  .def("aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> Tensor(a!)")
  .def("aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> Tensor(a!)")
  .def("aten::_cumsum(Tensor self, int dim) -> Tensor")
  .def("aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::_cumprod(Tensor self, int dim) -> Tensor")
  .def("aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::_var(Tensor self, bool unbiased=True) -> Tensor")
  .def("aten::_std(Tensor self, bool unbiased=True) -> Tensor")
  .def("aten::_amp_non_finite_check_and_unscale_(Tensor(a!) self, Tensor(b!) found_inf, Tensor inv_scale) -> ()")
  .def("aten::_amp_update_scale(Tensor(a!) growth_tracker, Tensor current_scale, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> Tensor")
  .def("aten::_cat(Tensor[] tensors, int dim=0) -> Tensor")
  .def("aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor)")
  .def("aten::_mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::_max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)")
  .def("aten::_max.max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::_min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)")
  .def("aten::_min.min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::mse_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::mse_loss.out",
        CppFunction::makeUnboxedOnly(TypeDefault::mse_loss_out_out))
  .def("aten::mse_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
  .impl("aten::mse_loss", &TypeDefault::mse_loss)
  .def("aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
  .def("aten::l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::l1_loss.out",
        CppFunction::makeUnboxedOnly(TypeDefault::l1_loss_out_out))
  .def("aten::l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
  .impl("aten::l1_loss", &TypeDefault::l1_loss)
  .def("aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
  .impl("aten::l1_loss_backward", &TypeDefault::l1_loss_backward)
  .def("aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=Mean) -> Tensor")
  .def("aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=Mean) -> Tensor")
  .def("aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::multilabel_margin_loss.out",
        CppFunction::makeUnboxedOnly(TypeDefault::multilabel_margin_loss_out_out))
  .def("aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
  .impl("aten::multilabel_margin_loss", &TypeDefault::multilabel_margin_loss)
  .def("aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))")
  .def("aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)")
  .def("aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> Tensor")
  .def("aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::nll_loss.out",
        CppFunction::makeUnboxedOnly(TypeDefault::nll_loss_out_out))
  .def("aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor")
  .impl("aten::nll_loss",
        CppFunction::makeUnboxedOnly(TypeDefault::nll_loss))
  .def("aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))")
  .def("aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)")
  .def("aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor")
  .def("aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::nll_loss2d.out",
        CppFunction::makeUnboxedOnly(TypeDefault::nll_loss2d_out_out))
  .def("aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=Mean, int ignore_index=-100) -> Tensor")
  .impl("aten::nll_loss2d",
        CppFunction::makeUnboxedOnly(TypeDefault::nll_loss2d))
  .def("aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))")
  .def("aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)")
  .def("aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> Tensor")
  .def("aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
  .impl("aten::smooth_l1_loss", &TypeDefault::smooth_l1_loss)
  .def("aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
  .impl("aten::smooth_l1_loss_backward", &TypeDefault::smooth_l1_loss_backward)
  .def("aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=Mean, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::soft_margin_loss.out",
        CppFunction::makeUnboxedOnly(TypeDefault::soft_margin_loss_out_out))
  .def("aten::soft_margin_loss(Tensor self, Tensor target, int reduction=Mean) -> Tensor")
  .impl("aten::soft_margin_loss", &TypeDefault::soft_margin_loss)
  .def("aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .impl("aten::soft_margin_loss_backward.grad_input",
        CppFunction::makeUnboxedOnly(TypeDefault::soft_margin_loss_backward_out_grad_input))
  .def("aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> Tensor")
  .impl("aten::soft_margin_loss_backward", &TypeDefault::soft_margin_loss_backward)
  .def("aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor")
  .def("aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> Tensor")
  .impl("aten::elu_backward", &TypeDefault::elu_backward)
  .def("aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> Tensor(a!)")
  .def("aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::glu(Tensor self, int dim=-1) -> Tensor")
  .def("aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> Tensor")
  .def("aten::hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::hardsigmoid.out",
        CppFunction::makeUnboxedOnly(TypeDefault::hardsigmoid_out_out))
  .def("aten::hardsigmoid(Tensor self) -> Tensor")
  .def("aten::hardsigmoid_(Tensor(a!) self) -> Tensor(a!)")
  .impl("aten::hardsigmoid_",
        CppFunction::makeUnboxedOnly(TypeDefault::hardsigmoid_))
  .def("aten::hardsigmoid_backward(Tensor grad_output, Tensor self) -> Tensor")
  .impl("aten::hardsigmoid_backward", &TypeDefault::hardsigmoid_backward)
  .def("aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> Tensor")
  .def("aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> Tensor")
  .impl("aten::hardtanh_backward", &TypeDefault::hardtanh_backward)
  .def("aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> Tensor(a!)")
  .def("aten::hardswish.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::hardswish.out",
        CppFunction::makeUnboxedOnly(TypeDefault::hardswish_out_out))
  .def("aten::hardswish(Tensor self) -> Tensor")
  .def("aten::hardswish_(Tensor(a!) self) -> Tensor(a!)")
  .def("aten::hardswish_backward(Tensor grad_output, Tensor self) -> Tensor")
  .impl("aten::hardswish_backward", &TypeDefault::hardswish_backward)
  .def("aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> Tensor")
  .def("aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> Tensor")
  .impl("aten::leaky_relu_backward", &TypeDefault::leaky_relu_backward)
  .def("aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> Tensor(a!)")
  .def("aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::log_sigmoid.out",
        CppFunction::makeUnboxedOnly(TypeDefault::log_sigmoid_out_out))
  .def("aten::log_sigmoid(Tensor self) -> Tensor")
  .impl("aten::log_sigmoid", &TypeDefault::log_sigmoid)
  .def("aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))")
  .def("aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)")
  .def("aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> Tensor")
  .def("aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor")
  .def("aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> Tensor")
  .impl("aten::rrelu_with_noise_backward", &TypeDefault::rrelu_with_noise_backward)
  .def("aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=False, Generator? generator=None) -> Tensor(a!)")
  .def("aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::softplus.out",
        CppFunction::makeUnboxedOnly(TypeDefault::softplus_out_out))
  .def("aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> Tensor")
  .impl("aten::softplus", &TypeDefault::softplus)
  .def("aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> Tensor")
  .impl("aten::softplus_backward", &TypeDefault::softplus_backward)
  .def("aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::softshrink.out",
        CppFunction::makeUnboxedOnly(TypeDefault::softshrink_out_out))
  .def("aten::softshrink(Tensor self, Scalar lambd=0.5) -> Tensor")
  .impl("aten::softshrink", &TypeDefault::softshrink)
  .def("aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> Tensor")
  .impl("aten::softshrink_backward", &TypeDefault::softshrink_backward)
  .def("aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
  .impl("aten::adaptive_avg_pool2d",
        CppFunction::makeUnboxedOnly(TypeDefault::adaptive_avg_pool2d))
  .def("aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
  .def("aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> Tensor")
  .def("aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> Tensor")
  .def("aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> Tensor")
  .def("aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> Tensor")
  .def("aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)")
  .def("aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor")
  .def("aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)")
  .def("aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> Tensor")
  .def("aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor")
  .def("aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor")
  .def("aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> Tensor")
  .def("aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> Tensor")
  .def("aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)")
  .def("aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> Tensor")
  .def("aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)")
  .def("aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> Tensor")
  .def("aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=0, int[2] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
  .def("aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> Tensor")
  .def("aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))")
  .def("aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=0, int[3] dilation=1, bool ceil_mode=False) -> (Tensor, Tensor)")
  .def("aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> Tensor")
  .def("aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> Tensor")
  .def("aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> Tensor")
  .def("aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor")
  .def("aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> Tensor")
  .def("aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::reflection_pad1d(Tensor self, int[2] padding) -> Tensor")
  .def("aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor")
  .def("aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::reflection_pad2d(Tensor self, int[4] padding) -> Tensor")
  .def("aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor")
  .def("aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::replication_pad1d(Tensor self, int[2] padding) -> Tensor")
  .def("aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> Tensor")
  .def("aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::replication_pad2d(Tensor self, int[4] padding) -> Tensor")
  .def("aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> Tensor")
  .def("aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::replication_pad3d(Tensor self, int[6] padding) -> Tensor")
  .def("aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> Tensor")
  .def("aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> Tensor")
  .def("aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> Tensor")
  .def("aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> Tensor")
  .def("aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> Tensor")
  .def("aten::upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> Tensor")
  .def("aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::sigmoid_backward(Tensor grad_output, Tensor output) -> Tensor")
  .impl("aten::sigmoid_backward", &TypeDefault::sigmoid_backward)
  .def("aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::tanh_backward(Tensor grad_output, Tensor output) -> Tensor")
  .impl("aten::tanh_backward", &TypeDefault::tanh_backward)
  .def("aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] output_padding=0, int[2] dilation=1) -> Tensor")
  .def("aten::slow_conv_transpose2d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .def("aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] output_padding=0, int[3] dilation=1) -> Tensor")
  .def("aten::slow_conv_transpose3d_backward.grad_output(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .def("aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::thnn_conv2d.out",
        CppFunction::makeUnboxedOnly(TypeDefault::thnn_conv2d_out_out))
  .def("aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0) -> Tensor")
  .impl("aten::thnn_conv2d",
        CppFunction::makeUnboxedOnly(TypeDefault::thnn_conv2d))
  .def("aten::thnn_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)")
  .def("aten::thnn_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .def("aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::thnn_conv_depthwise2d.out",
        CppFunction::makeUnboxedOnly(TypeDefault::thnn_conv_depthwise2d_out_out))
  .def("aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor")
  .impl("aten::thnn_conv_depthwise2d",
        CppFunction::makeUnboxedOnly(TypeDefault::thnn_conv_depthwise2d))
  .def("aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> Tensor")
  .def("aten::thnn_conv_depthwise2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight) -> (Tensor(a!), Tensor(b!))")
  .def("aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight)")
  .def("aten::slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, *, Tensor(a!) out) -> Tensor(a!)")
  .impl("aten::slow_conv3d.out",
        CppFunction::makeUnboxedOnly(TypeDefault::slow_conv3d_out_out))
  .def("aten::slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0) -> Tensor")
  .impl("aten::slow_conv3d",
        CppFunction::makeUnboxedOnly(TypeDefault::slow_conv3d))
  .def("aten::slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output, Tensor(b!) finput, Tensor(c!) fgrad_input) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input)")
  .def("aten::slow_conv3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, *, Tensor(a!)? grad_input, Tensor(b!)? grad_weight, Tensor(c!)? grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))")
  .def("aten::slow_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .def("aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=1, int[2] padding=0, int[2] dilation=1) -> Tensor")
  .def("aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .def("aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=1, int[3] padding=0, int[3] dilation=1) -> Tensor")
  .def("aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)")
  .def("aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
  .def("aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
  .def("aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> Tensor(a!)")
  .def("aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
  .def("aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> Tensor(a!)")
  .def("aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> Tensor")
  .def("aten::isfinite(Tensor self) -> Tensor")
  .impl("aten::isfinite", &TypeDefault::isfinite)
  .def("aten::isinf(Tensor self) -> Tensor")
  .impl("aten::isinf", &TypeDefault::isinf);
}

}  // namespace at
